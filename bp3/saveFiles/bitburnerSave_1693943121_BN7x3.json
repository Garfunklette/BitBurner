{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":20,\"max\":20},\"skills\":{\"hacking\":43,\"strength\":109,\"defense\":109,\"dexterity\":113,\"agility\":117,\"charisma\":115,\"intelligence\":186},\"exp\":{\"hacking\":6768.834016830234,\"strength\":6002.619298161434,\"defense\":6002.619298161434,\"dexterity\":5806.009027394735,\"agility\":5560.919511781453,\"charisma\":4863.344183383877,\"intelligence\":174980.19172425824},\"mults\":{\"hacking_chance\":1.4543773453974598,\"hacking_speed\":1.4543773453974598,\"hacking_money\":1.4543773453974598,\"hacking_grow\":1.4543773453974598,\"hacking\":1.4543773453974598,\"strength\":1.3466456901828332,\"defense\":1.3466456901828332,\"dexterity\":1.4139779746919745,\"agility\":1.4846768734265734,\"charisma\":1.5351760868084299,\"hacking_exp\":1.4543773453974598,\"strength_exp\":1.3466456901828332,\"defense_exp\":1.3466456901828332,\"dexterity_exp\":1.3466456901828332,\"agility_exp\":1.3466456901828332,\"charisma_exp\":1.3466456901828332,\"company_rep\":1.7775723110413397,\"faction_rep\":1.3466456901828332,\"crime_money\":1.4813102592011165,\"crime_success\":1.3466456901828332,\"hacknet_node_money\":1.589041914415743,\"hacknet_node_purchase_cost\":0.6089197670759777,\"hacknet_node_ram_cost\":0.6089197670759777,\"hacknet_node_core_cost\":0.6089197670759777,\"hacknet_node_level_cost\":0.6089197670759777,\"work_money\":2.026432434587128,\"bladeburner_max_stamina\":1.12,\"bladeburner_stamina_gain\":1.12,\"bladeburner_analysis\":1.12,\"bladeburner_success_chance\":1.12},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":5},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":7,\"corporation\":null,\"gang\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":20.62735166192399,\"maxRank\":20.62735166192399,\"skillPoints\":4,\"totalSkillPoints\":6,\"teamSize\":0,\"sleeveSize\":0,\"teamLost\":0,\"hpLost\":31,\"storedCycles\":2109256,\"randomEventCounter\":24,\"actionTimeToComplete\":30,\"actionTimeCurrent\":6,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Field Analysis\",\"type\":7}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"pop\":1031403316,\"popEst\":1362912806.7876918,\"comms\":18,\"chaos\":0,\"name\":\"Aevum\"}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"pop\":1873308110,\"popEst\":1501597812.0894077,\"comms\":67,\"chaos\":2.03382799999984,\"name\":\"Chongqing\"}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"pop\":1048611738,\"popEst\":1048611738,\"comms\":71,\"chaos\":2.3261430399994474,\"name\":\"Sector-12\"}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"pop\":1197179949,\"popEst\":1413658734.144641,\"comms\":88,\"chaos\":1.0962180000001198,\"name\":\"New Tokyo\"}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"pop\":1361470764,\"popEst\":1207029895.4626248,\"comms\":70,\"chaos\":0.4241000000000714,\"name\":\"Ishima\"}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"pop\":1908180740,\"popEst\":934347771.0425082,\"comms\":106,\"chaos\":0.2500000000000724,\"name\":\"Volhaven\"}}},\"city\":\"Sector-12\",\"skills\":{\"Hyperdrive\":1},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":1,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1.1},\"staminaBonus\":0,\"maxStamina\":50.55530235023044,\"stamina\":50.55530235023044,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":9,\"maxLevel\":9,\"autoLevel\":true,\"baseDifficulty\":130.73163578536787,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":58,\"failures\":11,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":143.23770833333364,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":242.6255394382977,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":145.2416666666663,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":199.6916921187006,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":190.34374999999892,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":416.29066489856115,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":135.6945833333091,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":511.1745324239549,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":106.6529166666505,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":611.6824840381295,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":196.01937500002265,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":805.7587629401684,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":76.64541666666607,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":916.5664451792059,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":159.18979166670456,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1598.6164595313114,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":130.12708333331855,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[8/31 16:47:23] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[8/31 16:47:53] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[8/31 16:48:23] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[8/31 16:48:53] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[8/31 16:49:10] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\",\"[9/1 09:29:02] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/1 09:29:08] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/1 09:29:14] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/1 09:29:20] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/1 09:29:26] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:27:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:28:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:28:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:28:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:28:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:18] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:24] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:30] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:36] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:42] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:48] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:29:54] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:00] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:06] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:12] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:18] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:24] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:30] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:36] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:42] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:48] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:30:50] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[9/5 14:30:54] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:31:00] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:31:06] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:31:12] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:31:18] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:31:24] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:32:56] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[9/5 14:33:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:33:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:41] Intelligence indicates that a Synthoid community migrated from Aevum to some other city\",\"[9/5 14:34:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:34:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:35:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:35:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:35:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:35:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:35:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:36:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:00] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[9/5 14:37:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:07] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:13] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:19] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:25] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:31] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:37] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:49] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:37:55] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:38:01] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:40:43] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\",\"[9/5 14:45:18] Player: Field analysis completed. Gained 0.060 rank, 29.088 hacking exp, and 26.933 charisma exp\"]}},\"currentServer\":\"home\",\"factions\":[\"Slum Snakes\"],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":128,\"hashes\":128,\"upgrades\":{\"Sell for Money\":2,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-2965.200000000022,\"numPeopleKilled\":0,\"location\":\"The Slums\",\"money\":515583194.00786,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1616160,\"codingcontract\":0,\"corporation\":0,\"crime\":6519246.45074411,\"gang\":0,\"hacking\":0,\"hacknet\":517337887.5333783,\"hacknet_expenses\":-6658892.976262407,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":515582081.00786,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":17582100.582415406,\"casino\":0,\"class\":-2097120,\"codingcontract\":0,\"corporation\":0,\"crime\":58727227.2827897,\"gang\":0,\"hacking\":0,\"hacknet\":528337887.5333783,\"hacknet_expenses\":-23611347.01457451,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":33750,\"stock\":0,\"total\":515741201.2088833,\"work\":0,\"servers\":0,\"other\":-400000,\"augmentations\":-62831297.17512534}},\"playtimeSinceLastAug\":429256600,\"playtimeSinceLastBitnode\":446923600,\"lastAugReset\":1693513863843,\"lastNodeReset\":1693496196708,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":1.126790458937418,\"defense\":1.126790458937418,\"dexterity\":1.126790458937418,\"agility\":1.126790458937418,\"charisma\":0,\"intelligence\":138576.41615021968},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":58.26081019375204,\"storedCycles\":2104859,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":0.03205476341822548,\"defense\":0.03205476341822548,\"dexterity\":0.03205476341822548,\"agility\":0.03205476341822548,\"charisma\":0,\"intelligence\":137409.01836925058},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":57.99970896169355,\"storedCycles\":2104859,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":0.03205476341822548,\"defense\":0.03205476341822548,\"dexterity\":0.03205476341822548,\"agility\":0.03205476341822548,\"charisma\":0,\"intelligence\":137563.9423490134},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":57.99970896169355,\"storedCycles\":2104859,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":0.03205476341822548,\"defense\":0.03205476341822548,\"dexterity\":0.03205476341822548,\"agility\":0.03205476341822548,\"charisma\":0,\"intelligence\":138035.78505720713},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":57.99970896169355,\"storedCycles\":2104859,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":0.03205476341822548,\"defense\":0.03205476341822548,\"dexterity\":0.03205476341822548,\"agility\":0.03205476341822548,\"charisma\":0,\"intelligence\":137501.66514347575},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":57.99970896169355,\"storedCycles\":2104859,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":178},\"exp\":{\"hacking\":0,\"strength\":0.03205476341822548,\"defense\":0.03205476341822548,\"dexterity\":0.03205476341822548,\"agility\":0.03205476341822548,\"charisma\":0,\"intelligence\":137815.7598882619},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":57.99970896169355,\"storedCycles\":2104859,\"sync\":100}}],\"sleevesFromCovenant\":5,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[3,3],[5,1],[10,1],[12,3],[9,2],[11,1],[7,2]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1673649774456},{\"ID\":\"WORKOUT\",\"unlockedOn\":1673650254452},{\"ID\":\"TOR\",\"unlockedOn\":1673904787130},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1673904907097},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1673993670319},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1674058124109},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1674058124117},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1674058124118},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1674058124119},{\"ID\":\"NITESEC\",\"unlockedOn\":1674060266906},{\"ID\":\"TRAVEL\",\"unlockedOn\":1674068278110},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1674073716306},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1674139284321},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1674229923267},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1674250620289},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1674252748462},{\"ID\":\"DONATION\",\"unlockedOn\":1674487197063},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1674495613054},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1675110180025},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1675110180031},{\"ID\":\"SF1.1\",\"unlockedOn\":1675116384241},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1675284167154},{\"ID\":\"4S\",\"unlockedOn\":1675874423663},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1675879544668},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1675880457681},{\"ID\":\"SF4.1\",\"unlockedOn\":1677599756002},{\"ID\":\"CORPORATION\",\"unlockedOn\":1677599995992},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1677881135652},{\"ID\":\"FROZE\",\"unlockedOn\":1677881677514},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1677881857510},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1677882997549},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1677882997551},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1677884683948},{\"ID\":\"SF3.1\",\"unlockedOn\":1678117830384},{\"ID\":\"FAST_BN\",\"unlockedOn\":1678214043188},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1678295611701},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683740366140},{\"ID\":\"SF5.1\",\"unlockedOn\":1685464264385},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1686775286822},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1686838527850},{\"ID\":\"SF10.1\",\"unlockedOn\":1686840688034},{\"ID\":\"N00DLES\",\"unlockedOn\":1686848188018},{\"ID\":\"SF12.1\",\"unlockedOn\":1687268591329},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1687554279967},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1687557759592},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1687568439669},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688400262045},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1688400262048},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688400455128},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1688400455143},{\"ID\":\"SF9.1\",\"unlockedOn\":1688408749872},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1690394564791},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1690472034194},{\"ID\":\"SF11.1\",\"unlockedOn\":1692023122231},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1692035662263},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1692036502387},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1692913113032},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1692974886442},{\"ID\":\"SF7.1\",\"unlockedOn\":1692974915502}],\"terminalCommandHistory\":[\"nano bp3_bb_manager.js \",\"run bp3_bb_augs.js info --tail\",\"train 200\",\"sCrime \",\"bb\",\"run bp3_bb_sleeves.js \",\"nano bp3_bb_sleeves.js \",\"nano bp3_bb_manager.js \",\"nano bp3_player_train.js \",\"bb\",\"run bp3_bb_augs.js info --tail\",\"bb\",\"nano bp3_helpers_bb.js \",\"ls --grep pur\",\"bb\",\"nano bp3_bb_manager.js \",\"nano bp3_helpers_bb.js \",\"run bp3_bb_augs.js \",\"run bp3_bb_augs.js --tail\",\"player \",\"bb\",\"pAugs\",\"run bp3_bb_augs.js info --tail\",\"run bp3_bb_augs.js \",\"bb\",\"run bp3_bb_augs.js info --tail\",\"pAugs\",\"tor\",\"player\",\"bb\",\"run bp3_bb_augs.js info --tail\",\"bb\",\"crime\",\"run bp3_player_crime.js \",\"ls --grep cri\",\"run bp3_crime_doBest.js \",\"run bp3_crime_doBest.js --tail\",\"hacknet\",\"run bp3_bb_augs.js \",\"pAugs \",\"bb\",\"nano bp3_bb_manager.js \",\"bb\",\"run bp3_bb_augs.js \",\"bb\",\"run bp3_bb_augs.js \",\"bb\",\"download \",\"download *\",\"help\"],\"lastUpdate\":1693943120317,\"lastSave\":1693943083569,\"totalPlaytime\":20293472800,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"176afe9ca1546f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18508.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,23]],\"reward\":null}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-740209.cct\",\"type\":\"Total Ways to Sum\",\"data\":24,\"reward\":null}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-317859.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,0,3,1,2,5,1,2,2,2],\"reward\":null}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"18.7.8.1\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bp3_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function writeHackDataToPort(ns,port, target, action,result, threads, time) {\\n\\tlet portInfo = { target: target, action: action, result: result, threads: threads, time: time }\\n\\tns.writePort(port, JSON.stringify(portInfo))\\n}\\n\\nexport async function main(ns) {\\nlet target = ns.args[0];\\n\\tlet stockOpt = ns.args[1] || false;\\n\\tlet result = await ns.hack(target,{stock:stockOpt});\\n\\twriteHackDataToPort(ns, 1, target, \\\"hack\\\", result,1, Date.now())\\n}\",\"filename\":\"bp3_hack.js\",\"server\":\"home\"}}],[\"bp3_grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function writeHackDataToPort(ns,port, target, action,result, threads, time) {\\n\\tlet portInfo = { target: target, action: action, result: result, threads: threads, time: time }\\n\\tns.writePort(port, JSON.stringify(portInfo))\\n}\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet stockOpt = ns.args[1] || false;\\n\\tlet result = await ns.grow(target,{stock:stockOpt});\\n\\twriteHackDataToPort(ns, 1, target,\\\"grow\\\", Math.floor(result*1000)/1000,1, Date.now())\\n}\",\"filename\":\"bp3_grow.js\",\"server\":\"home\"}}],[\"bp3_weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function writeHackDataToPort(ns,port, target, action,result, threads, time) {\\n\\tlet portInfo = { target: target, action: action, result: result, threads: threads, time: time }\\n\\tns.writePort(port, JSON.stringify(portInfo))\\n}\\n\\nexport async function main(ns) {\\nlet target = ns.args[0];\\nlet result = await ns.weaken(target);\\n\\twriteHackDataToPort(ns, 1, target, \\\"weak\\\",result,1, Date.now())\\n}\",\"filename\":\"bp3_weaken.js\",\"server\":\"home\"}}],[\"bp3_helpers_hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\";\\nimport * as dServers from \\\"bp3_data_servers.js\\\"\\nimport * as dStocks from \\\"bp3_data_stocks.js\\\"\\n\\nexport function getRunningManagers(ns, script = \\\"bp3_hacking_manager.js\\\") {\\n\\tlet net = hServers.networkScan(ns)\\n\\tlet runningManagers = [];\\n\\tfor (let i of net) {\\n\\t\\tfor (let j of net) {\\n\\t\\t\\tif (ns.isRunning(script, i, j))\\n\\t\\t\\t\\trunningManagers.push(j);\\n\\t\\t}\\n\\t}\\n\\treturn runningManagers;\\n}\\n\\nexport function getMaxThreads(ns, hostServer, script, scriptHost) {\\n\\t//\\tns.print(\\\"getMaxThreads: \\\" + hostServer)\\n\\tlet maxRam = ns.getServerMaxRam(hostServer);\\n\\tlet scriptRam = ns.getScriptRam(script, scriptHost);\\n\\tlet maxThreads = Math.floor(maxRam / scriptRam);\\n\\treturn maxThreads;\\n}\\n\\n\\n//================Move to stock helpers ================\\nfunction getStockOpt(ns, server, action) {\\n\\t//ns.print(\\\"Has 4s datatixAPI?\\\" +ns.TIX.has4SDataTIXAPI())\\n\\t\\tif (ns.stock.has4SDataTIXAPI()) {\\n\\tlet sym = getSymByServer(ns,server);\\n\\tif (typeof sym !== 'undefined') {\\n\\tlet pos = ns.stock.getPosition(sym);\\n\\tlet forecast = ns.stock.getForecast(sym);\\n\\tif ((action === \\\"g\\\" && pos[0]===0) || forecast > .5) {\\n\\t\\t\\treturn false;\\n\\t}\\n\\tif ((action === \\\"h\\\" && pos[2]===0) || forecast < .5) {\\n\\t\\t\\treturn false;\\n\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction getServerBySym(ns, sym) {\\n\\tlet org = getKeyByValue(dStocks.StockSymbol, sym);\\n\\tlet serverData = dServers.ServerMetadata.find(el => el.organizationName === org);\\n\\treturn serverData.hostname;\\n}\\n\\nfunction getSymByServer(ns, server) {\\n\\tlet serverData = dServers.ServerMetadata.find(el => el.hostname === server);\\n\\tlet org = serverData.organizationName;\\n\\tlet sym = dStocks.StockSymbol[org];\\n\\treturn sym;\\n}\\n\\nfunction getKeyByValue(object, value) {\\n\\treturn Object.keys(object).find(key => object[key] === value);\\n}\\n//================= / move to stock helpers =======================\\n\\nexport function distributeThreads(ns, script, hostList, totalThreads, target, action, batch, endTime) {\\n\\thostList.sort((a, b) => hServers.getServerFreeRam(ns, b) - hServers.getServerFreeRam(ns, a));\\n\\t//ns.print(\\\"hostList pre check \\\"+hostList)\\n\\tif (hostList.indexOf(\\\"home\\\" > -1)) {\\n\\t\\thostList.splice(hostList.indexOf(\\\"home\\\"), 1);\\n\\t\\thostList.push(\\\"home\\\");\\n\\t}\\n\\t//ns.print(\\\"hostList \\\"+hostList)\\n\\tlet remainingThreads = Math.ceil(totalThreads);\\n\\tlet stockOpt = getStockOpt(ns,target, action);\\n\\tfor (let k of hostList) {\\n\\t\\tif (remainingThreads > 0) {\\n\\t\\t\\tlet hostMaxThreads = getMaxThreads(ns, k, script, k);\\n\\t\\t\\tlet hostThreads = Math.min(hostMaxThreads, remainingThreads);\\n\\t\\t\\t//\\tns.print(k + \\\" \\\" + hostThreads + \\\" \\\" + target)\\n\\t\\t\\t//     ns.print(target, action, batch);\\n\\t\\t\\tlet prevDup = false;\\n\\t\\t\\tif (batch === \\\"prep\\\") {\\n\\t\\t\\t\\tprevDup = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.exec(script, k, { threads: hostThreads, preventDuplicates: prevDup }, target, stockOpt, action, batch, endTime)) {\\n\\t\\t\\t\\tremainingThreads = remainingThreads - hostThreads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn remainingThreads;\\n}\\n\\nexport function getMaxBatchThreads(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n\\tlet secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n\\tlet wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1) * 1.2);\\n\\tlet gThreads = Math.ceil(ns.growthAnalyze(target, 2) * 2);\\n\\tlet wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1) * 1.2);\\n\\treturn [hThreads + wThreadsHack + gThreads + wThreadsGrow, minSec(ns, target), maxMoney(ns, target)];\\n}\\n\\nexport async function scpHackingScripts(ns, destinationList, scriptList = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\"]) {\\n\\tlet scripts = scriptList\\n\\tlet scriptHost = \\\"home\\\";\\n\\tfor (let i of destinationList) {\\n\\t\\tlet destination = i;\\n\\t\\tawait ns.scp(scripts, destination, scriptHost);\\n\\t}\\n}\\n\\nexport function getWeakenThreads(ns, target) {\\n\\treturn Math.ceil(secDecreaseRequired(ns, target) / ns.weakenAnalyze(1) * 1.2);\\n\\n}\\n\\nexport function getMaxGrowthPercent(ns, target) {\\n\\treturn ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + .00001);\\n}\\n\\nexport function getGrowThreads(ns, target, growthPercent) {\\n\\treturn Math.ceil(ns.growthAnalyze(target, growthPercent) * 2);\\n}\\n\\nexport function getHackThreads(ns, target, moneyGoal) {\\n\\tlet threads = ns.hackAnalyzeThreads(target, moneyGoal);\\n\\tns.print(\\\"hacking threads for money goal: \\\" + threads + \\\" for \\\" + ns.nFormat(moneyGoal, \\\"0.00a\\\"));\\n\\treturn threads;\\n}\\n\\nexport function minSec(ns, target) {\\n\\tif (ns.getServerSecurityLevel(target) <= ns.getServerMinSecurityLevel(target) * 1.05) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function maxMoney(ns, target) {\\n\\tif (ns.getServerMoneyAvailable(target) === ns.getServerMaxMoney(target)) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function secDecreaseRequired(ns, target) {\\n\\treturn ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n}\\n\\nexport function hackableMoney(ns, target) {\\n\\tlet avail = ns.getServerMoneyAvailable(target);\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) / 2;\\n\\treturn avail - moneyThresh;\\n}\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nexport function getHackScripts(eventList) {\\n\\tlet scriptList = [];\\n\\tfor (let i of eventList) {\\n\\t\\tscriptList.push(EVENT_LIST[EVENT_LIST.map(function (el) { return el.action }).indexOf(i)].script);\\n\\t}\\n\\treturn scriptList;\\n}\\n\\nexport function scheduleEvents(ns, target, eventList = [\\\"h\\\", \\\"w1\\\", \\\"g\\\", \\\"w2\\\"], batchName, batchStart, goalBatchEndTime) {\\n\\tlet events = [];\\n\\tfor (let i of eventList) {\\n\\t\\tevents.push({\\n\\t\\t\\tnTarget: target,\\n\\t\\t\\tn: i, nScript: \\\"\\\",\\n\\t\\t\\tnStart: 0,\\n\\t\\t\\tnDur: 0,\\n\\t\\t\\tnEnd: 0,\\n\\t\\t\\tnThreads: 0,\\n\\t\\t\\tnBName: batchName,\\n\\t\\t\\tnBStart: batchStart,\\n\\t\\t\\tnBEnd: 0,\\n\\t\\t\\tnGoalBatchEndTime: goalBatchEndTime,\\n\\t\\t\\tnStartTime: 0,\\n\\t\\t\\tnEndTime: 0,\\n\\t\\t\\tnBEndTime: 0\\n\\t\\t})\\n\\t}\\n\\tevents = updateScripts(events, getHackScripts(eventList));\\n\\tevents = updateTimes(ns, events, target, goalBatchEndTime);\\n\\tevents = updateThreads(ns, events, target);\\n\\t//  ns.print(\\\"sorting end times \\\"+target);\\n\\tevents.sort((a, b) => a.nEnd - b.nEnd);\\n\\t// ns.print(events);\\n\\n\\t// ns.print(\\\"sorting start times \\\"+target);\\n\\tevents.sort((a, b) => a.nStart - b.nStart);\\n\\t// ns.print(events);\\n\\treturn events;\\n}\\n\\nexport function getActionList(ns, target) {\\n\\tlet actionList = [];\\n\\tif (ns.getServerMoneyAvailable(target) === ns.getServerMaxMoney(target)) {\\n\\t\\tactionList.push(\\\"h\\\");\\n\\t}\\n\\tactionList.push(\\\"w1\\\");\\n\\tif (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n\\t\\tactionList.push(\\\"g\\\", \\\"w2\\\");\\n\\t}\\n}\\n\\nexport function updateScripts(events, eventScripts = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"]) {\\n\\tfor (let i in events) {\\n\\t\\tevents[i].nScript = eventScripts[i];\\n\\t}\\n\\treturn events\\n}\\n\\nexport function getActionTimes(ns, target, events) {\\n\\tlet actionTimes = [];\\n\\tlet actionList = events.map(function (el) { return el.n })\\n\\tfor (let action of actionList) {\\n\\t\\tswitch (action) {\\n\\t\\t\\tcase \\\"h\\\":\\n\\t\\t\\t\\tactionTimes.push(ns.getHackTime(target));\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"w1\\\":\\n\\t\\t\\t\\tactionTimes.push(ns.getWeakenTime(target));\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"g\\\":\\n\\t\\t\\t\\tactionTimes.push(ns.getGrowTime(target));\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"w2\\\":\\n\\t\\t\\t\\tactionTimes.push(ns.getWeakenTime(target));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn actionTimes\\n}\\n\\nexport function updateTimes(ns, events, target, goalBatchEndTime) {\\n\\tlet eventTimes = getActionTimes(ns, target, events);\\n\\tfor (let i in events) {\\n\\t\\tevents[i].nDur = eventTimes[i];\\n\\t}\\n\\tlet maxDur = Math.ceil(Math.max.apply(Math, events.map(function (el) { return el.nDur })) + DRUM_TIME);\\n\\n\\tfor (let i in events) {\\n\\t\\tevents[i].nBEndTime = (Math.max(goalBatchEndTime, Date.now() + maxDur))\\n\\t\\tevents[i].nEnd = maxDur - (events.length - i) * DRUM_TIME;\\n\\t\\tevents[i].nStart = events[i].nEnd - events[i].nDur;\\n\\t\\tevents[i].nEndTime = Math.ceil(events[i].nBEndTime) - (events.length - i) * DRUM_TIME;\\n\\t\\tevents[i].nStartTime = Math.floor(events[i].nEndTime - events[i].nDur);\\n\\t\\tevents[i].nBEnd = maxDur;\\n\\t}\\n\\tns.print(\\\"batchSched\\\")\\n\\tfor (let j of events) {\\n\\t\\tns.print(j.nTarget, \\\" \\\", j.nBName, \\\" \\\", j.n, \\\" \\\", j.nStartTime, \\\" \\\", j.nStartTime + j.nDur, \\\" \\\", j.nEndTime)\\n\\t}\\n\\treturn events;\\n}\\n\\nexport function updateThreads(ns, events, target, scriptList = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\"]) {\\n\\tlet availThreads = Math.floor(hServers.getNetworkRamAvailable(ns, true) / getMaxScriptRam(ns, scriptList) * .95);\\n\\tlet hThreads = 0;\\n\\tlet hWThreads = 0;\\n\\tlet gThreads = 0;\\n\\tlet gWThreads = 0;\\n\\tlet gPerc = 1.05 * ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)\\n\\tif (hackableMoney(ns, target) > 0) {\\n\\t\\thThreads = getHackThreads(ns, target, hackableMoney(ns, target));\\n\\t\\t//       ns.print(\\\"% hacked with single thread on target: \\\" + ns.hackAnalyze(target) + \\\" \\\" + target);\\n\\t\\thWThreads = hThreads * .002 / .05 * 1.25;\\n\\t\\t//     ns.print(\\\"sec inc hack: \\\" + ns.hackAnalyzeSecurity(hThreads))\\n\\t\\tlet hackedAmount = ns.hackAnalyze(target) * ns.getServerMoneyAvailable(target) * hThreads;\\n\\t\\tgPerc = 1.05 * ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) - hackedAmount)\\n\\t\\tgThreads = getGrowThreads(ns, target, gPerc);\\n\\t\\t//   ns.print(\\\"sec inc grow: \\\" + ns.growthAnalyzeSecurity(gThreads))\\n\\t\\tgWThreads = gThreads * .004 / .05 * 1.25;\\n\\t\\t//   ns.print(\\\"weaken per thread: \\\" + ns.weakenAnalyze(1, 1));\\n\\t} else {\\n\\t\\thWThreads = secDecreaseRequired(ns, target) / .05;\\n\\t\\tif (ns.getServerMoneyAvailable(target) === 0) {\\n\\t\\t\\tgThreads = 1;\\n\\t\\t} else {\\n\\t\\t\\tgThreads = getGrowThreads(ns, target, gPerc);\\n\\t\\t}\\n\\t\\tgWThreads = gThreads * .004 / .05 * 1.25;\\n\\t}\\n\\tlet tThreads = hThreads + hWThreads + gThreads + gWThreads;\\n\\tlet threadSet = [Math.floor(hThreads), Math.ceil(hWThreads), Math.ceil(gThreads), Math.ceil(gWThreads)]\\n\\t//   ns.print(\\\"total batch threads: \\\" + tThreads);\\n\\t//   ns.print(\\\"network Threads Avail: \\\" + availThreads)\\n\\tif (tThreads > availThreads) {\\n\\t\\tlet hRatio = hThreads / tThreads;\\n\\t\\tlet hWRatio = hWThreads / tThreads;\\n\\t\\tlet gRatio = gThreads / tThreads;\\n\\t\\tlet gWRatio = gWThreads / tThreads;\\n\\t\\tthreadSet = [Math.floor(availThreads * hRatio), Math.ceil(availThreads * hWRatio), Math.ceil(availThreads * gRatio), Math.ceil(availThreads * gWRatio)]\\n\\t}\\n\\tlet eventThreadSet = getEventThreadSet(ns, threadSet, events);\\n\\tfor (let i in events) {\\n\\t\\t//   ns.print(events[i].n, \\\" \\\", events[i].nThreads, \\\" \\\", threadSet[i], \\\" \\\", Math.floor(events[i].nStart), \\\" \\\", Math.floor(events[i].nDur), \\\" \\\", Math.floor(events[i].nEnd));\\n\\t\\tevents[i].nThreads = eventThreadSet[i];\\n\\t}\\n\\treturn events;\\n}\\n\\nexport function getEventThreadSet(ns, threadSet, events) {\\n\\tlet actionThreadsList = [\\n\\t\\t{ action: \\\"h\\\", threads: threadSet[0] },\\n\\t\\t{ action: \\\"w1\\\", threads: threadSet[1] },\\n\\t\\t{ action: \\\"g\\\", threads: threadSet[2] },\\n\\t\\t{ action: \\\"w2\\\", threads: threadSet[3] },\\n\\t]\\n\\tlet actionThreads = [];\\n\\tlet actionList = actionThreadsList.map(function (el) { return el.action })\\n\\tfor (let i of events) {\\n\\t\\tactionThreads.push(actionThreadsList[actionList.indexOf(i.n)].threads);\\n\\t}\\n\\treturn actionThreads\\n}\\n\\nexport function getMaxScriptRam(ns, scriptList) {\\n\\tlet maxRam = 0;\\n\\tfor (let i of scriptList) {\\n\\t\\tlet sRam = ns.getScriptRam(i, \\\"home\\\");\\n\\t\\tif (sRam > maxRam) {\\n\\t\\t\\tmaxRam = sRam;\\n\\t\\t}\\n\\t}\\n\\treturn maxRam;\\n}\\n\\nexport async function launchScripts(ns, eventSchedule) {\\n\\tns.print(\\\"Launch Start\\\");\\n\\teventSchedule.sort((a, b) => a.nStartTime - b.nStartTime)\\n\\tlet prevTime = Date.now();\\n\\tlet maxDur = Math.max.apply(Math, eventSchedule.map(function (el) { return el.nDur })) + DRUM_TIME * 4;\\n\\tlet finalSleep = maxDur - eventSchedule[eventSchedule.length - 1].nEnd + DRUM_TIME;\\n\\tfor (let i = 0; i < eventSchedule.length; i++) {\\n\\t\\t//       ns.print(eventSchedule[i]);\\n\\t\\tlet target = eventSchedule[i].nTarget;\\n\\t\\tlet hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(eventSchedule[i].nScript, \\\"home\\\"));\\n\\t\\tif (eventSchedule.nScript === \\\"bp3_hack.js\\\" && (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) / 2)) {\\n\\t\\t\\tlet sleepTime = 0;\\n\\t\\t\\tif (i === 0) {\\n\\t\\t\\t\\tsleepTime = eventSchedule[i].nStart;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsleepTime = eventSchedule[i].nStart - eventSchedule[i - 1].nStart;\\n\\t\\t\\t}\\n\\t\\t\\tns.print(\\\"sleeping for \\\" + sleepTime);\\n\\t\\t\\tawait ns.sleep(sleepTime)\\n\\t\\t\\t//       printServerStatus(ns, target);\\n\\t\\t} else {\\n\\t\\t\\tlet sleepTime = 0;\\n\\t\\t\\tif (i === 0) {\\n\\t\\t\\t\\tsleepTime = eventSchedule[i].nStart;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsleepTime = eventSchedule[i].nStart - eventSchedule[i - 1].nStart;\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tns.print(\\\"sleeping for \\\" + sleepTime);\\n\\t\\t\\tawait ns.sleep(sleepTime)\\n\\t\\t\\tns.print(\\\"Distributing: \\\" + eventSchedule[i].n, \\\" \\\", eventSchedule[i].nThreads, \\\" \\\", Math.floor(eventSchedule[i].nStart), \\\" \\\", Math.floor(eventSchedule[i].nDur), \\\" \\\", Math.floor(eventSchedule[i].nEnd));\\n\\t\\t\\tdistributeThreads(ns, eventSchedule[i].nScript, hostServers, eventSchedule[i].nThreads, target, eventSchedule[i].n, eventSchedule[i].nBName, eventSchedule[i].nEndTime)\\n\\t\\t\\tlet currentTime = Date.now();\\n\\t\\t\\tlet elapsedTime = currentTime - prevTime;\\n\\t\\t\\tns.print(elapsedTime);\\n\\t\\t\\tns.print(\\\"secDif \\\" + (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)));\\n\\t\\t\\tprevTime = currentTime;\\n\\t\\t\\t//     printServerStatus(ns, target);\\n\\t\\t}\\n\\t}\\n\\tns.print(\\\"sleeping for \\\" + finalSleep);\\n\\tawait ns.sleep(finalSleep);\\n}\\n\\nexport function getLaunchPeriodEvents(ns, eventSchedule, periodLength) {\\n\\tlet periodEvents = [];\\n\\tperiodEvents = eventSchedule.filter(el => el.nStartTime < Date.now() + periodLength)\\n\\teventSchedule = eventSchedule.filter(el2 => el2.nStartTime >= Date.now() + periodLength)\\n\\tperiodEvents.sort((a, b) => a.nStartTime - b.nStartTime);\\n\\tns.print(\\\"======\\\")\\n\\tns.print(\\\"Period events\\\")\\n\\tns.print(\\\"Target batchname action estStartTime\\\")\\n\\n\\tns.print(\\\"end period events\\\")\\n\\tns.print(\\\"======\\\")\\n\\treturn [periodEvents, eventSchedule]\\n}\\n\\nexport async function launchPeriodEvents(ns, periodEventSchedule, periodLength, runningBatches,hNet = false) {\\n\\n\\tns.print(\\\"Period length \\\" + periodLength)\\n\\tperiodEventSchedule.sort((a, b) => a.nStartTime - b.nStartTime)\\n\\tfor (let i = 0; i < periodEventSchedule.length; i++) {\\n\\t\\tlet target = periodEventSchedule[i].nTarget;\\n\\t\\tlet batchName = periodEventSchedule[i].nBatchName;\\n\\t\\tlet hostServers = hServers.getAvailableHostServers(ns, true, ns.getScriptRam(periodEventSchedule[i].nScript, \\\"home\\\"),hNet);\\n\\t\\t//     ns.print(\\\"Distributing: \\\" + periodEventSchedule[i].n, \\\" \\\", periodEventSchedule[i].nThreads, \\\" \\\", Math.floor(periodEventSchedule[i].nStart), \\\" \\\", Math.floor(periodEventSchedule[i].nDur), \\\" \\\", Math.floor(periodEventSchedule[i].nEnd));\\n\\n\\t\\tif (periodEventSchedule[i].nScript === \\\"bp3_hack.js\\\" && (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) / 2)) {\\n\\t\\t} else {\\n\\t\\t\\t/*\\tif (periodEventSchedule[i].nTarget === \\\"n00dles\\\") {\\n\\t\\t\\t\\t\\tns.print(Date.now())\\n\\t\\t\\t\\t\\tns.print(periodEventSchedule[i].nTarget, \\\" \\\", periodEventSchedule[i].nBName, \\\" \\\", periodEventSchedule[i].n, \\\" \\\", periodEventSchedule[i].nStartTime)\\n\\t\\t\\t\\t\\tns.print(periodEventSchedule[i].nTarget, \\\" \\\", periodEventSchedule[i].nBName, \\\" \\\", periodEventSchedule[i].n, \\\" \\\", periodEventSchedule[i].nEndTime)\\n\\t\\t\\t\\t}*/\\n\\t\\t\\tdistributeThreads(ns, periodEventSchedule[i].nScript, hostServers, periodEventSchedule[i].nThreads, target, periodEventSchedule[i].n, periodEventSchedule[i].nBName, periodEventSchedule[i].nEndTime)\\n\\t\\t}\\n\\t\\tif (periodEventSchedule[i].nAction === \\\"w2\\\") {\\n\\t\\t\\trunningBatches.splice(runningBatches.find(el => (el.target === target && el.batchName === batchName)), 1)\\n\\t\\t}\\n\\t\\t/*\\tlet sleepTime = 0;\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tsleepTime = periodEventSchedule[i].nStart - periodEventSchedule[i - 1].nStart;\\n\\t\\t\\t}\\n\\t\\t\\tif (sleepTime > 0) {\\n\\t\\t\\t\\tif (periodEventSchedule[i].nTarget === \\\"n00dles\\\") {\\n\\t\\t\\t\\t\\tns.print(\\\"SleepTime til next event \\\" + sleepTime)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tawait ns.sleep(sleepTime);\\n\\t\\t\\t}*/\\n\\t}\\n\\t/*let endSleep = Date.now() - now + periodLength;\\n\\tif (endSleep > 0)\\n\\t\\tawait ns.sleep(endSleep)*/\\n\\tawait ns.sleep(DRUM_TIME)\\n\\treturn runningBatches;\\n}\\n\\nexport function batchInEventSchedule(ns, eventSchedule) {\\n\\tlet runningBatches = [];\\n\\tfor (let i of eventSchedule) {\\n\\t\\tif (!runningBatches.includes([i.nTarget, i.nBatchName])) {\\n\\t\\t\\trunningBatches.push[i.nTarget, i.nBatchName]\\n\\t\\t}\\n\\t}\\n\\treturn runningBatches;\\n}\\n\\nexport function batchQueueStatus(ns, queue) {\\n\\tlet targetList = []\\n\\tfor (let i of queue) {\\n\\t\\tif (targetList.indexOf(i.nTarget < 0)) {\\n\\t\\t\\ttargetList.push(i.nTarget);\\n\\t\\t}\\n\\t}\\n\\tfor (let j of targetList) {\\n\\t\\tfor (let k of queue) {\\n\\t\\t\\tif (k.nTarget === j) {\\n\\t\\t\\t\\ttargetList.push({\\n\\t\\t\\t\\t\\ttarget: k.nTarget,\\n\\t\\t\\t\\t\\tbatches: []\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\tif (batches.indexOf(k.nBatchName < 0)) {\\n\\t\\t\\t\\t\\ttargetList.target.batches.push(k)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//target, batch1: actions, batch2:actions, etc.\\n}\\n\\nexport function printServerStatus(ns, target) {\\n\\tns.print(target)\\n\\tns.print(\\\"secDif \\\" + (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)));\\n\\tns.print(\\\"money perc in dec \\\" + ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target));\\n}\\n\\nexport const EVENT_LIST = [{ action: \\\"h\\\", script: \\\"bp3_hack.js\\\" }, { action: \\\"w1\\\", script: \\\"bp3_weaken.js\\\" }, { action: \\\"g\\\", script: \\\"bp3_grow.js\\\" }, { action: \\\"w2\\\", script: \\\"bp3_weaken.js\\\" }]\\nexport const DRUM_TIME = 1000;\\n\\nexport async function main(ns) {\\n\\tns.tail();\\n\\t//\\tdistributeThreads(ns, \\\"bp3_grow.js\\\", [\\\"n00dles\\\", \\\"harakiri-sushi\\\"], 10, \\\"n00dles\\\");\\n\\tns.print(getMaxThreads(ns, \\\"n00dles\\\", \\\"bp3_grow.js\\\", \\\"n00dles\\\"));\\n}\",\"filename\":\"bp3_helpers_hacking.js\",\"server\":\"home\"}}],[\"bp3_hacking_simple.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction minSec(ns, target) {\\n\\tif (ns.getServerSecurityLevel(target) <= ns.getServerMinSecurityLevel(target) * 1.05) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction hackableMoney(ns, target) {\\n\\tlet avail = ns.getServerMoneyAvailable(target);\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) / 2;\\n\\treturn avail - moneyThresh;\\n}\\n\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tif(ns.hasRootAccess(target)) {\\n\\twhile (true) {\\n\\t\\tif (minSec(ns, target) === false) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else {\\n\\t\\t\\tif (hackableMoney(ns, target) > 0) {\\n\\t\\t\\t\\tawait ns.hack(target);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n\\t}\\n}\",\"filename\":\"bp3_hacking_simple.js\",\"server\":\"home\"}}],[\"bp3_helpers_servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function networkScan(ns) {\\n\\tlet scannable = [\\\"home\\\"];\\n\\tlet scanned = [];\\n\\tlet scanLen = scannable.length;\\n\\twhile (scanLen > 0) {\\n\\t\\tlet scanMe = scannable.pop();\\n\\t\\tlet newScan = ns.scan(scanMe);\\n\\t\\tscanned.push(scanMe);\\n\\t\\tfor (let j of newScan) {\\n\\t\\t\\tif (scanned.indexOf(j) < 0) {\\n\\t\\t\\t\\tscannable.push(j);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tscanLen = scannable.length;\\n\\t}\\n\\treturn scanned;\\n}\\n\\nexport function startFindPath(ns,target) {\\n\\tlet startServer = ns.getHostname();\\n\\tif (target === undefined) {\\n\\t\\tns.alert('Please provide target server');\\n\\t\\treturn;\\n\\t}\\n\\tlet [results, isFound] = findPath(ns, target, startServer, [], [], false);\\n\\tif (!isFound) {\\n\\t\\tns.alert('Server not found!');\\n\\t} else {\\n\\t\\tns.tprint(results.join('; connect '));\\n\\t}\\n\\treturn results;\\n}\\n\\nexport const findPath = (ns, target, serverName, serverList, ignore, isFound) => {\\n\\tignore.push(serverName);\\n\\tlet scanResults = ns.scan(serverName);\\n\\tfor (let server of scanResults) {\\n\\t\\tif (ignore.includes(server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (server === target) {\\n\\t\\t\\tserverList.push(server);\\n\\t\\t\\treturn [serverList, true];\\n\\t\\t}\\n\\t\\tserverList.push(server);\\n\\t\\t[serverList, isFound] = findPath(ns, target, server, serverList, ignore, isFound);\\n\\t\\tif (isFound) {\\n\\t\\t\\treturn [serverList, isFound];\\n\\t\\t}\\n\\t\\tserverList.pop();\\n\\t}\\n\\treturn [serverList, false];\\n}\\n\\nexport function connectToServer(ns,target) {\\n\\t\\tlet startServer = ns.getHostname();\\n\\tif (target === undefined) {\\n\\t\\tns.alert('Please provide target server');\\n\\t\\treturn;\\n\\t}\\n\\tlet [results, isFound] = findPath(ns, target, startServer, [], [], false);\\n\\tif (!isFound) {\\n\\t\\tns.alert('Server not found!');\\n\\t} else {\\n\\t\\tns.print(results);\\n\\t}\\n\\n\\tfor(let i of results) {\\n\\t\\tns.singularity.connect(i);\\n\\t}\\n\\treturn results;\\n}\\n\\nexport function getTargetScore(ns, target) {\\n\\t//money per second per thread\\n\\tlet moneyPerThread = ns.hackAnalyze(target);\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet runTime = wTime * 2 + gTime + hTime;\\n\\tlet score = moneyPerThread / runTime * 1e10;\\n\\treturn score;\\n}\\n\\n\\nexport function getTargetList(ns) {\\n\\tlet fullList = networkScan(ns);\\n\\tlet canHasMoney = fullList.filter(el => ns.getServerMaxMoney(el) > 10000);\\n\\tcanHasMoney.sort((a, b) => getTargetScore(ns, b) - getTargetScore(ns, a));\\n\\treturn canHasMoney;\\n}\\n\\nexport function getServerFreeRam(ns, target) {\\n\\treturn ns.getServerMaxRam(target) - ns.getServerUsedRam(target);\\n}\\n\\nexport function getAvailableHostServers(ns, includeHome = true, minRam = 0, includeHacknet = false) {\\n\\tlet fullList = networkScan(ns);\\n\\tlet nuked = fullList.filter(el => ns.hasRootAccess(el));\\n\\tlet freeRamServers = nuked.filter(el => getServerFreeRam(ns, el) > minRam);\\n\\tfreeRamServers=freeRamServers.filter(el=> ns.ls(el,\\\"bp3_doNotUse.js\\\").length <1)\\n\\t\\n\\tif(includeHacknet) {\\n\\tfreeRamServers=freeRamServers.filter(el=> !el.includes(\\\"hacknet\\\"));\\n\\t}\\n\\t\\n\\tif(getServerFreeRam(ns,\\\"home\\\")>minRam && freeRamServers.indexOf(\\\"home\\\")<0) {\\n\\t\\tfreeRamServers.push(\\\"home\\\")\\n\\t}\\n\\treturn freeRamServers;\\n}\\n\\nexport function getNetworkRamAvailable(ns, includeHome = true) {\\n\\tlet fullList = networkScan(ns);\\n\\tlet nuked = fullList.filter(el => ns.hasRootAccess(el));\\n\\tlet totalRam = 0;\\n\\tfor (let i of nuked) {\\n\\t\\ttotalRam = totalRam + getServerFreeRam(ns, i);\\n\\t}\\n\\tif (includeHome === false) {\\n\\t\\ttotalRam = totalRam - getServerFreeRam(ns, \\\"home\\\");\\n\\t}\\n\\treturn totalRam;\\n}\\n\\nexport function getNetworkRamTotal(ns) {\\n\\tlet fullList = networkScan(ns);\\n\\tlet nuked = fullList.filter(el => ns.hasRootAccess(el));\\n\\tlet totalRam = 0;\\n\\tfor (let i of nuked) {\\n\\t\\tif (i !== \\\"home\\\") {\\n\\t\\t\\ttotalRam = totalRam + ns.getServerMaxRam(i);\\n\\t\\t}\\n\\t}\\n\\treturn totalRam;\\n}\\n\\nexport function getRootAccess(ns, target) {\\n\\tif (ns.hasRootAccess(target) === false) {\\n\\t\\tlet exes = ns.ls(\\\"home\\\", \\\".exe\\\");\\n\\t\\tif (exes.indexOf(\\\"BruteSSH.exe\\\") > -1) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t}\\n\\t\\tif (exes.indexOf(\\\"FTPCrack.exe\\\") > -1) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t}\\n\\t\\tif (exes.indexOf(\\\"relaySMTP.exe\\\") > -1) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t}\\n\\t\\tif (exes.indexOf(\\\"HTTPWorm.exe\\\") > -1) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t}\\n\\t\\tif (exes.indexOf(\\\"SQLInject.exe\\\") > -1) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t}\\n\\t\\tlet serv = ns.getServer(target);\\n\\t\\tif (serv.numOpenPortsRequired <= serv.openPortCount) {\\n\\t\\t\\tif (ns.nuke(target)) {\\n\\t\\t\\t\\tns.tprint(target + \\\" rooted\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function rootAll(ns) {\\n\\tlet list = networkScan(ns);\\n\\tfor (let i of list) {\\n\\t\\tgetRootAccess(ns, i);\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n}\",\"filename\":\"bp3_helpers_servers.js\",\"server\":\"home\"}}],[\"bp3_helpers_scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function getMaxThreads(ns,hostServer,script,scriptHost) {\\n\\tns.print(\\\"getMaxThreads: \\\"+hostServer)\\n\\tlet maxRam = ns.getServerMaxRam(ns,hostServer);\\n\\tlet scriptRam = ns.getScriptRam(script,scriptHost);\\n\\tlet maxThreads = Math.floor(maxRam / scriptRam);\\n\\treturn maxThreads;\\n}\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_helpers_scripts.js\",\"server\":\"home\"}}],[\"bp3_hacking_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\"\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hPorts from \\\"bp3_helpers_ports.js\\\"\\n\\n/*\\nloop forever {\\n    if security is not minimum {\\n        determine how many threads we need to lower security to the minimum\\n        find available ram for those threads\\n        copy the weaken script to the server(s) with RAM\\n        launch the weaken script(s)\\n        sleep until weaken is finished\\n    } else if money is not maximum {\\n        do the same thing, but with the grow script\\n    } else {\\n        do the same thing, but with the hack script\\n    }\\n}\\n*/\\n\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    ns.disableLog(\\\"getServerMaxRam\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    hServers.getRootAccess(ns, target);\\n    if (ns.hasRootAccess(target) === true) {\\n        while (true) {\\n            // if security is not minimum {\\n            if (hHacking.minSec(ns, target) === false) {\\n                //     determine how many threads we need to lower security to the minimum\\n                let weakenThreads = hHacking.getWeakenThreads(ns, target);\\n\\n                //     find available ram for those threads\\n                let hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n                //     copy the weaken script to the server(s) with RAM\\n                await hHacking.scpHackingScripts(ns, hostServers)\\n                //     launch the weaken script(s)\\n                hHacking.distributeThreads(ns, \\\"bp3_weaken.js\\\", hostServers, weakenThreads, target);\\n                //     sleep until weaken is finished\\n                let wTime = ns.getWeakenTime(target);\\n                hPorts.writeHackDataToPort(ns, 1, target, \\\"weaken\\\", weakenThreads, wTime);\\n                await ns.sleep(wTime + 500);\\n            } else {\\n                if (hHacking.maxMoney(ns, target) === false) {\\n                    // } else if money is not maximum {\\n                    //     do the same thing, but with the grow script\\n                    let growThreads = hHacking.getGrowThreads(ns, target, hHacking.getMaxGrowthPercent(ns, target));\\n                    //     find available ram for those threads\\n                    let hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(\\\"bp3_grow.js\\\", \\\"home\\\"));\\n                    //     copy the weaken script to the server(s) with RAM\\n                    await hHacking.scpHackingScripts(ns, hostServers)\\n                    //     launch the weaken script(s)\\n                    hHacking.distributeThreads(ns, \\\"bp3_grow.js\\\", hostServers, growThreads, target);\\n                    let gTime = ns.getGrowTime(target);\\n                    hPorts.writeHackDataToPort(ns, 1, target, \\\"grow\\\", growThreads, gTime);\\n                    //     sleep until weaken is finished\\n                    await ns.sleep(gTime + 500);\\n                } else {\\n                    //} else {\\n                    //  do the same thing, but with the hack script\\n                    //     determine how many threads we need to lower security to the minimum\\n                    let hackThreads = hHacking.getHackThreads(ns, target, hHacking.hackableMoney(ns, target));\\n\\n                    //     find available ram for those threads\\n                    let hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(\\\"bp3_hack.js\\\", \\\"home\\\"));\\n                    //     copy the weaken script to the server(s) with RAM\\n                    await hHacking.scpHackingScripts(ns, hostServers)\\n                    //     launch the weaken script(s)\\n                    hHacking.distributeThreads(ns, \\\"bp3_hack.js\\\", hostServers, hackThreads, target);\\n                    let hTime = ns.getHackTime(target)\\n                    hPorts.writeHackDataToPort(ns, 1, target, \\\"hack\\\", hackThreads, hTime);\\n\\n                    //     sleep until weaken is finished\\n                    await ns.sleep(hTime + 500);\\n                    //}\\n                }\\n            }\\n            await ns.sleep(1000);\\n        }\\n    }\\n}\",\"filename\":\"bp3_hacking_manager.js\",\"server\":\"home\"}}],[\"bp3_monitors_server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hMonitors from \\\"bp3_helpers_monitors.js\\\"\\n\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tns.tail();\\n\\twhile (true) {\\n\\n\\t\\thMonitors.hackTargetInfo(ns, target);\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_monitors_server.js\",\"server\":\"home\"}}],[\"bp3_hacking_rootAll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\n\\nexport async function main(ns) {\\nhServers.rootAll(ns);\\n}\",\"filename\":\"bp3_hacking_rootAll.js\",\"server\":\"home\"}}],[\"bp3_pservers_purchase.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hPservers from \\\"bp3_helpers_pservers.js\\\";\\n\\nexport async function main(ns) {\\n\\tlet ram = ns.args[0];\\n\\tif (ram = \\\"max\\\") {\\n\\t\\tram = hPservers.maxAffordable(ns, ns.getServerMoneyAvailable(\\\"home\\\"));\\n\\t}\\n\\tlet noServs = ns.args[1];\\n\\tfor (let i = 0; i < noServs; i++) {\\n\\t\\tif (hPservers.pserverSlotAvailableCheck(ns) === false) {\\n\\t\\t\\thPservers.deleteSmallestServer(ns);\\n\\t\\t}\\n\\t\\tns.tprint(ns.purchaseServer(\\\"pServ\\\" + ram, ram))\\n\\t}\\n\\n\\tns.print(hPservers.maxAffordable(ns, ns.getServerMoneyAvailable(\\\"home\\\")))\\n}\",\"filename\":\"bp3_pservers_purchase.js\",\"server\":\"home\"}}],[\"bp3_monitors_hackTargets.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\";\\nimport * as hMonitors from \\\"bp3_helpers_monitors.js\\\";\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\";\\n\\n\\n\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tns.tail();\\n\\tlet netFreeRam = Math.floor(hServers.getNetworkRamAvailable(ns, false))\\n\\tlet netMaxRam = Math.floor(hServers.getNetworkRamTotal(ns, false))\\n\\twhile (true) {\\n\\t\\tnetFreeRam = Math.floor(hServers.getNetworkRamAvailable(ns, false))\\n\\t\\tnetMaxRam = Math.floor(hServers.getNetworkRamTotal(ns, false))\\n\\n\\n\\t\\tns.print(\\\"Network Ram (Free / Total): \\\" + netFreeRam + \\\" \\\" + netMaxRam + \\\" \\\" + ns.formatPercent(netFreeRam / netMaxRam, 1));\\n\\t\\t//\\t\\tlet runningManagers = hHacking.getRunningManagers(ns,\\\"bp3_hacking_manager.js\\\");\\n\\t\\t//\\t\\tlet runningBatches = hHacking.getRunningManagers(ns,\\\"bp3_hacking_batch.js\\\");\\n\\t\\t//\\t\\tlet runningMonitors = runningManagers\\n\\t\\t//\\t\\tfor(let k of runningBatches) {\\n\\t\\t//\\t\\t\\tif(runningMonitors.indexOf(k) <0) {\\n\\t\\t//\\t\\t\\t\\trunningMonitors.push(k);\\n\\t\\t//\\t\\t\\t}\\n\\t\\t//\\t\\t}\\n\\t\\tlet runningMonitors = hServers.getTargetList(ns);\\n\\t\\trunningMonitors = runningMonitors.filter(el => ns.getWeakenTime(el) < 3600 / 4 * 1000);\\n\\t\\trunningMonitors.sort((a, b) => hServers.getTargetScore(ns, b) - hServers.getTargetScore(ns, a));\\n\\t\\tns.print(\\\"target money (%) secLvl (+) weakenTime batchThreads batches actions\\\");\\n\\n\\t\\tfor (let k=0;k<10;k++) {\\n\\t\\tlet\\ti = runningMonitors[k]\\n\\t\\t\\tlet j = hMonitors.hackTargetInfo(ns, i)\\n\\t\\t\\t//if (Number(j.sMoneyPerc) > 0.4) {\\n\\t\\t\\t\\tns.print(hMonitors.buffer(i, runningMonitors) + j.sName + \\\" \\\" + j.sMoney + \\\" \\\" + j.sMoneyPerc + \\\" \\\" + j.sSec + \\\" \\\" + \\\"(+\\\" + j.sSecPlus + \\\")\\\" + \\\" \\\" + j.sWeakenTime + \\\" \\\" + j.sBatchThreads + \\\" \\\" + j.sMgrs + \\\" \\\" + j.sActions);\\n\\t\\t\\t//}\\n\\t\\t}\\n\\t\\tawait ns.sleep(500);\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_monitors_hackTargets.js\",\"server\":\"home\"}}],[\"bp3_helpers_monitors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\";\\nimport { TextTransforms } from \\\"gx_textTransforms.js\\\"\\n\\nfunction getRunningBatchActions(ns, target) {\\n\\tlet actions = [\\\"h\\\", \\\"w1\\\", \\\"g\\\", \\\"w2\\\"];\\n\\tlet scripts = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"]\\n\\n\\tlet allRunningScripts = getAllRunningScripts(ns);\\n\\tlet runningActions = [];\\n\\tfor (let i of allRunningScripts) {\\n\\t\\tif (i.args[0] === target) {\\n\\t\\t\\tfor (let j in actions) {\\n\\t\\t\\t\\tif (i.args.indexOf(actions[j]) > 0 && runningActions.indexOf(actions[j]) < 0) {\\n\\t\\t\\t\\t\\trunningActions.push(actions[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn runningActions;\\n}\\n\\nexport function getRunningManagers(ns, script = \\\"bp3_hacking_manager.js\\\") {\\n\\tlet allRunningScripts = getAllRunningScripts(ns);\\n\\tlet runningManagers = [];\\n\\tfor (let i of allRunningScripts) {\\n\\t\\tif (i.filename === script)\\n\\t\\t\\trunningManagers.push(i.args[0]);\\n\\t}\\n\\treturn runningManagers;\\n}\\n\\nexport function buffer(element, list) {\\n\\tlet maxLen = element.length;\\n\\tlet buffer = \\\"\\\"\\n\\tfor (let i of list) {\\n\\t\\tif (i.length > maxLen) {\\n\\t\\t\\tmaxLen = i.length;\\n\\t\\t}\\n\\t}\\n\\tbuffer = buffer + ' '.repeat(maxLen - element.length)\\n\\treturn buffer;\\n}\\n\\nexport function hackTargetInfo(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet money = ns.formatNumber(serv.moneyAvailable, \\\"0.00a\\\")\\n\\tlet moneyPerc = serv.moneyAvailable / serv.moneyMax;\\n\\tif (moneyPerc < .5) {\\n\\t\\tmoneyPerc = TextTransforms.apply(ns.formatPercent(moneyPerc, \\\"0.00%\\\"), [TextTransforms.Color.BrightRed]);\\n\\t} else {\\n\\t\\tif (moneyPerc < .95) {\\n\\t\\t\\tmoneyPerc = TextTransforms.apply(ns.formatPercent(moneyPerc, \\\"0.00%\\\"), [TextTransforms.Color.Yellow]);\\n\\t\\t} else {\\n\\t\\t\\tmoneyPerc = ns.formatPercent(moneyPerc, \\\"0.00%\\\")\\n\\t\\t}\\n\\t}\\n\\t//ns.print(TextTransforms.apply('Hello World',[TextTransforms.Highlight.Red,TextTransforms.Color.White,TextTransforms.Transform.Underline]));\\n\\n\\n\\tlet sec = ns.formatNumber(serv.hackDifficulty, \\\"0.00a\\\");\\n\\tlet secPlus = ns.formatNumber((serv.hackDifficulty - serv.minDifficulty), \\\"0.00a\\\");\\n\\tlet wTime = ns.formatNumber(ns.getWeakenTime(target) / 1000, \\\"0.0\\\");\\n\\tlet bThreads = ns.formatNumber(hHacking.getMaxBatchThreads(ns, target)[0], \\\"0.00a\\\");\\n\\tlet runningActions = getRunningBatchActions(ns, target);\\n\\tlet servInfo = {\\n\\t\\tsName: target,\\n\\t\\tsMoney: money,\\n\\t\\tsMoneyPerc: moneyPerc,\\n\\t\\tsSec: sec,\\n\\t\\tsSecPlus: secPlus,\\n\\t\\tsWeakenTime: wTime,\\n\\t\\tsBatchThreads: bThreads,\\n\\t\\tsMgrs: [],\\n\\t\\tsActions: runningActions\\n\\t};\\n\\tlet allRunningScripts = getAllRunningScripts(ns);\\n\\tlet batchNames = [\\\"a\\\", \\\"b\\\", \\\"c\\\",\\\"d\\\",\\\"e\\\",\\\"f\\\",\\\"g\\\",\\\"h\\\",\\\"i\\\", \\\"prep\\\"];\\n\\tfor (let i of allRunningScripts) {\\n\\t\\tfor (let j of batchNames) {\\n\\t\\t\\t\\tif (i.filename === \\\"bp3_hacking_batch.js\\\" && i.args[0] === target && i.args[1]===j && servInfo.sMgrs.indexOf(j)<0 ) {\\n\\t\\t\\t\\n\\t\\t\\t\\tservInfo.sMgrs.push(j)\\n\\t\\t\\t}\\n\\t\\t\\tif (i.filename === \\\"bp3_hacking_prepBatch.js\\\" && i.args[0] === target && i.args[1]===j&& servInfo.sMgrs.indexOf(j)<0 ) {\\n\\t\\t\\t\\n\\t\\t\\t\\tservInfo.sMgrs.push(j)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t//\\tns.print(\\\"sMgrs check\\\",i.args[0],servInfo.sMgrs)\\n\\t}\\n\\t\\n\\treturn servInfo;\\n}\\n\\nexport function getAllRunningScripts(ns) {\\n\\tlet network = hServers.networkScan(ns);\\n\\tlet allRunningScripts = [];\\n\\tfor (let i of network) {\\n\\t\\tlet scripts = ns.ps(i);\\n\\t\\tfor (let j of scripts) {\\n\\t\\t\\tlet script = j;\\n\\t\\t\\tscript[\\\"host\\\"] = i;\\n\\t\\t\\tallRunningScripts.push(j)\\n\\t\\t}\\n\\t}\\n\\treturn allRunningScripts;\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('scan');\\n\\tlet target = \\\"n00dles\\\"\\n\\tns.tail();\\n\\twhile (true) {\\n\\n\\t\\tns.print(getRunningBatchActions(ns, target))\\n\\t\\tawait ns.sleep(2000)\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_helpers_monitors.js\",\"server\":\"home\"}}],[\"bp3_hacking_managerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hMonitors from \\\"bp3_helpers_monitors.js\\\";\\nimport * as hPservers from \\\"bp3_helpers_pservers.js\\\";\\n\\nfunction getMaxScriptRam(ns, scriptList) {\\n\\tlet maxRam = 0;\\n\\tfor (let i of scriptList) {\\n\\t\\tlet sRam = ns.getScriptRam(i, \\\"home\\\");\\n\\t\\tif (sRam > maxRam) {\\n\\t\\t\\tmaxRam = sRam;\\n\\t\\t}\\n\\t}\\n\\treturn maxRam;\\n}\\n\\nfunction getMaxManagedThreads(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n\\tlet secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n\\tlet wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1));\\n\\tlet gThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n\\tlet wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1));\\n\\treturn Math.max(hThreads, gThreads, wThreadsHack, wThreadsGrow);\\n}\\n\\nfunction getAvailableBatchRam(ns, totalRam, runningList, scriptList) {\\n\\tfor (let i of runningList) {\\n\\t\\ttotalRam = totalRam - getMaxManagedThreads(ns, i) * getMaxScriptRam(ns, scriptList);\\n\\t}\\n\\treturn totalRam;\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMaxMoney');\\n\\tns.disableLog('getServerMaxRam');\\n\\tns.disableLog('scan');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet hackScripts = [\\\"bp3_hack.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"];\\n\\n\\twhile (true) {\\n\\t\\t//root all\\n\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\t//get network max ram (not home);\\n\\t\\tlet networkTotalRam = hServers.getNetworkRamTotal(ns);\\n\\t\\t//get running managers\\n\\t\\tlet runningManagers = hMonitors.getRunningManagers(ns);\\n\\t\\t//get target list, sort by score\\n\\t\\tlet targetList = hServers.targetList(ns);\\n\\t\\ttargetList.sort((a, b) => getMaxManagedThreads(ns, a) - getMaxManagedThreads(ns, b));\\n\\t\\tlet newTargetList = targetList.filter(el => runningManagers.indexOf(el) < 0)\\n\\t\\tnewTargetList = newTargetList.filter(el=> ns.getWeakenTime(el) < (60*2*1000));\\n\\t\\t//determine if we can run another one on available space\\n\\t\\tlet availableBatchRam = getAvailableBatchRam(ns, networkTotalRam, runningManagers, hackScripts);\\n\\t\\tfor (let i of newTargetList) {\\n\\t\\t\\tlet managerRam = getMaxManagedThreads(ns, i) * getMaxScriptRam(ns, hackScripts)\\n\\t\\t\\tif (managerRam < availableBatchRam) {\\n\\t\\t\\t\\tif (ns.exec(\\\"bp3_hacking_manager.js\\\", \\\"home\\\", 1, i)) {\\n\\t\\t\\t\\t\\tavailableBatchRam = availableBatchRam - managerRam;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t//is there space for a new purchased server?\\n\\t\\t\\t\\tif (hPservers.pserverSlotAvailableCheck(ns) === false) {\\n\\t\\t\\t\\t\\thPservers.deleteSmallestServer(ns);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (hPservers.pserverSlotAvailableCheck(ns)) {\\n\\t\\t\\t\\t\\tlet serverSize = hPservers.serverSizer(ns, managerRam);\\n\\t\\t\\t\\t\\tlet affordable = hPservers.maxAffordable(ns, ns.getServerMoneyAvailable(\\\"home\\\"));\\n\\t\\t\\t\\t\\tserverSize = Math.max(serverSize, affordable);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif (ns.getPurchasedServerCost(serverSize) < ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\t\\t\\t\\tns.tprint(ns.purchaseServer(\\\"pserv\\\" + serverSize, serverSize))\\n\\t\\t\\t\\t\\t\\tif (ns.exec(\\\"bp3_hacking_manager.js\\\", \\\"home\\\", 1, i)) {\\n\\t\\t\\t\\t\\t\\t\\tavailableBatchRam = availableBatchRam - managerRam;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\t//can we afford a new purchased server?\\n\\t\\t//spin up another one?\\n\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n}\",\"filename\":\"bp3_hacking_managerManager.js\",\"server\":\"home\"}}],[\"bp3_helpers_pservers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function maxAffordable(ns, money) {\\n\\tfor (let i = ns.getPurchasedServerMaxRam(); i > 4; i = i / 2) {\\n\\t\\tif (ns.getPurchasedServerCost(i) < money) {\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function pserverSlotAvailableCheck(ns) {\\n\\tlet pservers = ns.getPurchasedServers();\\n\\tif (ns.getPurchasedServerLimit() === pservers.length) {\\n\\t\\tns.print(\\\"pServer slots full\\\")\\n\\t\\treturn false;\\n\\t}\\n\\treturn true;\\n}\\n\\nexport function serverSizer(ns, ramRequirement) {\\n\\tfor (let i = 4; i <= ns.getPurchasedServerMaxRam(); i = i * 2) {\\n\\t\\tif (i > ramRequirement) {\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function getSmallestServers(ns) {\\n\\tlet pServers = ns.getPurchasedServers();\\n\\tpServers.sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\n\\tlet smallestRam = ns.getServerMaxRam(pServers[0]);\\n\\tlet smallestServers = pServers.filter(el => ns.getServerMaxRam(el) === smallestRam);\\n\\treturn smallestServers;\\n}\\n\\nexport async function deleteSmallestServer(ns) {\\n\\tlet sList = getSmallestServers(ns);\\n\\tif (sList.length > 0) {\\n\\t\\tlet free = sList.filter(el => ns.getServerUsedRam(el) === 0);\\n\\t\\tif (free.length === 0) {\\n\\t\\t\\tawait ns.scp(\\\"bp3_doNotUse.js\\\", sList[0])\\n\\t\\t} else {\\n\\t\\t\\tif (maxAffordable(ns, ns.getServerMoneyAvailable(\\\"home\\\")) > ns.getServerMaxRam(free[0])) {\\n\\t\\t\\t\\tns.deleteServer(free[0]);\\n\\t\\t\\t\\tns.tprint(\\\"deleted pserver \\\" + free[0])\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function getPServer(ns, ramReq) {\\n\\tif (pserverSlotAvailableCheck(ns) === false) {\\n\\tawait\\tdeleteSmallestServer(ns);\\n\\t}\\n\\tif (pserverSlotAvailableCheck(ns)) {\\n\\t\\tlet serverSize = serverSizer(ns, ramReq);\\n\\t\\tlet affordable = maxAffordable(ns, ns.getServerMoneyAvailable(\\\"home\\\"));\\n\\t\\tserverSize = Math.max(serverSize, affordable);\\n\\n\\t\\tif (ns.getPurchasedServerCost(serverSize) < ns.getServerMoneyAvailable(\\\"home\\\") && pserverSlotAvailableCheck(ns)) {\\n\\t\\t\\tns.tprint(ns.purchaseServer(\\\"pServ\\\" + serverSize, serverSize), \\\"spent \\\" + ns.formatNumber(ns.getPurchasedServerCost(serverSize), \\\"0.00a\\\"))\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tns.print(\\\"Could not afford \\\" + serverSize + \\\"gb pserver\\\")\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t}\\n}\\n\\nexport function pserverList(ns) {\\n\\tlet pServers = ns.getPurchasedServers()\\n\\tfor (let i of pServers) {\\n\\t\\tns.print(i, \\\" \\\", ns.getServerMaxRam(i));\\n\\t}\\n}\\n\\n\\nexport async function main(ns) {\\n\\tpserverList(ns)\\n}\",\"filename\":\"bp3_helpers_pservers.js\",\"server\":\"home\"}}],[\"bp3_helpers_ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function writeHackDataToPort(ns,port, target, action, threads, time) {\\n\\tlet portInfo = { target: target, action: action, threads: threads, time: time }\\n\\tns.writePort(port, JSON.stringify(portInfo))\\n}\\n\\nexport async function main(ns) {\\nns.print(ns.getRunningScript())\\n}\",\"filename\":\"bp3_helpers_ports.js\",\"server\":\"home\"}}],[\"bp3_pservers_affordable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hPservers from \\\"bp3_helpers_pservers.js\\\"\\n\\nexport async function main(ns) {\\n\\nns.tprint(hPservers.maxAffordable(ns,ns.getServerMoneyAvailable(\\\"home\\\")));\\nns.tprint(\\\"Cost of next: \\\"+ns.nFormat(ns.getPurchasedServerCost(hPservers.maxAffordable(ns,ns.getServerMoneyAvailable(\\\"home\\\"))*2),\\\"0.00a\\\"));\\n}\",\"filename\":\"bp3_pservers_affordable.js\",\"server\":\"home\"}}],[\"bp3_hacking_batchManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hMonitors from \\\"bp3_helpers_monitors.js\\\";\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\";\\n\\nfunction getMaxScriptRam(ns, scriptList) {\\n\\tlet maxRam = 0;\\n\\tfor (let i of scriptList) {\\n\\t\\tlet sRam = ns.getScriptRam(i, \\\"home\\\");\\n\\t\\tif (sRam > maxRam) {\\n\\t\\t\\tmaxRam = sRam;\\n\\t\\t}\\n\\t}\\n\\treturn maxRam;\\n}\\n\\nfunction getMaxManagedThreads(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n\\tlet secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n\\tlet wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1));\\n\\tlet gThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n\\tlet wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1));\\n\\treturn hThreads + gThreads + wThreadsHack + wThreadsGrow;\\n}\\n\\nfunction getAvailableBatchRam(ns, totalRam, runningList, scriptList) {\\n\\tfor (let i of runningList) {\\n\\t\\ttotalRam = totalRam - getMaxManagedThreads(ns, i) * getMaxScriptRam(ns, scriptList);\\n\\t}\\n\\treturn totalRam;\\n}\\n\\nfunction scriptChoice(ns, target) {\\n\\tlet choice = \\\"bp3_hacking_batch.js\\\"\\n\\tif (hHacking.minSec(ns, target) === false || hHacking.maxMoney(ns, target) === false) {\\n\\t\\tchoice = \\\"bp3_hacking_prepBatch.js\\\"\\n\\t}\\n\\treturn choice;\\n}\\n\\nfunction getAllRunningScripts(ns) {\\n\\tlet net = hServers.networkScan(ns)\\n\\tlet runningScripts = [];\\n\\tfor (let i of net) {\\n\\t\\tlet sRunningScripts = ns.ps(i);\\n\\t\\tfor (let j of sRunningScripts) {\\n\\t\\t\\tlet rScriptNames = runningScripts.map(function (el) { return el.filename })\\n\\t\\t\\tlet rScriptArgs = runningScripts.map(function (el) { return JSON.stringify(el.args) })\\n\\t\\t\\tif (rScriptNames.indexOf(j.filename) < 0 && rScriptArgs.indexOf(JSON.stringify(j.args)) < 0) {\\n\\t\\t\\t\\trunningScripts.push(j);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn runningScripts;\\n}\\n\\nfunction getEstimatedEndTime(ns, target, startTime) {\\n\\treturn Math.ceil( hHacking.DRUM_TIME * 5 + startTime);\\n}\\n\\nfunction getAvailableBatches(ns, target) {\\n\\tlet ars = getAllRunningScripts(ns)\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet totNumBatches = Math.max(Math.floor(wTime / (hHacking.DRUM_TIME * 4 )), 1)\\n\\n\\tlet availBatches = [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\", \\\"i\\\"]\\n\\tavailBatches = availBatches.slice(0, totNumBatches)\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tfor (let j in availBatches) {\\n\\t\\t\\t//\\tns.print(j,i.args,i.filename)\\n\\t\\t\\tif ((sArgs.indexOf(availBatches[j]) > -1) && (sArgs.indexOf(target) > -1) && (i.filename === \\\"bp3_hacking_batch.js\\\")) {\\n\\t\\t\\t\\tavailBatches.splice(availBatches.indexOf(availBatches[j]), 1);\\n\\t\\t\\t\\tj--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tns.print(target,\\\" \\\",availBatches)\\n\\treturn availBatches;\\n}\\n\\nfunction getLatestBatchTime(ns, target) {\\n\\tns.print(\\\"Starting getLatest Batch \\\" + target)\\n\\tlet ars = getAllRunningScripts(ns)\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet totNumBatches = Math.max(Math.floor(wTime / (hHacking.DRUM_TIME * 4 )), 1)\\n\\tns.print(\\\"tot num batches \\\" + totNumBatches)\\n\\tlet availBatches = [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\", \\\"i\\\"]\\n\\tavailBatches = availBatches.slice(0, totNumBatches)\\n\\tns.print(\\\"avail batches \\\" + availBatches)\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tlet latestBatchTime = 0;\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tfor (let j in availBatches) {\\n\\t\\t\\t//\\tns.print(j,i.args,i.filename)\\n\\t\\t\\tif ((sArgs.indexOf(target) > -1) && (i.filename === \\\"bp3_hacking_batch.js\\\")) {\\n\\t\\t\\t\\tif (sArgs[3] > latestBatchTime) {\\n\\t\\t\\t\\t\\tlatestBatchTime = sArgs[3]\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//ns.print(latestBatchTime);\\n\\treturn latestBatchTime;\\n}\\n\\nfunction updateRunningBatches(ns, runningBatchesList, addBatch, removeBatch) {\\n\\tif (removeBatch.length > 0) {\\n\\t\\tif (runningBatchesList.includes(removeBatch)) {\\n\\t\\t\\trunningBatchesList.splice(runningBatchesList.indexOf(removeBatch), 1)\\n\\t\\t}\\n\\t}\\n\\tif (addBatch.length > 0) {\\n\\t\\tif (!runningBatchesList.includes(addBatch)) {\\n\\t\\t\\trunningBatchesList.push\\n\\t\\t}\\n\\t}\\n\\treturn runningBatchesList;\\n}\\n\\nasync function hostsPrep(ns, target) {\\n\\tlet hostServers = hServers.getAvailableHostServers(ns, earlyGame, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n\\thServers.getRootAccess(ns, target);\\n\\tawait hHacking.scpHackingScripts(ns, hostServers)\\n}\\n\\nasync function runBatch(ns, target, batchName, waitTime = 0, earlyGame = false) {\\n\\n\\thServers.getRootAccess(ns, target);\\n\\thHacking.printServerStatus(ns, target);\\n\\n\\tawait ns.sleep(waitTime);\\n\\n\\tif (ns.hasRootAccess(target) === true) {\\n\\t\\t//     find available ram for those threads\\n\\t\\tlet hostServers = hServers.getAvailableHostServers(ns, earlyGame, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n\\t\\t//     copy the weaken script to the server(s) with RAM\\n\\t\\tawait hHacking.scpHackingScripts(ns, hostServers)\\n\\t\\tns.print(batchName);\\n\\t\\tlet actionList = hHacking.getActionList(ns, target)\\n\\t\\tlet eventSchedule = hHacking.scheduleEvents(ns, target, actionList, batchName)\\n\\n\\t\\tawait hHacking.launchScripts(ns, eventSchedule, target);\\n\\n\\t\\thHacking.printServerStatus(ns, target);\\n\\n\\t}\\n}\\n\\nfunction aggregateBatchSchedule(ns, eventSchedule, target, batchName, waitTime) {\\n\\tlet actionList = hHacking.getActionList(ns, target)\\n\\tlet nextBatch = hHacking.scheduleEvents(ns, target, actionList, batchName, waitTime)\\n\\teventSchedule = eventSchedule.concat(nextBatch)\\n\\teventSchedule.sort((a, b) => a.nStart - b.nStart)\\n\\treturn eventSchedule;\\n}\\n\\n\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\tlet hackScripts = [\\\"bp3_hack.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"];\\n\\t//start loop\\n\\t//get free ram\\n\\t//determine number of threads we can run\\n\\t//create target list of prepped servers and sort\\n\\t//figure out what's already running\\n\\t//choose target\\n\\n\\t//figure out thread ratio per batch\\n\\t//time and distribute actions\\n\\t//create target list of prepable servers and sort\\n\\t//figure out what's already running\\n\\t//choose target\\n\\t//figure out thread ratio per batch\\n\\t//time and distribute actions\\n\\t//end loop\\n\\n\\tlet timeHorizon = 2 * 60 * 1000\\n\\n\\tlet longestBatchTime = timeHorizon\\n\\tlet runningBatches = [];\\n\\twhile (true) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 28e9) {\\n\\t\\t\\ttimeHorizon = 10 * 60 * 1000;\\n\\t\\t} else {\\n\\t\\t\\ttimeHorizon = 2 * 60 * 1000;\\n\\t\\t}\\n\\n\\t\\t//root all\\n\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\t//get network max ram (not home);\\n\\t\\tlet networkTotalRam = hServers.getNetworkRamTotal(ns);\\n\\t\\t//get running managers\\n\\t\\tlet runningManagers = hMonitors.getRunningManagers(ns, \\\"bp3_hacking_batch.js\\\");\\n\\t\\tlet runningPrepManagers = hMonitors.getRunningManagers(ns, \\\"bp3_hacking_prepBatch.js\\\");\\n\\t\\t//\\tif (runningPrepManagers.length < 1) {\\n\\t\\tfor (let h of runningPrepManagers) {\\n\\t\\t\\tif (runningManagers.indexOf(h) < 0) {\\n\\t\\t\\t\\trunningManagers.push(h)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t//get target list, sort by score\\n\\t\\tlet targetList = hServers.targetList(ns);\\n\\t\\ttargetList.sort((a, b) => hServers.targetScore(ns, b) - hServers.targetScore(ns, a));\\n\\t\\tlet newTargetList = targetList.filter(el => runningManagers.indexOf(el) < 0)\\n\\t\\tnewTargetList = newTargetList.filter(el => ns.getWeakenTime(el) < (timeHorizon));\\n\\t\\t//determine if we can run another one on available space\\n\\t\\tlet availableBatchRam = getAvailableBatchRam(ns, networkTotalRam, runningManagers, hackScripts);\\n\\n\\t\\tlongestBatchTime = getEstimatedEndTime(ns, newTargetList[0], 0)\\n\\n\\t\\tfor (let i of newTargetList) {\\n\\t\\t\\t//ram check\\n\\t\\t\\trunningPrepManagers = hMonitors.getRunningManagers(ns, \\\"bp3_hacking_prepBatch.js\\\");\\n\\n\\t\\t\\tlet script = scriptChoice(ns, i)\\n\\t\\t\\tif (runningPrepManagers.length > 0 && script === \\\"bp3_hacking_prepBatch.js\\\") {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tlet managerRam = getMaxManagedThreads(ns, i) * getMaxScriptRam(ns, hackScripts)\\n\\n\\n\\t\\t\\tlet availBatches = getAvailableBatches(ns, i);\\n\\n\\t\\t\\tif (runningPrepManagers.length === 0 && script === \\\"bp3_hacking_prepBatch.js\\\") {\\n\\t\\t\\t\\tavailBatches = [\\\"prep\\\"];\\n\\t\\t\\t}\\n\\n\\t\\t\\t//let availBatches = [\\\"a\\\",\\\"b\\\"]\\n\\t\\t\\tlet waitTime = getEstimatedEndTime(ns, i, 0)\\n\\n\\t\\t\\tif (availBatches.length > 0) {\\n\\t\\t\\t\\tfor (let j in availBatches) {\\n\\t\\t\\t\\t\\t//let j = 0;\\n\\t\\t\\t\\t\\tlet batName = availBatches[j]\\n\\t\\t\\t\\t\\t//\\tif (managerRam < availableBatchRam) {\\n\\t\\t\\t\\t\\tif (script === \\\"bp3_hacking_prepBatch.js\\\") { batName = \\\"prep\\\" };\\n\\t\\t\\t\\t\\tif (ns.exec(script, \\\"home\\\", { preventDuplicate: true }, i, batName, getLatestBatchTime(ns, i) + hHacking.DRUM_TIME*4*j)) {\\n\\t\\t\\t\\t\\t\\tavailableBatchRam = availableBatchRam - managerRam;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t/*} else {\\n\\t\\t\\t\\t\\t\\t\\t//is there space for a new purchased server?\\n\\t\\n\\t\\t\\t\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(4))\\n\\t\\t\\t\\t\\t\\t\\t\\thPservers.getPServer(ns, managerRam)\\n\\t\\t\\t\\t\\t\\t\\tif (ns.exec(script, \\\"home\\\", 1, i, batName, getLatestBatchTime(ns, i) + ns.getWeakenTime(i) * j)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tavailableBatchRam = availableBatchRam - managerRam;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}*/\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tavailBatches = getAvailableBatches(ns, i);\\n\\t\\t\\t}\\n\\t\\t\\tif (getEstimatedEndTime(ns, i, 0) > longestBatchTime) {\\n\\t\\t\\t\\tlongestBatchTime = getEstimatedEndTime(ns, i, 0)\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tns.print(\\\"Time horizon \\\" + timeHorizon / 60000 + \\\" min weakenTime\\\")\\n\\t\\tns.print(\\\"New target list; weaken time; max mgd threads\\\")\\n\\t\\tfor (let i of newTargetList)\\n\\t\\t\\tns.print(i, \\\" \\\", +Math.floor(ns.getWeakenTime(i), 1), \\\" \\\", getMaxManagedThreads(ns, i));\\n\\n\\t\\t//\\t}\\n\\t\\t//can we afford a new purchased server?\\n\\t\\t//spin up another one?\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_hacking_batchManager.js\",\"server\":\"home\"}}],[\"bp3_hacking_batch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\"\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nexport async function main(ns) {\\n\\t//  let args = JSON.parse(ns.args);\\n\\tlet args = [];\\n\\tlet target = args[0] || ns.args[0];\\n\\tns.disableLog('ALL')\\n\\tlet batchName = args[1] || ns.args[1];\\n\\tlet waitTime = args[2] || ns.args[2] || 0;\\n\\tlet earlyGame = args[3] || false;\\n\\n\\thServers.getRootAccess(ns, target);\\n\\thHacking.printServerStatus(ns, target);\\n\\n\\tawait ns.sleep(waitTime);\\n\\n\\n\\tif (ns.hasRootAccess(target) === true) {\\n\\t\\t//     find available ram for those threads\\n\\t\\tlet hostServers = hServers.getAvailableHostServers(ns, earlyGame, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n\\t\\t//     copy the weaken script to the server(s) with RAM\\n\\t\\tawait hHacking.scpHackingScripts(ns, hostServers)\\n\\t\\tns.print(batchName);\\n\\t\\tlet actionList = hHacking.getActionList(ns, target)\\n\\t\\tlet eventSchedule = hHacking.scheduleEvents(ns, target, actionList, batchName)\\n\\n\\t\\tawait hHacking.launchScripts(ns, eventSchedule, target);\\n\\n\\t\\thHacking.printServerStatus(ns, target);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"bp3_hacking_batch.js\",\"server\":\"home\"}}],[\"bp3_hacking_prepBatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\"\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\n\\n\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nexport async function main(ns) {\\n   let args = [];\\n    let target = args[0] || ns.args[0];\\n    ns.disableLog('ALL')\\n    let batchName = args[1] || ns.args[1];\\n    let waitTime = args[2] || ns.args[2] || 0;\\n\\n\\n    ns.disableLog('ALL')\\n    hServers.getRootAccess(ns, target);\\n    if (ns.hasRootAccess(target) === true) {\\n        //     find available ram for those threads\\n        let hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n        //     copy the weaken script to the server(s) with RAM\\n        await hHacking.scpHackingScripts(ns, hostServers)\\n\\n        let eventSchedule = hHacking.scheduleEvents(ns, target,[\\\"w1\\\",\\\"g\\\",\\\"w2\\\"],batchName,waitTime);\\n\\n        await hHacking.launchScripts(ns, eventSchedule, target);\\n\\n        ns.print(ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target))\\n        ns.print(ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target));\\n\\n    }\\n}\",\"filename\":\"bp3_hacking_prepBatch.js\",\"server\":\"home\"}}],[\"bp3_progress_restart.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") > ns.getScriptRam(\\\"bp3_progress_manager.js\\\")) {\\n\\t\\tns.exec(\\\"bp3_progress_manager.js\\\", \\\"home\\\")\\n\\t} else {\\n\\t\\tns.exec(\\\"bp3_hacking_loop.js\\\", \\\"home\\\",{preventDuplicates:true},\\\"n00dles\\\")\\n\\t}\\n\\tns.exec(\\\"bp3_hacknet_manager.js\\\",\\\"home\\\",{preventDuplicates:true})\\n\\n\\tif (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") > ns.getScriptRam(\\\"i3_customStats.js\\\")*10) {\\n\\t\\tns.exec(\\\"i3_customStats.js\\\", \\\"home\\\",{preventDuplicates:true})\\n\\t}\\n\\tif (ns.corporation.hasCorporation()) {\\n\\t\\tns.exec(\\\"bp3_corp_manager.js\\\",\\\"home\\\",{preventDuplicates:true})\\n\\t}\\n\\n}\",\"filename\":\"bp3_progress_restart.js\",\"server\":\"home\"}}],[\"bp3_pservers_deleting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\nwhile(true) {\\n\\tawait ns.sleep(36000000);\\n}\\n\\n}\",\"filename\":\"bp3_pservers_deleting.js\",\"server\":\"home\"}}],[\"bp3_servers_path.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\";\\n\\nexport async function main(ns) {\\n\\nlet target = ns.args[0];\\nhServers.startFindPath(ns,target);\\n\\n}\",\"filename\":\"bp3_servers_path.js\",\"server\":\"home\"}}],[\"bp3_hacking_bN00dles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\nwhile(true) {\\n\\tns.exec(\\\"bp3_hacking_batch.js\\\",\\\"home\\\",1,\\\"n00dles\\\",\\\"a\\\",0,true);\\n\\tawait ns.sleep(30000)\\n}\\n}\",\"filename\":\"bp3_hacking_bN00dles.js\",\"server\":\"home\"}}],[\"gx_textTransforms.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Transform Text */\\nexport class TextTransforms {\\n\\t//https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters\\n\\tstatic #escapeCode = '\\\\x1b[';\\n\\tstatic #foreground = '38;5;';\\n\\tstatic #background = '48;5;';\\n\\tstatic #endCode = 'm';\\n\\tstatic #reset = `${this.#escapeCode}0${this.#endCode}`\\n\\tstatic Highlight = {\\n\\t\\tBlack: { Type: \\\"Highlight\\\", Value: 16 },\\n\\t\\tRed: { Type: \\\"Highlight\\\", Value: 52 },\\n\\t\\tGreen: { Type: \\\"Highlight\\\", Value: 22 },\\n\\t\\tYellow: { Type: \\\"Highlight\\\", Value: 58 },\\n\\t\\tBlue: { Type: \\\"Highlight\\\", Value: 17 },\\n\\t\\tMagenta: { Type: \\\"Highlight\\\", Value: 53 },\\n\\t\\tCyan: { Type: \\\"Highlight\\\", Value: 30 },\\n\\t\\tBrightRed: { Type: \\\"Highlight\\\", Value: 1 },\\n\\t\\tWhite: { Type: \\\"Highlight\\\", Value: 231 },\\n\\t}\\n\\tstatic Color = {\\n\\t\\tBlack: { Type: \\\"Color\\\", Value: 16 },\\n\\t\\tRed: { Type: \\\"Color\\\", Value: 52 },\\n\\t\\tGreen: { Type: \\\"Color\\\", Value: 22 },\\n\\t\\tYellow: { Type: \\\"Color\\\", Value: 58 },\\n\\t\\tBlue: { Type: \\\"Color\\\", Value: 17 },\\n\\t\\tMagenta: { Type: \\\"Color\\\", Value: 53 },\\n\\t\\tCyan: { Type: \\\"Color\\\", Value: 30 },\\n\\t\\tBrightRed: { Type: \\\"Color\\\", Value: 1 },\\n\\t\\tWhite: { Type: \\\"Color\\\", Value: 231 },\\n\\t}\\n\\tstatic Transform = {\\n\\t\\tBold: { Type: \\\"Transform\\\", Value: 1 },\\n\\t\\tUnderline: { Type: \\\"Transform\\\", Value: 4 },\\n\\t}\\n\\n\\t/** Apply xTerm Text Modifications\\n\\t @param {string} text\\n\\t @param {any[]} transforms\\n\\t*/\\n\\tstatic apply(text, transforms) {\\n\\t\\tlet prefix = [];\\n\\t\\tlet code = [];\\n\\t\\tlet apply = '';\\n\\n\\t\\tfor (let transform of transforms) {\\n\\t\\t\\tif (transform.Type != undefined && Number.isFinite(transform.Value)) {\\n\\t\\t\\t\\tif (transform.Type === 'Highlight') {\\n\\t\\t\\t\\t\\tcode.push(`${this.#background}${transform.Value};`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (transform.Type === 'Transform') {\\n\\t\\t\\t\\t\\tprefix.push(`${transform.Value};`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (transform.Type === 'Color') {\\n\\t\\t\\t\\t\\tcode.push(`${this.#foreground}${transform.Value};`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (prefix.length > 0) {\\n\\t\\t\\tapply += prefix.join('');\\n\\t\\t}\\n\\t\\tif (code.length > 0) {\\n\\t\\t\\tapply += code.join('');\\n\\t\\t}\\n\\t\\tif (apply.length > 0) {\\n\\t\\t\\tapply = `${this.#escapeCode}${apply}${this.#endCode}`;\\n\\t\\t}\\n\\n\\t\\tapply += `${text}${this.#reset}`\\n\\n\\t\\treturn `${apply}`;\\n\\t}\\n}\",\"filename\":\"gx_textTransforms.js\",\"server\":\"home\"}}],[\"bp3_monitors_ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\nns.disableLog('sleep');\\nlet targetList = [];\\n\\twhile (true) {\\n\\t\\twhile(ns.getPortHandle(1).empty() === false) {\\n\\t\\t\\n\\t\\tlet readline = ns.readPort(1);\\n\\t\\treadline=JSON.parse(readline);\\n\\t\\tif(readline.action === \\\"hack\\\")\\n\\t\\tns.print(readline.target)\\n\\t\\tns.print(targetList.indexOf(readline.target))\\n\\t\\tif(targetList.indexOf(readline.target)<0) {\\n\\t\\t\\ttargetList.push(readline.target)\\n\\t\\t} else {\\n\\t\\t\\ttargetList[readline.target.totHack]=targetList[readline.target.totHack]+readline.result\\n\\t\\t}\\n\\t\\t\\n\\t\\tns.print(targetList)\\n\\t\\t}\\t\\n\\tawait ns.sleep(1000);\\n}\\n\\n}\",\"filename\":\"bp3_monitors_ports.js\",\"server\":\"home\"}}],[\"hm_stocks_stock-master.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//Requires access to the TIX API and the 4S Mkt Data API\\n\\nlet fracL = 0.1;     //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\nlet commission = 100000; //Buy or sell commission\\nlet numCycles = 12;   //Each cycle is 5 seconds\\n\\nfunction refresh(ns, stocks, myStocks) {\\n    let corpus = ns.getServerMoneyAvailable(\\\"home\\\");\\n    myStocks.length = 0;\\n    for (let i = 0; i < stocks.length; i++) {\\n        let sym = stocks[i].sym;\\n        stocks[i].price = ns.stock.getPrice(sym);\\n        stocks[i].shares = ns.stock.getPosition(sym)[0];\\n        stocks[i].buyPrice = ns.stock.getPosition(sym)[1];\\n        stocks[i].vol = ns.stock.getVolatility(sym);\\n        stocks[i].prob = 2 * (ns.stock.getForecast(sym) - 0.5);\\n        stocks[i].expRet = stocks[i].vol * stocks[i].prob / 2;\\n        corpus += stocks[i].price * stocks[i].shares;\\n        if (stocks[i].shares > 0) myStocks.push(stocks[i]);\\n    }\\n    stocks.sort(function (a, b) { return b.expRet - a.expRet });\\n    return corpus;\\n}\\n\\nfunction buy(ns, stock, numShares) {\\n    let buyShares = Math.min(numShares, getAvailableShares(ns, stock.sym));\\n    ns.stock.buyStock(stock.sym, buyShares)\\n    ns.print(`Bought ${stock.sym}  for ${format(buyShares * stock.price)}`);\\n}\\n\\nfunction sell(ns, stock, numShares) {\\n    let profit = numShares * (stock.price - stock.buyPrice) - 2 * commission;\\n    ns.print(`Sold ${stock.sym} for profit of ${format(profit)}`);\\n    ns.stock.sellStock(stock.sym, numShares);\\n}\\n\\nfunction format(num) {\\n    let symbols = [\\\"\\\", \\\"K\\\", \\\"M\\\", \\\"B\\\", \\\"T\\\", \\\"Qa\\\", \\\"Qi\\\", \\\"Sx\\\", \\\"Sp\\\", \\\"Oc\\\"];\\n    let i = 0;\\n    for (; (num >= 1000) && (i < symbols.length); i++) num /= 1000;\\n\\n    return ((Math.sign(num) < 0) ? \\\"-$\\\" : \\\"$\\\") + num.toFixed(3) + symbols[i];\\n}\\n\\nfunction getAvailableShares(ns, sym) {\\n    let myPos = ns.stock.getPosition(sym)\\n    let maxShares = ns.stock.getMaxShares(sym)\\n    let availableShares = maxShares - myPos[0] - myPos[2];\\n    return availableShares;\\n}\\n\\nexport async function main(ns) {\\n    //Initialise\\n    ns.disableLog(\\\"ALL\\\");\\n    let stocks = [];\\n    let myStocks = [];\\n    let corpus = 0;\\n    for (let i = 0; i < ns.stock.getSymbols().length; i++)\\n        stocks.push({ sym: ns.stock.getSymbols()[i] });\\n\\n    while (true) {\\n        corpus = refresh(ns, stocks, myStocks);\\n\\n        //Sell underperforming shares\\n        for (let i = 0; i < myStocks.length; i++) {\\n            if (stocks[0].expRet > myStocks[i].expRet) {\\n                sell(ns, myStocks[i], myStocks[i].shares);\\n                corpus -= commission;\\n            }\\n        }\\n        //Sell shares if not enough cash in hand\\n        for (let i = 0; i < myStocks.length; i++) {\\n            if (ns.getServerMoneyAvailable(\\\"home\\\") < (fracL * corpus)) {\\n                let cashNeeded = (corpus * fracH - ns.getServerMoneyAvailable(\\\"home\\\") + commission);\\n                let numShares = Math.floor(cashNeeded / myStocks[i].price);\\n                sell(ns, myStocks[i], numShares);\\n                corpus -= commission;\\n            }\\n        }\\n\\n        //Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable(\\\"home\\\") - (fracH * corpus);\\n        let numShares = Math.floor((cashToSpend - commission) / stocks[0].price);\\n        if ((numShares * stocks[0].expRet * stocks[0].price * numCycles) > commission)\\n            buy(ns, stocks[0], numShares);\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"hm_stocks_stock-master.js\",\"server\":\"home\"}}],[\"bp3_progress_install.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function stockMarket(ns) {\\n\\tif (ns.isRunning(\\\"hm_stocks_stock-master.js\\\", \\\"home\\\")) {\\n\\t\\tns.kill(\\\"hm_stocks_stock-master.js\\\", \\\"home\\\")\\n\\t\\tawait ns.sleep(5000);\\n\\t}\\n\\tns.exec(\\\"bp3_stocks_sellAll.js\\\", \\\"home\\\");\\n\\tawait ns.sleep(5000);\\n}\\n\\nfunction buyAllWantedAugs(ns) {}\\nfunction upgradeComp(ns) {}\\nfunction buyNFG(ns) {}\\nfunction buyAllOtherAugs(ns) {}\\n\\nexport async function main(ns) {\\n\\tns.killall(\\\"home\\\");\\n\\tawait ns.sleep(10000);\\n\\tstockMarket(ns);\\n\\n\\n\\n}\",\"filename\":\"bp3_progress_install.js\",\"server\":\"home\"}}],[\"bp3_stocks_sellAll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction getPositions(ns, SYMBOLS) {\\n\\tlet positions = [];\\n\\tfor (let i of SYMBOLS) {\\n\\t\\tlet pos = ns.stock.getPosition(i)\\n\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\tpositions.push(\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tsym: i,\\n\\t\\t\\t\\t\\tlongQty: pos[0],\\n\\t\\t\\t\\t\\tlongPrice: pos[1],\\n\\t\\t\\t\\t\\tshortQty: pos[2],\\n\\t\\t\\t\\t\\tshortPrice: pos[3],\\n\\t\\t\\t\\t}\\n\\t\\t\\t)\\n\\t\\t}\\n\\t}\\n\\treturn positions;\\n}\\n\\nfunction sellAllStocks(ns,positions) {\\n\\tfor(let i of positions) {\\n\\t\\tif(i.longQty>0) {\\n\\t\\t\\tns.stock.sellStock(i.sym,i.longQty);\\n\\t\\t}\\n\\t\\tif(i.shortQty>0) {\\n\\t\\t\\tns.stock.sellStock(i.sym,i.shortQty);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tconst SYMBOLS = ns.stock.getSymbols();\\n\\tlet positions = getPositions(ns,SYMBOLS)\\n\\tsellAllStocks(ns,positions)\\n}\",\"filename\":\"bp3_stocks_sellAll.js\",\"server\":\"home\"}}],[\"bp3_pservers_mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hPServers from \\\"bp3_helpers_pservers.js\\\"\\nimport { holdOnPurchase } from \\\"bp3_helpers_purchase.js\\\"\\n\\nfunction serverRamList(ns) {\\n\\tlet net = hServers.networkScan(ns);\\n\\tlet serverSizes = []\\n\\tlet maxPossible = Math.max(ns.getServerMaxRam(\\\"home\\\"), ns.getPurchasedServerMaxRam() * 2)\\n\\tfor (let i = 2; i < maxPossible * 2; i = i * 2) {\\n\\t\\tserverSizes.push({ sSize: i, sNum: 0, sDNU: \\\"\\\" })\\n\\t}\\n\\n\\tfor (let i of net) {\\n\\t\\tlet ram = ns.getServerMaxRam(i)\\n\\t\\tif (ram > 0) {\\n\\t\\t\\tserverSizes[serverSizes.map(function (el) { return el.sSize }).indexOf(ram)].sNum++\\n\\t\\t}\\n\\t\\tif (ns.ls(i, \\\"bp3_doNotUse.js\\\").length > 0 && i !== \\\"home\\\") {\\n\\t\\t\\tserverSizes[serverSizes.map(function (el) { return el.sSize }).indexOf(ram)].sDNU = \\\"DNU\\\";\\n\\t\\t}\\n\\t}\\n\\treturn serverSizes;\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tlet counter = 0;\\n\\twhile (true) {\\n\\n\\t\\tlet availableRam = hServers.getNetworkRamAvailable(ns, false);\\n\\t\\tlet maxRam = hServers.getNetworkRamTotal(ns, false)\\n\\t\\tlet ramPerc = availableRam / maxRam;\\n\\t\\tns.print(\\\"(counter (\\\" + counter + \\\"/30))\\\")\\n\\t\\tns.print(\\\"freeRam / total ram (% free)\\\")\\n\\t\\tns.print(ns.formatNumber(availableRam, \\\"0.00a\\\") + \\\" / \\\" + ns.formatNumber(maxRam, \\\"0.00a\\\") + \\\"(\\\" + ns.nFormat(ramPerc, \\\"0.00%\\\") + \\\")\\\");\\n\\n\\t\\tif (counter > 30) {\\n\\n\\t\\t\\tif (ramPerc < .5) {\\n\\t\\t\\t\\tns.exec(\\\"bp3_progress_tor.js\\\", \\\"home\\\");\\n\\t\\t\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\t\\t\\tif (!holdOnPurchase(ns)) {\\n\\t\\t\\t\\t\\tif (await hPServers.getPServer(ns, 16))\\n\\t\\t\\t\\t\\t\\tcounter = 0;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(\\\"Holding on purchase\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tlet pservers = ns.getPurchasedServers();\\n\\t\\tns.print(\\\"# Purchased Servers \\\" + pservers.length,\\\" / \\\"+ns.getPurchasedServerLimit())\\n\\t\\tlet serverSizes = serverRamList(ns);\\n\\n\\t\\tfor (let i of serverSizes) {\\n\\t\\t\\tif (i.sNum > 0)\\n\\t\\t\\t\\tns.print(i.sNum + \\\" servers at \\\" + i.sSize + \\\"gb \\\" + i.sDNU);\\n\\t\\t}\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(10000)\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_pservers_mgr.js\",\"server\":\"home\"}}],[\"bp3_helpers_augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport { FactionNames } from \\\"bp3_data_factions.js\\\"\\nimport { factionCheck, CompanyFactions } from \\\"bp3_helpers_factions.js\\\"\\n\\nexport function getFactionAugs(ns, faction) {\\n\\tns.singularity.getAugmentationsFromFaction(faction);\\n}\\n\\nexport function getFactionShoppingList(ns,stats=HackStats.concat(RepStats)){\\n\\t//choose target aug\\n\\tlet augsWHacking = getAugsWithStat(ns, stats)\\n\\taugsWHacking = addUtilsToWantedList(ns, augsWHacking);\\n\\t////aug with lowest remaining rep req\\n\\taugsWHacking.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet sList = getShoppingList(ns, augsWHacking); //removes owned\\n\\tsList = sList.filter(el => repAchievedNames.indexOf(el.aName) < 0);\\n\\tsList.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet factionList = []\\n\\tfor (let f of sList) {\\n\\t\\tif (factionList.includes(f.aFaction) === false) {\\n\\t\\t\\tfactionList.push(f.aFaction);\\n\\t\\t}\\n\\t}\\n\\treturn factionList;\\n}\\n\\nexport function getAugFactions(ns, aug, stats) {\\n\\tlet allAugs = getAllAugs(ns, Object.values(FactionNames), stats);\\n\\tlet fAugs = allAugs.filter(el => el.aName === aug);\\n\\tlet augFactions = [];\\n\\tfor (let i of fAugs) {\\n\\t\\tif (augFactions.indexOf(i.aFaction) < 0) {\\n\\t\\t\\taugFactions.push(i.aFaction)\\n\\t\\t}\\n\\t}\\n\\treturn augFactions;\\n}\\n\\nexport function getAugScore(ns, augName, stats) {\\n\\tlet augStats = ns.singularity.getAugmentationStats(augName);\\n//\\tns.print(augStats);\\n\\tlet appStats = []\\n\\tfor (let i of Object.keys(augStats)) {\\n\\t\\tif (stats.indexOf(i) > -1) {\\n\\t\\t\\tappStats.push(augStats[i])\\n\\t\\t}\\n\\t}\\n//\\tns.print(appStats);\\n\\tlet score = appStats.reduce((acc, curr) => acc * curr, 1);\\n//\\tns.print(score);\\n\\treturn score\\n}\\n\\nexport function getTotalAugCost(ns, augList) {\\n\\t//\\tns.print(\\\"starting getTotalAugCost\\\");\\n\\t//\\tns.print(augList);\\n\\taugList.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a))\\n\\tlet mult = 1;\\n\\tlet totalAugCost = 0;\\n\\tfor (let i of augList) {\\n\\t\\ttotalAugCost = totalAugCost + ns.singularity.getAugmentationPrice(i) * mult;\\n\\t\\tmult = mult * 2;\\n\\t}\\n\\treturn totalAugCost;\\n}\\n\\nexport function getAugInfo(ns, augName, augFaction, stats) {\\n\\tlet augInfo = {\\n\\t\\taName: augName,\\n\\t\\taFaction: augFaction,\\n\\t\\taPrereqs: ns.singularity.getAugmentationPrereq(augName),\\n\\t\\taTotalRepReq: ns.singularity.getAugmentationRepReq(augName),\\n\\t\\taRepTime: getRepTime(ns, augName, augFaction),\\n\\t\\taPrice: ns.singularity.getAugmentationPrice(augName),\\n\\t\\taScore: getAugScore(ns, augName, stats)\\n\\t}\\n\\treturn augInfo;\\n}\\n\\nfunction getRepTime(ns, augName, augFaction) {\\n\\tlet companyTime = 0;\\n\\tif (!factionCheck(ns, augFaction)) {\\n\\t\\tif (CompanyFactions.indexOf(augFaction) > -1) {\\n\\t\\t\\tcompanyTime = (400000 - ns.singularity.getCompanyRep(augFaction)) / (ns.singularity.getCompanyFavor(augFaction) + 1)\\n\\t\\t}\\n\\t}\\n\\tlet factionTime = (ns.singularity.getAugmentationRepReq(augName) - ns.singularity.getFactionRep(augFaction)) / (ns.singularity.getFactionFavor(augFaction) + 1)\\n\\n\\tlet repTime = companyTime + factionTime;\\n\\n\\treturn repTime;\\n}\\n\\nexport function getAllAugs(ns, fList, stats) {\\n\\t//\\tns.print(\\\"Starting getAllAugs\\\");\\n\\tlet allAugs = [];\\n\\tfor (let i of fList) {\\n\\t\\tlet fAugs = ns.singularity.getAugmentationsFromFaction(i);\\n\\t\\tfor (let j of fAugs) {\\n\\t\\t\\t//\\tns.print(i,j);\\n\\t\\t\\tallAugs.push(getAugInfo(ns, j, i, stats))\\n\\t\\t}\\n\\t}\\n\\treturn allAugs;\\n}\\n\\nexport function getShoppingList(ns, wantedList) {\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\treturn wantedList.filter(el => owned.indexOf(el.aName) < 0);\\n}\\n\\nexport function getAugsWithStat(ns, stats) {\\n\\tlet fList = Object.values(FactionNames)\\n\\tlet stattedAugs = [];\\n\\tlet allAugs = getAllAugs(ns, fList, stats);\\n\\tfor (let i of allAugs) {\\n\\t\\tfor (let j of stats) {\\n\\t\\t\\tif (ns.singularity.getAugmentationStats(i.aName)[j] !== 1) {\\n\\t\\t\\t\\tif (!stattedAugs.includes(i))\\n\\t\\t\\t\\t\\tstattedAugs.push(i)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn stattedAugs;\\n}\\n\\nexport function addUtilsToWantedList(ns, wantedList) {\\n\\tfor (let i of UtilAugNames) {\\n\\t\\tlet augFactions = getAugFactions(ns, i, AllStats)\\n\\t\\tfor (let j of augFactions) {\\n\\t\\t\\tlet utilAug = getAugInfo(ns, i, j, AllStats)\\n\\t\\t\\tutilAug.aScore = 2;\\n\\t\\t\\tif (utilAug.aName === \\\"The Red Pill\\\") {\\n\\t\\t\\t\\tutilAug.aScore = 200;\\n\\t\\t\\t}\\n\\t\\t\\twantedList.push(utilAug);\\n\\t\\t}\\n\\t}\\n\\treturn wantedList;\\n}\\n\\nfunction augRepCheck(ns,augName,factionName) {\\n\\n}\\n\\n\\n\\nexport function getRepAchievedAugs(ns) {\\n\\tlet stats = HackStats.concat(RepStats);\\n\\tlet augsWHacking = getAugsWithStat(ns, stats)\\n\\taugsWHacking = addUtilsToWantedList(ns, augsWHacking);\\n\\t////aug with lowest remaining rep req\\n\\taugsWHacking.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\treturn repAchievedNames;\\n}\\n\\nexport function getRepAchievedCost(ns) {\\nlet repAchievedCost = 0;\\n\\tlet repAchievedAlreadyListed = [];\\n\\tlet repAchievedMulti = 1;\\n\\tlet repAchievedNames = getRepAchievedAugs(ns);\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\tfor (let i of repAchievedNames) {\\n\\t\\tif (repAchievedAlreadyListed.indexOf(i) < 0) {\\n\\t\\t\\tns.print(i, \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i) * repAchievedMulti, \\\"0.00a\\\"));\\n\\t\\t\\trepAchievedCost = repAchievedCost + ns.singularity.getAugmentationPrice(i) * repAchievedMulti;\\n\\t\\t\\trepAchievedAlreadyListed.push(i)\\n\\t\\t\\trepAchievedMulti = repAchievedMulti * 2\\n\\t\\t}\\n\\t}\\n\\treturn repAchievedCost\\n}\\n\\nexport const AllStats = [\\\"hacking\\\", \\\"hacking_exp\\\", \\\"hacking_chance\\\", \\\"hacking_speed\\\", \\\"hacking_grow\\\",\\\"hacking_money\\\", \\\"charisma\\\", \\\"charisma_exp\\\", \\\"company_rep\\\", \\\"faction_rep\\\", \\\"strength\\\", \\\"strength_exp\\\", \\\"defense\\\", \\\"defense_exp\\\", \\\"dexterity\\\", \\\"dexterity_exp\\\", \\\"agility\\\", \\\"agility_exp\\\", \\\"crime_success\\\", \\\"crime_money\\\"]\\nexport const HackStats = [\\\"hacking\\\", \\\"hacking_exp\\\", \\\"hacking_chance\\\", \\\"hacking_speed\\\", \\\"hacking_grow\\\",\\\"hacking_money\\\"]\\nexport const RepStats = [\\\"charisma\\\", \\\"charisma_exp\\\", \\\"company_rep\\\", \\\"faction_rep\\\"]\\nexport const CrimeStats = [\\\"strength\\\", \\\"strength_exp\\\", \\\"defense\\\", \\\"defense_exp\\\", \\\"dexterity\\\", \\\"dexterity_exp\\\", \\\"agility\\\", \\\"agility_exp\\\", \\\"crime_success\\\", \\\"crime_money\\\"]\\n\\nexport const UtilAugNames = [\\\"The Red Pill\\\", \\\"CashRoot Starter Kit\\\", \\\"Neuroreceptor Management Implant\\\",]\\n\\nexport async function main(ns) {\\n/*\\tlet stats = HackStats.concat(RepStats)\\n\\tlet allAugs = getAllAugs(ns, [\\\"CyberSec\\\", \\\"BitRunners\\\", \\\"Sector-12\\\"], stats);\\n\\tallAugs.sort((a, b) => a.aName.localeCompare(b.aName))\\n\\tfor (let i of allAugs) {\\n\\t\\tns.print(i.aName, \\\" \\\", i.aFaction)\\n\\t}\\n\\tns.print(ns.singularity.getAugmentationStats(allAugs[0].aName))\\n*/\\n\\nns.print(getRepAchievedAugs(ns))\\nns.print(getRepAchievedCost(ns))\\n\\n}\",\"filename\":\"bp3_helpers_augs.js\",\"server\":\"home\"}}],[\"bp3_monitors_networth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction moneyInfo(ns) {\\n\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\")\\n\\tns.print(\\\"Money \\\" + ns.nFormat(money, \\\"0.00a\\\"));\\n\\n\\treturn money\\n}\\n\\nfunction stocksInfo(ns) {\\n\\tlet syms = ns.stock.getSymbols();\\n\\tlet stockWorth = 0;\\n\\tfor (let i of syms) {\\n\\t\\tlet pos = ns.stock.getPosition(i)\\n\\t\\tstockWorth = stockWorth + pos[0] * pos[1] + pos[2] * pos[3];\\n\\t}\\n\\tns.print(\\\"Stockworth: \\\" + ns.nFormat(stockWorth, \\\"0.00a\\\"))\\n\\treturn stockWorth\\n}\\n\\nfunction networthInfo(ns) {\\n\\t\\tlet money = moneyInfo(ns);\\n\\tlet stocks = stocksInfo(ns);\\n\\tlet networth = money + stocks;\\n\\treturn networth\\n}\\n\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t\\tns.tail();\\n\\tlet money = moneyInfo(ns);\\n\\tlet stocks = stocksInfo(ns);\\n\\tlet networth = money + stocks;\\n\\n\\tif (ns.args[0] === \\\"alert\\\") {\\n\\t\\tns.toast(ns.nFormat(networth,\\\"0.00a\\\"),\\\"success\\\");\\n\\t} else {\\n\\n\\t\\twhile (true) {\\n\\t\\t\\n\\t\\t\\tlet money = moneyInfo(ns);\\n\\t\\t\\tlet stocks = stocksInfo(ns);\\n\\t\\t\\tlet networth = money + stocks;\\n\\t\\t\\tns.print(\\\"networth: \\\" + ns.nFormat(networth, \\\"0.00a\\\"))\\n\\n\\t\\t\\tawait ns.sleep(10000)\\n\\t\\t\\tns.clearLog()\\n\\t\\t}\\n\\t}\\n\\n\\n}\",\"filename\":\"bp3_monitors_networth.js\",\"server\":\"home\"}}],[\"bp3_progress_bnStart.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Algorithms\\\");\\n\\n\\n\\tns.exec(\\\"bp3_hacking_bN00dles.js\\\", \\\"home\\\");\\n\\n\\n\\n\\twhile (ns.getServerMoneyAvailable(\\\"home\\\") < 250000) {\\n\\t\\tns.exec(\\\"bp3_progress_upgradeHome.js\\\", \\\"home\\\")\\n\\t\\tns.exec(\\\"bp3_progress_tor.js\\\", \\\"home\\\");\\n\\t\\tns.exec(\\\"bp3_servers_rootAll.js\\\", \\\"home\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\n\\n}\",\"filename\":\"bp3_progress_bnStart.js\",\"server\":\"home\"}}],[\"bp3_progress_tor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"]\\n\\tlet exes = ns.ls(\\\"home\\\", \\\".exe\\\");\\n\\tif (ns.hasTorRouter() === false) {\\n\\t\\tif (ns.singularity.purchaseTor()) {\\n\\t\\t\\tns.tprint(\\\"Purchased TOR\\\");\\n\\t\\t}\\n\\t}\\n\\tprogramNames = programNames.filter(el => exes.indexOf(el) < 0);\\n\\tfor (let i of programNames) {\\n\\t\\tif (ns.singularity.purchaseProgram(i)) {\\n\\t\\t\\tns.tprint(\\\"Purchased program \\\" + i);\\n\\t\\t}\\n\\n\\t}\\n\\n}\",\"filename\":\"bp3_progress_tor.js\",\"server\":\"home\"}}],[\"bp3_helpers_player.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\n\\nexport function choosePlayerAction(ns) {\\n\\t//purchase list:\\n\\t//augs\\n\\t//home upgrade RAM\\n\\t//home upgrade Core\\n\\t//programs\\n\\t//pservers\\n\\t//stock API's\\n\\t//company starter\\n\\n\\t//goal resources:\\n\\t//money (crime / hacking), \\n\\t//hacking level (uni / faction work)\\n\\t//company rep (job work)\\n\\t//faction rep (faction work)\\n\\n}\\n\\nfunction getTargetAugList(ns, stats) {\\n\\tlet augsWStat = hAugs.getAugsWithStat(ns, stats)\\n\\n\\t//ns.print(augsWHacking);\\n\\taugsWStat.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\t//ns.print(ns.singularity.getAugmentationStats(augsWHacking[2]))\\n\\tlet sList = hAugs.getShoppingList(ns, augsWStat);\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tlet targetAugList = sList.filter(el => (availableFactions.indexOf(el.aFaction)) > -1 && (el.aRepTime > 0));\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\tlet repAchievedNames = [];\\n\\n\\tlet statAugNames = augsWStat.map(function (el) { if (el.aRepTime <= 0) { return el.aName } });\\n\\tfor (let i of statAugNames) {\\n\\t\\tif (repAchievedNames.indexOf(i) < 0) {\\n\\t\\t\\trepAchievedNames.push(i);\\n\\t\\t}\\n\\t}\\n\\ttargetAugList = targetAugList.filter(el => owned.indexOf(el.aName) < 0 && repAchievedNames.indexOf(el.aName) < 0);\\n\\treturn targetAugList;\\n}\\n\\nexport const CRIMELIST = [\\n\\t\\\"Assassination\\\",\\n\\t\\\"Bond Forgery\\\",\\n\\t\\\"Deal Drugs\\\",\\n\\t\\\"Grand Theft Auto\\\",\\n\\t\\\"Heist\\\",\\n\\t\\\"Homicide\\\",\\n\\t\\\"Kidnap\\\",\\n\\t\\\"Larceny\\\",\\n\\t\\\"Mug\\\",\\n\\t\\\"Rob Store\\\",\\n\\t\\\"Shoplift\\\",\\n\\t\\\"Traffick Arms\\\"\\n]\\nexport function getCrimeScores(ns, stat = \\\"money\\\") {\\n\\tlet crimeScores = [];\\n\\tfor (let i of CRIMELIST) {\\n\\t\\tlet chance = ns.singularity.getCrimeChance(i)\\n\\t\\tlet stats = ns.singularity.getCrimeStats(i)\\n\\t\\tlet score = stats[stat] * chance / stats.time;\\n\\t\\tcrimeScores.push({ cName: i, cScore: score, cTime: stats.time })\\n\\t}\\n\\tcrimeScores.sort((a, b) => b.cScore - a.cScore);\\n\\treturn crimeScores\\n}\\n\\nexport function getCrimeStatGain(ns, stat) {\\n\\tlet crimeScores = [];\\n\\tfor (let i of CRIMELIST) {\\n\\t\\tlet chance = ns.singularity.getCrimeChance(i)\\n\\t\\tlet stats = ns.singularity.getCrimeStats(i)\\n\\t\\tlet score = stats[stat] * chance / stats.time;\\n\\t\\tcrimeScores.push({ cName: i, cScore: score, cTime: stats.time })\\n\\t}\\n\\tcrimeScores.sort((a, b) => b.cScore - a.cScore);\\n\\treturn crimeScores\\n}\\n\\nexport function doBestCrime(ns, stat = \\\"money\\\", goal) {\\n\\tlet scores = getCrimeStatGain(ns, stat)\\n\\tscores = scores.filter(el => el.cTime < 120000)\\n\\tlet sleepTime = Math.max(scores[0].cTime * 1.1, 10000);\\n\\tns.print(\\\"Time to goal: \\\" + (sleepTime / 1000 * (1 / scores[0].cScore) * goal))\\n\\tns.exec(\\\"bp3_player_crime.js\\\", \\\"home\\\", 1, scores[0].cName, stat, goal, sleepTime)\\n}\\n\\nexport function getBestCrime(ns, stat = \\\"money\\\") {\\n\\tlet scores = getCrimeStatGain(ns, stat)\\n\\tscores = scores.filter(el => el.cTime < 120000)\\n\\treturn scores[0].cName\\n}\\n\\nexport function getSCrimeScore(ns,sleeveNo,crime,stat=\\\"money\\\") {\\n\\tlet sleeveInfo = ns.sleeve.getSleeve(sleeveNo);\\n\\tns.print(sleeveInfo);\\n\\tlet gains = ns.formulas.work.crimeGains(sleeveInfo,crime)\\n\\tlet chance = ns.formulas.work.crimeSuccessChance(sleeveInfo,crime)\\n\\tlet time = ns.singularity.getCrimeStats(crime).time;\\n\\tlet statGain = gains.stat * chance / time;\\n\\treturn statGain;\\n}\\n\\nexport function getSBestCrime(ns, sleeveNo,stat = \\\"money\\\") {\\n\\tlet crimes = CRIMELIST;\\n\\tcrimes.sort((a,b)=>getSCrimeScore(ns,sleeveNo,b,stat)-getSCrimeScore(ns,sleeveNo,a,stat));\\n\\treturn crimes[0]\\n}\\n\\nexport async function main(ns) {\\n\\tlet sleeveNo = 0;\\n\\tlet crime = \\\"Heist\\\"\\nns.print(getBestCrime(ns,sleeveNo,\\\"money\\\"))\\n\\n}\",\"filename\":\"bp3_helpers_player.js\",\"server\":\"home\"}}],[\"bp3_player_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hPurchase from \\\"bp3_helpers_purchase.js\\\"\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\"\\nimport * as hPlayer from \\\"bp3_helpers_player.js\\\"\\nimport * as hProgress from \\\"bp3_helpers_progress.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\t//looping version:\\n\\t//get all augs with wanted stats\\n\\t//sum reptime by faction\\n\\t//sort factions by reptime (lowest to highest)\\n\\t//select faction with lowest reptime\\n\\t//attempt to join faction\\n\\t//if can't join, go to next\\n\\n\\t//choose stat increase (rep / hack / combat / bb)\\n\\tlet stats = hAugs.HackStats.concat(hAugs.RepStats);\\n\\t//choose target aug\\n\\tlet augsWHacking = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWHacking = hAugs.addUtilsToWantedList(ns, augsWHacking);\\n\\t////aug with lowest remaining rep req\\n\\taugsWHacking.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet sList = hAugs.getShoppingList(ns, augsWHacking); //removes owned\\n\\tsList = sList.filter(el => repAchievedNames.indexOf(el.aName) < 0);\\n\\tsList.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet factionList = []\\n\\tfor (let f of sList) {\\n\\t\\tif (factionList.includes(f.aFaction) === false) {\\n\\t\\t\\tfactionList.push(f.aFaction);\\n\\t\\t}\\n\\t}\\n\\tlet factionRepTime = [];\\n\\tfor (let g of factionList) {\\n\\t\\tfactionRepTime.push({ fName: g, fRepTime: 0 });\\n\\t\\tfor (let h of sList) {\\n\\t\\t\\tif (h.aFaction === g) {\\n\\t\\t\\t\\tlet fIndex = factionRepTime.findIndex(el => el.fName === g);\\n\\t\\t\\t\\tfactionRepTime[fIndex].fRepTime = factionRepTime[fIndex].fRepTime + h.aRepTime;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfactionRepTime = factionRepTime.filter(el => el.fRepTime > 0).sort((a, b) => a.fRepTime - b.fRepTime);\\n\\tlet factionRepTimeList = factionRepTime.map(function (el) { return el.fName })\\n\\tfor (let i of factionRepTimeList) {\\n\\t\\tif (!hFactions.joinedFactionCheck(ns, i)) {\\n\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\tawait hFactions.getInvite(ns, i)\\n\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tns.print(\\\"==========Shopping =============\\\")\\n\\tif(sList.length >0) {\\n\\tfor (let g = 0; g < Math.min(10,sList.length); g++) {\\n\\t\\tns.print(sList[g].aName, \\\" \\\", sList[g].aFaction)\\n\\t}\\n} else {\\n\\tns.print(\\\"Nothing to buy\\\")\\n}\\n\\t//choose faction\\n\\t//work on rep 'til goal\\n\\t//choose next target\\n\\t//\\tns.print(getFactionAugs(ns, \\\"CyberSec\\\"));\\n\\t//ns.print(hAugs.HackStats);\\n\\t//ns.print(augsWHacking);\\n\\t//ns.print(ns.singularity.getAugmentationStats(augsWHacking[2]))\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tlet availableHAugs = sList.filter(el => availableFactions.indexOf(el.aFaction) > -1);\\n\\t//ns.print(Object.keys(availableHAugs[0]))\\n\\tavailableHAugs = availableHAugs.filter(el => el.aName !== \\\"NeuroFlux Governor\\\");\\n\\tns.print(\\\"==========Work List=============\\\")\\n\\n\\tavailableHAugs.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\tif (availableHAugs.map(function (el) { return el.aName }).indexOf(\\\"The Red Pill\\\") > 0) {\\n\\t\\tlet redPill = availableHAugs.splice(availableHAugs.map(function (el) { return el.aName }).indexOf(\\\"The Red Pill\\\"), 1)[0];\\n\\t\\tavailableHAugs.unshift(redPill);\\n\\t}\\n\\tfor (let j of availableHAugs) {\\n\\t\\tns.print(j)\\n\\t}\\n\\n\\n\\n\\tif (availableHAugs.length > 0) {\\n\\t\\tlet choice = availableHAugs[0];\\n\\n\\t\\tns.print(\\\"Choice\\\");\\n\\t\\tns.print(choice);\\n\\t\\tns.print(\\\"Donation attempt\\\")\\n\\t\\thFactions.tryDonateToFactionForAug(ns, choice.aFaction, choice.aName)\\n\\t\\tif (ns.singularity.getFactionRep(choice.aFaction) < choice.aTotalRepReq) {\\n\\n\\t\\t\\tns.print(\\\"Starting work for faction \\\" + choice.aFaction);\\n\\t\\t\\tlet workType = hFactions.getBestWorkType(ns, choice.aFaction)\\n\\t\\t\\tns.exec(\\\"bp3_player_workForFaction.js\\\", \\\"home\\\", { preventDuplicates: true }, choice.aFaction, workType, choice.aTotalRepReq)\\n\\t\\t}\\n\\t} else {\\n\\t\\t//check for company factions\\n\\t\\tfor (let i of factionRepTimeList) {\\n\\t\\t\\tif (!hFactions.joinedFactionCheck(ns, i)) {\\n\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\tawait hFactions.getInvite(ns, i)\\n\\t\\t\\t\\t\\tif (hFactions.CompanyFactions.indexOf(i) > -1) {\\n\\t\\t\\t\\t\\t\\tns.exec(\\\"bp3_player_workForCompany.js\\\", \\\"home\\\", 1, i, 400000)\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//else do crimes\\n\\t}\\n\\n\\n\\tns.print(\\\"========simulated Purchase=========\\\")\\n\\tlet sim = hPurchase.simulatePurchase(ns, hAugs.getShoppingList(ns, augsWHacking));\\n\\tsim.sort((a, b) => b.aPrice - a.aPrice)\\n\\tfor (let i of sim) {\\n\\t\\tns.print(i.aName, \\\" \\\", i.aFaction, \\\" \\\", i.aScore / i.aPrice * 1000);\\n\\t}\\n\\n\\tns.print(hAugs.getTotalAugCost(ns, sim.map(function (el) { return el.aName })));\\n\\n\\n\\tns.print(\\\"===========rep reached========\\\")\\n\\tlet repAchievedCost = 0;\\n\\tlet repAchievedAlreadyListed = [];\\n\\tlet repAchievedMulti = 1;\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\tfor (let i of repAchievedNames) {\\n\\t\\tif (repAchievedAlreadyListed.indexOf(i) < 0) {\\n\\t\\t\\tns.print(i, \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i) * repAchievedMulti, \\\"0.00a\\\"));\\n\\t\\t\\trepAchievedCost = repAchievedCost + ns.singularity.getAugmentationPrice(i) * repAchievedMulti;\\n\\t\\t\\trepAchievedAlreadyListed.push(i)\\n\\t\\t\\trepAchievedMulti = repAchievedMulti * 2\\n\\t\\t}\\n\\t}\\n\\tif (repAchievedCost > ns.getServerMoneyAvailable(\\\"home\\\") && repAchievedCost < 25e6) {\\n\\t\\thPlayer.doBestCrime(ns, \\\"money\\\", repAchievedCost)\\n\\t}\\n\\tns.print(\\\"Total goal: \\\" + ns.nFormat(repAchievedCost, \\\"0.00a\\\"))\\n\\n\\t//\\tns.print(ns.singularity.getAugmentationStats(\\\"Wired Reflexes\\\"));\\n\\t//\\tfor(let i of sim) {\\n\\t//\\t\\tns.singularity.purchaseAugmentation(i.aFaction,i.aName);\\n\\t//\\t}\\n\\n}\",\"filename\":\"bp3_player_manager.js\",\"server\":\"home\"}}],[\"bp3_helpers_purchase.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\"\\nimport * as hHacknet from \\\"bp3_helpers_hacknet.js\\\"\\n\\nexport function purchaseAugs(ns, augList, bankRoll = ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\taugList.sort((a, b) => b.aPrice - a.aPrice);\\n\\tfor (let i of augList) {\\n\\t\\tif (!repCheck(ns, i.aName, i.aFaction)) {\\n\\t\\t\\tif (hFactions.factionFavorCheck(ns, i.aFaction)) {\\n\\t\\t\\t\\ttryDonateToFactionForAug(ns, i.aFaction, i.aName)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\thHacknet.sellHashesForMoney(ns,i.aPrice);\\n\\t\\tns.singularity.purchaseAugmentation(i.aFaction, i.aName);\\n\\t}\\n}\\n\\nexport function factionCheck(ns, faction) {\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tif (availableFactions.indexOf(faction) > -1) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function repCheck(ns, aug, faction) {\\n\\tif (ns.singularity.getAugmentationRepReq(aug) < ns.singularity.getFactionRep(faction)) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function simulatePurchase(ns, augList) {\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet boughtList = [];\\n\\n\\taugList.filter(el => el.aPrice < money);\\n\\taugList = augList.sort((a, b) => b.aScore / b.aPrice - a.aScore / a.aPrice);\\n\\t//\\tfor (let h of augList) {\\n\\t//\\t\\tns.print(h.aName, \\\" \\\", h.aFaction, \\\" \\\", h.aScore, \\\" \\\", h.aPrice);\\n\\t//\\t}\\n\\tlet purchased = [];\\n\\tlet tryList = [];\\n\\tfor (let i of augList) {\\n\\t\\tif (money < i.aPrice) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (factionCheck(ns, i.aFaction) && repCheck(ns, i.aName, i.aFaction) && boughtList.indexOf(i.aName) < 0) {\\n\\t\\t\\tif (purchased.length === 0) {\\n\\t\\t\\t\\ttryList.push(i.aName);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttryList = purchased.map(function (el) { return el.aName }).concat(i.aName);\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet tryCost = hAugs.getTotalAugCost(ns, tryList);\\n\\t\\t\\tif (tryCost < ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\t\\tif (i.aName !== \\\"NeuroFlux Governor\\\") {\\n\\t\\t\\t\\t\\tboughtList.push(i.aName)\\n\\t\\t\\t\\t\\ti.aPrice = i.aPrice * 2;\\n\\t\\t\\t\\t\\taugList.push(i)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpurchased.push(i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn purchased;\\n}\\n\\nexport function sellStocksForMoney(ns, goalMoney) {\\n\\tlet cash = ns.getServerMoneyAvailable(\\\"home\\\")\\n\\tif (cash > goalMoney) { return }\\n\\tlet remainingReq = goalMoney - cash;\\n\\tlet symbols = ns.stock.getSymbols();\\n\\tlet sellOff = [];\\n\\tfor (let i of symbols) {\\n\\t\\tlet pos = ns.stock.getPosition(i)\\n\\t\\tif (pos[0] > 0) {\\n\\t\\t\\tlet sellQty = Math.ceil(remainingReq / pos[1])\\n\\t\\t\\tif (sellQty > pos[0]) { sellQty = pos[0] };\\n\\t\\t\\tsellOff.push[i, sellQty]\\n\\n\\t\\t\\tremainingReq = remainingReq - sellQty * pos[1];\\n\\n\\t\\t\\tif (remainingReq <= 0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfor (let j of sellOff) {\\n\\t\\tns.sellStock(j[0], j[1])\\n\\t}\\n}\\n\\nexport function holdOnPurchase(ns) {\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\") \\n\\n\\tif(ns.ls(\\\"home\\\",\\\"HTTPWorm.exe\\\").length<1 && money < 25e6) {\\n\\t\\treturn true;\\n\\t}\\n\\tif(!ns.stock.has4SDataTIXAPI() && money > 40e9*.7) {\\n\\t\\treturn true\\n\\t}\\n\\tif(!ns.corporation.hasCorporation() && money > 150e9*.7) {\\n\\t\\treturn true\\n\\t}\\nreturn false;\\n}\\n\\nexport const Purchases = [\\n\\t\\\"PortBusters\\\",\\n\\t\\\"Purchased Augmentations\\\",\\n\\t\\\"Grafted Augmentations\\\",\\n\\t\\\"Stock API's and Data\\\",\\n\\t\\\"Corporation start up\\\",\\n\\t\\\"Gang Augs and Equipment\\\"\\n\\t]\\nexport const PortBusters = []\\nexport const StockItems = []\\nexport const PServers = []\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_helpers_purchase.js\",\"server\":\"home\"}}],[\"bp3_helpers_factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport { FactionNames } from \\\"bp3_data_factions.js\\\"\\nimport { ServerMetadata } from \\\"bp3_data_servers.js\\\";\\nimport { connectToServerAndBackdoor } from \\\"bp3_helpers_terminal.js\\\"\\n\\nexport async function getInvite(ns, faction) {\\n\\tns.print(\\\"Start getInvite \\\", faction)\\n\\tif (!factionCheck(ns, faction)) {\\n\\t\\tif (HackFactions.includes(faction)) {\\n\\t\\t\\tlet server = getServerNameFromFaction(ns, faction);\\n\\t\\t\\tns.print(\\\"server name \\\" + server)\\n\\t\\t\\tawait connectToServerAndBackdoor(ns, server)\\n\\t\\t}\\n\\t\\tlet locations = []\\n\\t\\tfor (let i of LocationFactions) {\\n\\t\\t\\tif (i.lFactions.includes(faction)) {\\n\\t\\t\\t\\tlocations.push(i.lName)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.print(locations);\\n\\t\\tif ((locations.length > 0) && ns.getServerMoneyAvailable(\\\"home\\\") > 50200000 && !enemyCheck(ns, faction)) {\\n\\n\\t\\t\\tawait ns.singularity.travelToCity(locations[0]);\\n\\t\\t}\\n\\t\\tif (CompanyFactions.includes(faction) && ns.getHackingLevel() > 275) {\\n\\t\\t\\tapplyToFactionCompanyJob(ns, faction);\\n\\t\\t}\\n\\t}\\n\\treturn factionCheck(ns, faction);\\n}\\n\\nexport function enemyCheck(ns, faction) {\\n\\tconst EnemyFactions = [\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Sector-12\\\",\\n\\t\\t\\tfEnemies: [\\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Volhaven\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Aevum\\\",\\n\\t\\t\\tfEnemies: [\\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Volhaven\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Chongqing\\\",\\n\\t\\t\\tfEnemies: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Ishima\\\",\\n\\t\\t\\tfEnemies: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"New Tokyo\\\",\\n\\t\\t\\tfEnemies: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Volhaven\\\",\\n\\t\\t\\tfEnemies: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\"]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Tian Di Hui\\\",\\n\\t\\t\\tfEnemies: []\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfName: \\\"Tetrads\\\",\\n\\t\\t\\tfEnemies: []\\n\\t\\t}\\n\\t]\\n\\tlet playerFactions = ns.getPlayer().factions\\n\\tlet enemies = EnemyFactions.find(el => el.fName === faction).fEnemies\\n\\tfor (let i of playerFactions) {\\n\\t\\tif (enemies.indexOf(i) > -1) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function inviteCheck(ns, faction) {\\n\\tlet invites = ns.singularity.checkFactionInvitations()\\n\\tif (invites.includes(faction)) {\\n\\t\\treturn true\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function joinedFactionCheck(ns, faction) {\\n\\tlet joined = ns.getPlayer().factions;\\n\\tif (joined.includes(faction)) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function factionCheck(ns, faction) {\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tif (availableFactions.indexOf(faction) > -1) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getKeyByValue(ns, object, value) {\\n\\tns.print(\\\"start getKeyByValue \\\", object, value)\\n\\treturn Object.keys(object).find(key => object[key] === value);\\n}\\n\\nfunction getServerNameFromFaction(ns, faction) {\\n\\tns.print(\\\"start getServerNameFromFaction \\\", faction)\\n\\tlet fName = Object.keys(FactionNames).find(key => FactionNames[key] === faction)\\n\\tns.print(\\\"fName: \\\" + fName)\\n\\tlet server = (ServerMetadata).find(el => el.organizationName === faction)\\n\\n\\tns.print(\\\"server meta \\\" + server);\\n\\tlet sName = server.hostname\\n\\tns.print(server.hostname)\\n\\treturn sName;\\n}\\n\\nexport function applyToFactionCompanyJob(ns, faction) {\\n\\tif (factionCheck(ns, faction) === false) {\\n\\t\\tns.singularity.applyToCompany(faction, \\\"IT\\\");\\n\\t}\\n}\\n\\nexport function execWorkForCompany(ns, faction) {\\n\\tif(ns.getPlayer().jobs.includes(faction)) {\\n\\tns.exec(\\\"bp3_player_workForCompany.js\\\", \\\"home\\\", 1, faction, 400000);\\n\\t}\\n}\\n\\nexport function getDonationAmtNeeded(ns, factionName, augName) {\\n\\t//ns.print(factionName, augName)\\n\\tlet factionRep = ns.singularity.getFactionRep(factionName);\\n\\t//ns.print(\\\"Faction rep \\\"+factionRep)\\n\\tlet augRep = ns.singularity.getAugmentationRepReq(augName);\\n\\t//ns.print(\\\"Aug rep \\\"+augRep)\\n\\tlet factionFavor = ns.singularity.getFactionFavor(factionName);\\n\\t//ns.print(\\\"Faction favor \\\"+factionFavor)\\n\\tlet donationAmt = -1;\\n\\tif (factionFavorCheck(ns, factionName)) {\\n\\t\\tif (factionRep < augRep) {\\n\\t\\t//\\tns.print(\\\"Rep gain from donation of 1\\\"+donGain1)\\n\\t\\t\\tdonationAmt = Math.ceil((augRep - factionRep)/ns.formulas.reputation.repFromDonation(1, ns.getPlayer()));\\n\\t\\t\\t//ns.print(\\\"Donation amt \\\"+donationAmt)\\n\\t} else ns.print(`Sufficient rep with ${factionName} to purchase ${augName}`);\\n\\t} else {\\n\\t\\tns.print(`Faction favor ${ns.formatNumber(factionFavor, \\\"0.00a\\\")} / ${ns.formatNumber(ns.singularity.getFavorToDonate())}`)\\n\\t}\\n\\treturn donationAmt\\n}\\n\\nexport function factionFavorCheck(ns, faction) {\\n\\tif (ns.singularity.getFactionFavor(faction) > ns.getFavorToDonate()) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function tryDonateToFactionForAug(ns, factionName, augName) {\\n\\tif (factionFavorCheck(ns, factionName)) {\\n\\t\\tlet donation = getDonationAmtNeeded(ns, factionName, augName);\\n\\t\\tns.print(donation)\\n\\t\\tif (donation < (ns.getServerMoneyAvailable(\\\"home\\\") - ns.singularity.getAugmentationPrice(augName))) {\\n\\t\\t\\tns.singularity.donateToFaction(factionName, donation);\\n\\t\\t} else {\\n\\t\\t\\tlet totalMoneyReq = ns.formatNumber(ns.singularity.getAugmentationPrice(augName) + donation - ns.getServerMoneyAvailable(\\\"home\\\"), \\\"0.00a\\\")\\n\\t\\t\\tns.print(`Get ${totalMoneyReq} more money`)\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.print(\\\"need more favor with faction \\\" + factionName)\\n\\t}\\n}\\n\\nfunction getAvailWorkTypes(ns, faction) {\\n\\tlet currentWork = ns.singularity.getCurrentWork();\\n\\tlet availWorkTypes = []\\n\\tfor (let i of WorkTypes) {\\n\\t\\tif (ns.singularity.workForFaction(faction, i, false)) {\\n\\t\\t\\tavailWorkTypes.push(i)\\n\\t\\t}\\n\\t}\\n\\treturn availWorkTypes;\\n}\\n\\nexport function getBestWorkType(ns, factionName, player = ns.getPlayer(), availWorkTypes = WorkTypes) {\\n\\tlet bestRepGain = 0;\\n\\tlet bestWorkType = availWorkTypes[0]\\n\\tlet factionFavor = ns.singularity.getFactionFavor(factionName);\\n\\tfor (let i of availWorkTypes) {\\n\\t\\tlet fGains = ns.formulas.work.factionGains(player, i, factionFavor)\\n\\t\\t//ns.print(i,fGains)\\n\\t\\tif (fGains.reputation > bestRepGain) {\\n\\t\\t\\tbestRepGain = fGains.reputation;\\n\\t\\t\\tbestWorkType = i;\\n\\t\\t}\\n\\t}\\n\\treturn bestWorkType;\\n}\\n\\nexport const LocationFactions = [\\n\\t{ lName: \\\"Sector-12\\\", lFactions: [\\\"Sector-12\\\"] },\\n\\t{ lName: \\\"Aevum\\\", lFactions: [\\\"Aevum\\\"] },\\n\\t{ lName: \\\"Chongqing\\\", lFactions: [\\\"Chongqing\\\", \\\"Tian Di Hui\\\", \\\"Tetrads\\\"] },\\n\\t{ lName: \\\"Ishima\\\", lFactions: [\\\"Ishima\\\", , \\\"Tian Di Hui\\\", \\\"Tetrads\\\"] },\\n\\t{ lName: \\\"New Tokyo\\\", lFactions: [\\\"New Tokyo\\\", \\\"Tian Di Hui\\\", \\\"Tetrads\\\"] },\\n\\t{ lName: \\\"Volhaven\\\", lFactions: [\\\"Volhaven\\\"] }\\n]\\n\\nexport const HackFactions = [\\\"CyberSec\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\", \\\"BitRunners\\\"]\\nexport const CompanyFactions = [\\\"NWO\\\", \\\"OmniTek Incorporated\\\", \\\"KuaiGong International\\\", \\\"ECorp\\\", \\\"Bachman & Associates\\\", \\\"Four Sigma\\\", \\\"Clarke Incorporated\\\", \\\"Blade Industries\\\"];\\nexport const WorkTypes = [\\\"hacking\\\", \\\"field\\\", \\\"security\\\"]\\n\\nexport async function main(ns) {\\n\\tlet targets = HackFactions\\n\\tfor (let i of targets) {\\n\\t\\tns.print(await getInvite(ns, i));\\n\\t}\\n}\",\"filename\":\"bp3_helpers_factions.js\",\"server\":\"home\"}}],[\"bp3_data_servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport {LocationName} from \\\"bp3_data_locationNames.js\\\"\\nimport {LiteratureNames} from \\\"bp3_data_literatureNames.js\\\"\\nimport {FactionNames} from \\\"bp3_data_factions.js\\\"\\n\\nexport const SpecialServers= {\\n    Home: \\\"home\\\",\\n  FulcrumSecretTechnologies: \\\"fulcrumassets\\\",\\n  CyberSecServer: \\\"CSEC\\\",\\n  NiteSecServer: \\\"avmnite-02h\\\",\\n  TheBlackHandServer: \\\"I.I.I.I\\\",\\n  BitRunnersServer: \\\"run4theh111z\\\",\\n  TheDarkArmyServer: \\\".\\\",\\n  DaedalusServer: \\\"The-Cave\\\",\\n  WorldDaemon: \\\"w0r1d_d43m0n\\\",\\n  DarkWeb: \\\"darkweb\\\",\\n};\\n\\nexport const ServerMetadata = [\\n  {\\n    hackDifficulty: 99,\\n    hostname: LocationName.AevumECorp.toLowerCase(),\\n    moneyAvailable: {\\n      max: 70e9,\\n      min: 30e9,\\n    },\\n    networkLayer: 15,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumECorp,\\n    requiredHackingSkill: {\\n      max: 1400,\\n      min: 1050,\\n    },\\n    serverGrowth: 99,\\n    specialName: LocationName.AevumECorp,\\n  },\\n  {\\n    hackDifficulty: 99,\\n    hostname: LocationName.Sector12MegaCorp.toLowerCase(),\\n    moneyAvailable: {\\n      max: 60e9,\\n      min: 40e9,\\n    },\\n    networkLayer: 15,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.Sector12MegaCorp,\\n    requiredHackingSkill: {\\n      max: 1350,\\n      min: 1100,\\n    },\\n    serverGrowth: 99,\\n    specialName: LocationName.Sector12MegaCorp,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 88,\\n      min: 72,\\n    },\\n    hostname: \\\"b-and-a\\\",\\n    moneyAvailable: {\\n      max: 30e9,\\n      min: 15e9,\\n    },\\n    networkLayer: 14,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumBachmanAndAssociates,\\n    requiredHackingSkill: {\\n      max: 1150,\\n      min: 900,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 60,\\n    },\\n    specialName: LocationName.AevumBachmanAndAssociates,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 97,\\n      min: 88,\\n    },\\n    hostname: \\\"blade\\\",\\n    literature: [LiteratureNames.BeyondMan],\\n    maxRamExponent: {\\n      max: 9,\\n      min: 5,\\n    },\\n    moneyAvailable: {\\n      max: 40e9,\\n      min: 10e9,\\n    },\\n    networkLayer: 14,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.Sector12BladeIndustries,\\n    requiredHackingSkill: {\\n      max: 1200,\\n      min: 900,\\n    },\\n    serverGrowth: {\\n      max: 85,\\n      min: 55,\\n    },\\n    specialName: LocationName.Sector12BladeIndustries,\\n  },\\n  {\\n    hackDifficulty: 99,\\n    hostname: LocationName.VolhavenNWO.toLowerCase(),\\n    literature: [LiteratureNames.TheHiddenWorld],\\n    moneyAvailable: {\\n      max: 40e9,\\n      min: 20e9,\\n    },\\n    networkLayer: 14,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.VolhavenNWO,\\n    requiredHackingSkill: {\\n      max: 1300,\\n      min: 950,\\n    },\\n    serverGrowth: {\\n      max: 95,\\n      min: 65,\\n    },\\n    specialName: LocationName.VolhavenNWO,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 45,\\n    },\\n    hostname: \\\"clarkinc\\\",\\n    literature: [LiteratureNames.BeyondMan, LiteratureNames.CostOfImmortality],\\n    moneyAvailable: {\\n      max: 25e9,\\n      min: 15e9,\\n    },\\n    networkLayer: 14,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumClarkeIncorporated,\\n    requiredHackingSkill: {\\n      max: 1250,\\n      min: 950,\\n    },\\n    serverGrowth: {\\n      max: 75,\\n      min: 45,\\n    },\\n    specialName: LocationName.AevumClarkeIncorporated,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 99,\\n      min: 90,\\n    },\\n    hostname: \\\"omnitek\\\",\\n    literature: [LiteratureNames.CodedIntelligence, LiteratureNames.HistoryOfSynthoids],\\n    maxRamExponent: {\\n      max: 9,\\n      min: 7,\\n    },\\n    moneyAvailable: {\\n      max: 22e9,\\n      min: 13e9,\\n    },\\n    networkLayer: 13,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.VolhavenOmniTekIncorporated,\\n    requiredHackingSkill: {\\n      max: 1100,\\n      min: 900,\\n    },\\n    serverGrowth: {\\n      max: 99,\\n      min: 95,\\n    },\\n    specialName: LocationName.VolhavenOmniTekIncorporated,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 75,\\n      min: 55,\\n    },\\n    hostname: \\\"4sigma\\\",\\n    moneyAvailable: {\\n      max: 25e9,\\n      min: 15e9,\\n    },\\n    networkLayer: 13,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.Sector12FourSigma,\\n    requiredHackingSkill: {\\n      max: 1250,\\n      min: 900,\\n    },\\n    serverGrowth: {\\n      max: 99,\\n      min: 75,\\n    },\\n    specialName: LocationName.Sector12FourSigma,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 99,\\n      min: 95,\\n    },\\n    hostname: \\\"kuai-gong\\\",\\n    moneyAvailable: {\\n      max: 30e9,\\n      min: 20e9,\\n    },\\n    networkLayer: 13,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.ChongqingKuaiGongInternational,\\n    requiredHackingSkill: {\\n      max: 1300,\\n      min: 950,\\n    },\\n    serverGrowth: {\\n      max: 99,\\n      min: 90,\\n    },\\n    specialName: LocationName.ChongqingKuaiGongInternational,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 97,\\n      min: 83,\\n    },\\n    hostname: \\\"fulcrumtech\\\",\\n    literature: [LiteratureNames.SimulatedReality],\\n    maxRamExponent: {\\n      max: 11,\\n      min: 7,\\n    },\\n    moneyAvailable: {\\n      max: 1800e6,\\n      min: 1400e6,\\n    },\\n    networkLayer: 12,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumFulcrumTechnologies,\\n    requiredHackingSkill: {\\n      max: 1250,\\n      min: 950,\\n    },\\n    serverGrowth: {\\n      max: 99,\\n      min: 80,\\n    },\\n    specialName: LocationName.AevumFulcrumTechnologies,\\n  },\\n  {\\n    hackDifficulty: 99,\\n    hostname: \\\"fulcrumassets\\\",\\n    moneyAvailable: 1e6,\\n    networkLayer: 15,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumFulcrumTechnologies,\\n    requiredHackingSkill: {\\n      max: 1600,\\n      min: 1100,\\n    },\\n    serverGrowth: 1,\\n    specialName: SpecialServers.FulcrumSecretTechnologies,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 92,\\n      min: 78,\\n    },\\n    hostname: \\\"stormtech\\\",\\n    moneyAvailable: {\\n      max: 1200e6,\\n      min: 1000e6,\\n    },\\n    networkLayer: 12,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.IshimaStormTechnologies,\\n    requiredHackingSkill: {\\n      max: 1075,\\n      min: 875,\\n    },\\n    serverGrowth: {\\n      max: 92,\\n      min: 68,\\n    },\\n    specialName: LocationName.IshimaStormTechnologies,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 96,\\n      min: 84,\\n    },\\n    hostname: \\\"defcomm\\\",\\n    moneyAvailable: {\\n      max: 950e6,\\n      min: 800e6,\\n    },\\n    networkLayer: 9,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.NewTokyoDefComm,\\n    requiredHackingSkill: {\\n      max: 1050,\\n      min: 850,\\n    },\\n    serverGrowth: {\\n      max: 73,\\n      min: 47,\\n    },\\n    specialName: LocationName.NewTokyoDefComm,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 90,\\n      min: 70,\\n    },\\n    hostname: \\\"infocomm\\\",\\n    moneyAvailable: {\\n      max: 900e6,\\n      min: 600e6,\\n    },\\n    networkLayer: 10,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"InfoComm\\\",\\n    requiredHackingSkill: {\\n      max: 950,\\n      min: 875,\\n    },\\n    serverGrowth: {\\n      max: 75,\\n      min: 35,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 95,\\n      min: 85,\\n    },\\n    hostname: \\\"helios\\\",\\n    literature: [LiteratureNames.BeyondMan],\\n    maxRamExponent: {\\n      max: 8,\\n      min: 5,\\n    },\\n    moneyAvailable: {\\n      max: 750e6,\\n      min: 550e6,\\n    },\\n    networkLayer: 12,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.VolhavenHeliosLabs,\\n    requiredHackingSkill: {\\n      max: 900,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 70,\\n    },\\n    specialName: LocationName.VolhavenHeliosLabs,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 90,\\n      min: 80,\\n    },\\n    hostname: LocationName.NewTokyoVitaLife.toLowerCase(),\\n    literature: [LiteratureNames.AGreenTomorrow],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 800e6,\\n      min: 700e6,\\n    },\\n    networkLayer: 12,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.NewTokyoVitaLife,\\n    requiredHackingSkill: {\\n      max: 900,\\n      min: 775,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 60,\\n    },\\n    specialName: LocationName.NewTokyoVitaLife,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 95,\\n      min: 85,\\n    },\\n    hostname: \\\"icarus\\\",\\n    moneyAvailable: {\\n      max: 1000e6,\\n      min: 900e6,\\n    },\\n    networkLayer: 9,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.Sector12IcarusMicrosystems,\\n    requiredHackingSkill: {\\n      max: 925,\\n      min: 850,\\n    },\\n    serverGrowth: {\\n      max: 95,\\n      min: 85,\\n    },\\n    specialName: LocationName.Sector12IcarusMicrosystems,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 90,\\n      min: 80,\\n    },\\n    hostname: \\\"univ-energy\\\",\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 1200e6,\\n      min: 1100e6,\\n    },\\n    networkLayer: 9,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.Sector12UniversalEnergy,\\n    requiredHackingSkill: {\\n      max: 900,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 90,\\n      min: 80,\\n    },\\n    specialName: LocationName.Sector12UniversalEnergy,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 70,\\n    },\\n    hostname: \\\"titan-labs\\\",\\n    literature: [LiteratureNames.CodedIntelligence],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 900000000,\\n      min: 750000000,\\n    },\\n    networkLayer: 11,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Titan Laboratories\\\",\\n    requiredHackingSkill: {\\n      max: 875,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 60,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 75,\\n      min: 65,\\n    },\\n    hostname: \\\"microdyne\\\",\\n    literature: [LiteratureNames.SyntheticMuscles],\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 700000000,\\n      min: 500000000,\\n    },\\n    networkLayer: 11,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Microdyne Technologies\\\",\\n    requiredHackingSkill: {\\n      max: 875,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 90,\\n      min: 70,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 70,\\n    },\\n    hostname: \\\"taiyang-digital\\\",\\n    literature: [LiteratureNames.AGreenTomorrow, LiteratureNames.BrighterThanTheSun],\\n    moneyAvailable: {\\n      max: 900000000,\\n      min: 800000000,\\n    },\\n    networkLayer: 10,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Taiyang Digital\\\",\\n    requiredHackingSkill: {\\n      max: 950,\\n      min: 850,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 70,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 55,\\n    },\\n    hostname: \\\"galactic-cyber\\\",\\n    moneyAvailable: {\\n      max: 850000000,\\n      min: 750000000,\\n    },\\n    networkLayer: 7,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumGalacticCybersystems,\\n    requiredHackingSkill: {\\n      max: 875,\\n      min: 825,\\n    },\\n    serverGrowth: {\\n      max: 90,\\n      min: 70,\\n    },\\n    specialName: LocationName.AevumGalacticCybersystems,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 90,\\n      min: 80,\\n    },\\n    hostname: LocationName.AevumAeroCorp.toLowerCase(),\\n    literature: [LiteratureNames.ManAndMachine],\\n    moneyAvailable: {\\n      max: 1200000000,\\n      min: 1000000000,\\n    },\\n    networkLayer: 7,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.AevumAeroCorp,\\n    requiredHackingSkill: {\\n      max: 925,\\n      min: 850,\\n    },\\n    serverGrowth: {\\n      max: 65,\\n      min: 55,\\n    },\\n    specialName: LocationName.AevumAeroCorp,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 95,\\n      min: 85,\\n    },\\n    hostname: \\\"omnia\\\",\\n    literature: [LiteratureNames.HistoryOfSynthoids],\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 1000000000,\\n      min: 900000000,\\n    },\\n    networkLayer: 8,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.VolhavenOmniaCybersystems,\\n    requiredHackingSkill: {\\n      max: 950,\\n      min: 850,\\n    },\\n    serverGrowth: {\\n      max: 70,\\n      min: 60,\\n    },\\n    specialName: LocationName.VolhavenOmniaCybersystems,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 55,\\n    },\\n    hostname: \\\"zb-def\\\",\\n    literature: [LiteratureNames.SyntheticMuscles],\\n    moneyAvailable: {\\n      max: 1100000000,\\n      min: 900000000,\\n    },\\n    networkLayer: 10,\\n    numOpenPortsRequired: 4,\\n    organizationName: \\\"ZB Defense Industries\\\",\\n    requiredHackingSkill: {\\n      max: 825,\\n      min: 775,\\n    },\\n    serverGrowth: {\\n      max: 75,\\n      min: 65,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 60,\\n    },\\n    hostname: \\\"applied-energetics\\\",\\n    moneyAvailable: {\\n      max: 1000000000,\\n      min: 700000000,\\n    },\\n    networkLayer: 11,\\n    numOpenPortsRequired: 4,\\n    organizationName: \\\"Applied Energetics\\\",\\n    requiredHackingSkill: {\\n      max: 850,\\n      min: 775,\\n    },\\n    serverGrowth: {\\n      max: 75,\\n      min: 70,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 70,\\n    },\\n    hostname: \\\"solaris\\\",\\n    literature: [LiteratureNames.AGreenTomorrow, LiteratureNames.TheFailedFrontier],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 900000000,\\n      min: 700000000,\\n    },\\n    networkLayer: 9,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.ChongqingSolarisSpaceSystems,\\n    requiredHackingSkill: {\\n      max: 850,\\n      min: 750,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 70,\\n    },\\n    specialName: LocationName.ChongqingSolarisSpaceSystems,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 85,\\n      min: 75,\\n    },\\n    hostname: LocationName.Sector12DeltaOne.toLowerCase(),\\n    moneyAvailable: {\\n      max: 1700000000,\\n      min: 1300000000,\\n    },\\n    networkLayer: 8,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.Sector12DeltaOne,\\n    requiredHackingSkill: {\\n      max: 900,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 70,\\n      min: 50,\\n    },\\n    specialName: LocationName.Sector12DeltaOne,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 85,\\n      min: 75,\\n    },\\n    hostname: \\\"global-pharm\\\",\\n    literature: [LiteratureNames.AGreenTomorrow],\\n    maxRamExponent: {\\n      max: 6,\\n      min: 3,\\n    },\\n    moneyAvailable: {\\n      max: 1750000000,\\n      min: 1500000000,\\n    },\\n    networkLayer: 7,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.NewTokyoGlobalPharmaceuticals,\\n    requiredHackingSkill: {\\n      max: 850,\\n      min: 750,\\n    },\\n    serverGrowth: {\\n      max: 90,\\n      min: 80,\\n    },\\n    specialName: LocationName.NewTokyoGlobalPharmaceuticals,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 60,\\n    },\\n    hostname: \\\"nova-med\\\",\\n    moneyAvailable: {\\n      max: 1250000000,\\n      min: 1100000000,\\n    },\\n    networkLayer: 10,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.IshimaNovaMedical,\\n    requiredHackingSkill: {\\n      max: 850,\\n      min: 775,\\n    },\\n    serverGrowth: {\\n      max: 85,\\n      min: 65,\\n    },\\n    specialName: LocationName.IshimaNovaMedical,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 90,\\n      min: 70,\\n    },\\n    hostname: \\\"zeus-med\\\",\\n    moneyAvailable: {\\n      max: 1500000000,\\n      min: 1300000000,\\n    },\\n    networkLayer: 9,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Zeus Medical\\\",\\n    requiredHackingSkill: {\\n      max: 850,\\n      min: 800,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 70,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 70,\\n    },\\n    hostname: \\\"unitalife\\\",\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 1100000000,\\n      min: 1000000000,\\n    },\\n    networkLayer: 8,\\n    numOpenPortsRequired: 4,\\n    organizationName: \\\"UnitaLife Group\\\",\\n    requiredHackingSkill: {\\n      max: 825,\\n      min: 775,\\n    },\\n    serverGrowth: {\\n      max: 80,\\n      min: 70,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 60,\\n    },\\n    hostname: \\\"lexo-corp\\\",\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 800000000,\\n      min: 700000000,\\n    },\\n    networkLayer: 6,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.VolhavenLexoCorp,\\n    requiredHackingSkill: {\\n      max: 750,\\n      min: 650,\\n    },\\n    serverGrowth: {\\n      max: 65,\\n      min: 55,\\n    },\\n    specialName: LocationName.VolhavenLexoCorp,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 60,\\n      min: 40,\\n    },\\n    hostname: \\\"rho-construction\\\",\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 700000000,\\n      min: 500000000,\\n    },\\n    networkLayer: 6,\\n    numOpenPortsRequired: 3,\\n    organizationName: LocationName.AevumRhoConstruction,\\n    requiredHackingSkill: {\\n      max: 525,\\n      min: 475,\\n    },\\n    serverGrowth: {\\n      max: 60,\\n      min: 40,\\n    },\\n    specialName: LocationName.AevumRhoConstruction,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 70,\\n      min: 50,\\n    },\\n    hostname: \\\"alpha-ent\\\",\\n    literature: [LiteratureNames.Sector12Crime],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 750000000,\\n      min: 600000000,\\n    },\\n    networkLayer: 6,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.Sector12AlphaEnterprises,\\n    requiredHackingSkill: {\\n      max: 600,\\n      min: 500,\\n    },\\n    serverGrowth: {\\n      max: 60,\\n      min: 50,\\n    },\\n    specialName: LocationName.Sector12AlphaEnterprises,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 70,\\n    },\\n    hostname: \\\"aevum-police\\\",\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 400000000,\\n      min: 200000000,\\n    },\\n    networkLayer: 6,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.AevumPolice,\\n    requiredHackingSkill: {\\n      max: 450,\\n      min: 400,\\n    },\\n    serverGrowth: {\\n      max: 50,\\n      min: 30,\\n    },\\n    specialName: LocationName.AevumPolice,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 55,\\n      min: 45,\\n    },\\n    hostname: \\\"rothman-uni\\\",\\n    literature: [\\n      LiteratureNames.SecretSocieties,\\n      LiteratureNames.TheFailedFrontier,\\n      LiteratureNames.TensionsInTechRace,\\n    ],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 250000000,\\n      min: 175000000,\\n    },\\n    networkLayer: 5,\\n    numOpenPortsRequired: 3,\\n    organizationName: LocationName.Sector12RothmanUniversity,\\n    requiredHackingSkill: {\\n      max: 430,\\n      min: 370,\\n    },\\n    serverGrowth: {\\n      max: 45,\\n      min: 35,\\n    },\\n    specialName: LocationName.Sector12RothmanUniversity,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 85,\\n      min: 65,\\n    },\\n    hostname: \\\"zb-institute\\\",\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 1100000000,\\n      min: 800000000,\\n    },\\n    networkLayer: 5,\\n    numOpenPortsRequired: 5,\\n    organizationName: LocationName.VolhavenZBInstituteOfTechnology,\\n    requiredHackingSkill: {\\n      max: 775,\\n      min: 725,\\n    },\\n    serverGrowth: {\\n      max: 85,\\n      min: 75,\\n    },\\n    specialName: LocationName.VolhavenZBInstituteOfTechnology,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 45,\\n    },\\n    hostname: \\\"summit-uni\\\",\\n    literature: [LiteratureNames.SecretSocieties, LiteratureNames.TheFailedFrontier, LiteratureNames.SyntheticMuscles],\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 350000000,\\n      min: 200000000,\\n    },\\n    networkLayer: 5,\\n    numOpenPortsRequired: 3,\\n    organizationName: LocationName.AevumSummitUniversity,\\n    requiredHackingSkill: {\\n      max: 475,\\n      min: 425,\\n    },\\n    serverGrowth: {\\n      max: 60,\\n      min: 40,\\n    },\\n    specialName: LocationName.AevumSummitUniversity,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 60,\\n    },\\n    hostname: \\\"syscore\\\",\\n    moneyAvailable: {\\n      max: 600000000,\\n      min: 400000000,\\n    },\\n    networkLayer: 5,\\n    numOpenPortsRequired: 4,\\n    organizationName: LocationName.VolhavenSysCoreSecurities,\\n    requiredHackingSkill: {\\n      max: 650,\\n      min: 550,\\n    },\\n    serverGrowth: {\\n      max: 70,\\n      min: 60,\\n    },\\n    specialName: LocationName.VolhavenSysCoreSecurities,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 70,\\n      min: 60,\\n    },\\n    hostname: \\\"catalyst\\\",\\n    literature: [LiteratureNames.TensionsInTechRace],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: {\\n      max: 550000000,\\n      min: 300000000,\\n    },\\n    networkLayer: 5,\\n    numOpenPortsRequired: 3,\\n    organizationName: \\\"Catalyst Ventures\\\",\\n    requiredHackingSkill: {\\n      max: 450,\\n      min: 400,\\n    },\\n    serverGrowth: {\\n      max: 55,\\n      min: 25,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 45,\\n      min: 35,\\n    },\\n    hostname: \\\"the-hub\\\",\\n    maxRamExponent: {\\n      max: 6,\\n      min: 3,\\n    },\\n    moneyAvailable: {\\n      max: 200000000,\\n      min: 150000000,\\n    },\\n    networkLayer: 4,\\n    numOpenPortsRequired: 2,\\n    organizationName: \\\"The Hub\\\",\\n    requiredHackingSkill: {\\n      max: 325,\\n      min: 275,\\n    },\\n    serverGrowth: {\\n      max: 55,\\n      min: 45,\\n    },\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 55,\\n    },\\n    hostname: LocationName.VolhavenCompuTek.toLowerCase(),\\n    literature: [LiteratureNames.ManAndMachine],\\n    moneyAvailable: {\\n      max: 250000000,\\n      min: 220000000,\\n    },\\n    networkLayer: 4,\\n    numOpenPortsRequired: 3,\\n    organizationName: LocationName.VolhavenCompuTek,\\n    requiredHackingSkill: {\\n      max: 400,\\n      min: 300,\\n    },\\n    serverGrowth: {\\n      max: 65,\\n      min: 45,\\n    },\\n    specialName: LocationName.VolhavenCompuTek,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 80,\\n      min: 60,\\n    },\\n    hostname: \\\"netlink\\\",\\n    literature: [LiteratureNames.SimulatedReality],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: 275000000,\\n    networkLayer: 4,\\n    numOpenPortsRequired: 3,\\n    organizationName: LocationName.AevumNetLinkTechnologies,\\n    requiredHackingSkill: {\\n      max: 425,\\n      min: 375,\\n    },\\n    serverGrowth: {\\n      max: 75,\\n      min: 45,\\n    },\\n    specialName: LocationName.AevumNetLinkTechnologies,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 35,\\n    },\\n    hostname: \\\"johnson-ortho\\\",\\n    moneyAvailable: {\\n      max: 85000000,\\n      min: 70000000,\\n    },\\n    networkLayer: 4,\\n    numOpenPortsRequired: 2,\\n    organizationName: \\\"Johnson Orthopedics\\\",\\n    requiredHackingSkill: {\\n      max: 300,\\n      min: 250,\\n    },\\n    serverGrowth: {\\n      max: 65,\\n      min: 35,\\n    },\\n  },\\n  {\\n    hackDifficulty: 1,\\n    hostname: \\\"n00dles\\\",\\n    literature: [],\\n    maxRamExponent: 2,\\n    moneyAvailable: 70000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: LocationName.NewTokyoNoodleBar,\\n    requiredHackingSkill: 1,\\n    serverGrowth: 3000,\\n    specialName: LocationName.NewTokyoNoodleBar,\\n  },\\n  {\\n    hackDifficulty: 10,\\n    hostname: LocationName.Sector12FoodNStuff.toLowerCase(),\\n    literature: [LiteratureNames.Sector12Crime],\\n    maxRamExponent: 4,\\n    moneyAvailable: 2000000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: LocationName.Sector12FoodNStuff,\\n    requiredHackingSkill: 1,\\n    serverGrowth: 5,\\n    specialName: LocationName.Sector12FoodNStuff,\\n  },\\n  {\\n    hackDifficulty: 10,\\n    hostname: \\\"sigma-cosmetics\\\",\\n    maxRamExponent: 4,\\n    moneyAvailable: 2300000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: \\\"Sigma Cosmetics\\\",\\n    requiredHackingSkill: 5,\\n    serverGrowth: 10,\\n  },\\n  {\\n    hackDifficulty: 15,\\n    hostname: \\\"joesguns\\\",\\n    maxRamExponent: 4,\\n    moneyAvailable: 2500000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: LocationName.Sector12JoesGuns,\\n    requiredHackingSkill: 10,\\n    serverGrowth: 20,\\n    specialName: LocationName.Sector12JoesGuns,\\n  },\\n  {\\n    hackDifficulty: 25,\\n    hostname: \\\"zer0\\\",\\n    maxRamExponent: 5,\\n    moneyAvailable: 7500000,\\n    networkLayer: 2,\\n    numOpenPortsRequired: 1,\\n    organizationName: \\\"ZER0 Nightclub\\\",\\n    requiredHackingSkill: 75,\\n    serverGrowth: 40,\\n  },\\n  {\\n    hackDifficulty: 20,\\n    hostname: \\\"nectar-net\\\",\\n    maxRamExponent: 4,\\n    moneyAvailable: 2750000,\\n    networkLayer: 2,\\n    numOpenPortsRequired: 0,\\n    organizationName: \\\"Nectar Nightclub Network\\\",\\n    requiredHackingSkill: 20,\\n    serverGrowth: 25,\\n  },\\n  {\\n    hackDifficulty: 25,\\n    hostname: \\\"neo-net\\\",\\n    literature: [LiteratureNames.TheHiddenWorld],\\n    maxRamExponent: 5,\\n    moneyAvailable: 5000000,\\n    networkLayer: 3,\\n    numOpenPortsRequired: 1,\\n    organizationName: \\\"Neo Nightclub Network\\\",\\n    requiredHackingSkill: 50,\\n    serverGrowth: 25,\\n  },\\n  {\\n    hackDifficulty: 30,\\n    hostname: \\\"silver-helix\\\",\\n    literature: [LiteratureNames.NewTriads],\\n    maxRamExponent: 6,\\n    moneyAvailable: 45000000,\\n    networkLayer: 3,\\n    numOpenPortsRequired: 2,\\n    organizationName: \\\"Silver Helix\\\",\\n    requiredHackingSkill: 150,\\n    serverGrowth: 30,\\n  },\\n  {\\n    hackDifficulty: 15,\\n    hostname: \\\"hong-fang-tea\\\",\\n    literature: [LiteratureNames.BrighterThanTheSun],\\n    maxRamExponent: 4,\\n    moneyAvailable: 3000000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: \\\"HongFang Teahouse\\\",\\n    requiredHackingSkill: 30,\\n    serverGrowth: 20,\\n  },\\n  {\\n    hackDifficulty: 15,\\n    hostname: \\\"harakiri-sushi\\\",\\n    maxRamExponent: 4,\\n    moneyAvailable: 4000000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 0,\\n    organizationName: \\\"HaraKiri Sushi Bar Network\\\",\\n    requiredHackingSkill: 40,\\n    serverGrowth: 40,\\n  },\\n  {\\n    hackDifficulty: 20,\\n    hostname: \\\"phantasy\\\",\\n    maxRamExponent: 5,\\n    moneyAvailable: 24000000,\\n    networkLayer: 3,\\n    numOpenPortsRequired: 2,\\n    organizationName: \\\"Phantasy Club\\\",\\n    requiredHackingSkill: 100,\\n    serverGrowth: 35,\\n  },\\n  {\\n    hackDifficulty: 15,\\n    hostname: \\\"max-hardware\\\",\\n    maxRamExponent: 5,\\n    moneyAvailable: 10000000,\\n    networkLayer: 2,\\n    numOpenPortsRequired: 1,\\n    organizationName: \\\"Max Hardware Store\\\",\\n    requiredHackingSkill: 80,\\n    serverGrowth: 30,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 35,\\n      min: 25,\\n    },\\n    hostname: \\\"omega-net\\\",\\n    literature: [LiteratureNames.TheNewGod],\\n    maxRamExponent: 5,\\n    moneyAvailable: {\\n      max: 70000000,\\n      min: 60000000,\\n    },\\n    networkLayer: 3,\\n    numOpenPortsRequired: 2,\\n    organizationName: LocationName.IshimaOmegaSoftware,\\n    requiredHackingSkill: {\\n      max: 220,\\n      min: 180,\\n    },\\n    serverGrowth: {\\n      max: 40,\\n      min: 30,\\n    },\\n    specialName: LocationName.IshimaOmegaSoftware,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 45,\\n      min: 35,\\n    },\\n    hostname: \\\"crush-fitness\\\",\\n    moneyAvailable: {\\n      max: 60000000,\\n      min: 40000000,\\n    },\\n    networkLayer: 4,\\n    numOpenPortsRequired: 2,\\n    organizationName: \\\"Crush Fitness\\\",\\n    requiredHackingSkill: {\\n      max: 275,\\n      min: 225,\\n    },\\n    serverGrowth: {\\n      max: 33,\\n      min: 27,\\n    },\\n    specialName: LocationName.AevumCrushFitnessGym,\\n  },\\n  {\\n    hackDifficulty: 30,\\n    hostname: \\\"iron-gym\\\",\\n    maxRamExponent: 5,\\n    moneyAvailable: 20000000,\\n    networkLayer: 1,\\n    numOpenPortsRequired: 1,\\n    organizationName: `${LocationName.Sector12IronGym} Network`,\\n    requiredHackingSkill: 100,\\n    serverGrowth: 20,\\n    specialName: LocationName.Sector12IronGym,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 55,\\n      min: 45,\\n    },\\n    hostname: \\\"millenium-fitness\\\",\\n    maxRamExponent: {\\n      max: 8,\\n      min: 4,\\n    },\\n    moneyAvailable: 250000000,\\n    networkLayer: 6,\\n    numOpenPortsRequired: 3,\\n    organizationName: \\\"Millenium Fitness Network\\\",\\n    requiredHackingSkill: {\\n      max: 525,\\n      min: 475,\\n    },\\n    serverGrowth: {\\n      max: 45,\\n      min: 25,\\n    },\\n    specialName: LocationName.VolhavenMilleniumFitnessGym,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 65,\\n      min: 55,\\n    },\\n    hostname: \\\"powerhouse-fitness\\\",\\n    maxRamExponent: {\\n      max: 6,\\n      min: 4,\\n    },\\n    moneyAvailable: 900000000,\\n    networkLayer: 14,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Powerhouse Fitness\\\",\\n    requiredHackingSkill: {\\n      max: 1100,\\n      min: 950,\\n    },\\n    serverGrowth: {\\n      max: 60,\\n      min: 50,\\n    },\\n    specialName: LocationName.Sector12PowerhouseGym,\\n  },\\n  {\\n    hackDifficulty: {\\n      max: 60,\\n      min: 40,\\n    },\\n    hostname: \\\"snap-fitness\\\",\\n    moneyAvailable: 450000000,\\n    networkLayer: 7,\\n    numOpenPortsRequired: 4,\\n    organizationName: \\\"Snap Fitness\\\",\\n    requiredHackingSkill: {\\n      max: 800,\\n      min: 675,\\n    },\\n    serverGrowth: {\\n      max: 60,\\n      min: 40,\\n    },\\n    specialName: LocationName.AevumSnapFitnessGym,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"run4theh111z\\\",\\n    literature: [LiteratureNames.SimulatedReality, LiteratureNames.TheNewGod],\\n    maxRamExponent: {\\n      max: 9,\\n      min: 5,\\n    },\\n    moneyAvailable: 0,\\n    networkLayer: 11,\\n    numOpenPortsRequired: 4,\\n    organizationName: FactionNames.BitRunners,\\n    requiredHackingSkill: {\\n      max: 550,\\n      min: 505,\\n    },\\n    serverGrowth: 0,\\n    specialName: SpecialServers.BitRunnersServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"I.I.I.I\\\",\\n    literature: [LiteratureNames.DemocracyIsDead],\\n    maxRamExponent: {\\n      max: 8,\\n      min: 4,\\n    },\\n    moneyAvailable: 0,\\n    networkLayer: 5,\\n    numOpenPortsRequired: 3,\\n    organizationName: FactionNames.TheBlackHand,\\n    requiredHackingSkill: {\\n      max: 365,\\n      min: 340,\\n    },\\n    serverGrowth: 0,\\n    specialName: SpecialServers.TheBlackHandServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"avmnite-02h\\\",\\n    literature: [LiteratureNames.DemocracyIsDead],\\n    maxRamExponent: {\\n      max: 7,\\n      min: 4,\\n    },\\n    moneyAvailable: 0,\\n    networkLayer: 4,\\n    numOpenPortsRequired: 2,\\n    organizationName: FactionNames.NiteSec,\\n    requiredHackingSkill: {\\n      max: 220,\\n      min: 202,\\n    },\\n    serverGrowth: 0,\\n    specialName: SpecialServers.NiteSecServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\".\\\",\\n    maxRamExponent: 4,\\n    moneyAvailable: 0,\\n    networkLayer: 13,\\n    numOpenPortsRequired: 4,\\n    organizationName: \\\".\\\",\\n    requiredHackingSkill: {\\n      max: 550,\\n      min: 505,\\n    },\\n    serverGrowth: 0,\\n    specialName: SpecialServers.TheDarkArmyServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"CSEC\\\",\\n    literature: [LiteratureNames.DemocracyIsDead],\\n    maxRamExponent: 3,\\n    moneyAvailable: 0,\\n    networkLayer: 2,\\n    numOpenPortsRequired: 1,\\n    organizationName: FactionNames.CyberSec,\\n    requiredHackingSkill: {\\n      max: 60,\\n      min: 51,\\n    },\\n    serverGrowth: 0,\\n    specialName: SpecialServers.CyberSecServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"The-Cave\\\",\\n    literature: [LiteratureNames.AlphaOmega],\\n    moneyAvailable: 0,\\n    networkLayer: 15,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"Helios\\\",\\n    requiredHackingSkill: 925,\\n    serverGrowth: 0,\\n    specialName: SpecialServers.DaedalusServer,\\n  },\\n  {\\n    hackDifficulty: 0,\\n    hostname: \\\"w0r1d_d43m0n\\\",\\n    moneyAvailable: 0,\\n    numOpenPortsRequired: 5,\\n    organizationName: \\\"w0r1d_d43m0n\\\",\\n    requiredHackingSkill: 3000,\\n    serverGrowth: 0,\\n    specialName: SpecialServers.WorldDaemon,\\n  },\\n  {\\n    hostname: SpecialServers.DarkWeb,\\n    moneyAvailable: 0,\\n    numOpenPortsRequired: 5,\\n    organizationName: SpecialServers.DarkWeb,\\n    requiredHackingSkill: 1,\\n    specialName: SpecialServers.DarkWeb,\\n  },\\n];\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_servers.js\",\"server\":\"home\"}}],[\"bp3_data_locationNames.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport const LocationName = {\\n\\tAevumAeroCorp : \\\"AeroCorp\\\",\\n\\tAevumBachmanAndAssociates : \\\"Bachman & Associates\\\",\\n\\tAevumClarkeIncorporated : \\\"Clarke Incorporated\\\",\\n\\tAevumCrushFitnessGym : \\\"Crush Fitness Gym\\\",\\n\\tAevumECorp : \\\"ECorp\\\",\\n\\tAevumFulcrumTechnologies : \\\"Fulcrum Technologies\\\",\\n\\tAevumGalacticCybersystems : \\\"Galactic Cybersystems\\\",\\n\\tAevumNetLinkTechnologies : \\\"NetLink Technologies\\\",\\n\\tAevumPolice : \\\"Aevum Police Headquarters\\\",\\n\\tAevumRhoConstruction : \\\"Rho Construction\\\",\\n\\tAevumSnapFitnessGym : \\\"Snap Fitness Gym\\\",\\n\\tAevumSummitUniversity : \\\"Summit University\\\",\\n\\tAevumWatchdogSecurity : \\\"Watchdog Security\\\",\\n\\tAevumCasino : \\\"Iker Molina Casino\\\",\\n\\n\\tChongqingKuaiGongInternational : \\\"KuaiGong International\\\",\\n\\tChongqingSolarisSpaceSystems : \\\"Solaris Space Systems\\\",\\n\\tChongqingChurchOfTheMachineGod : \\\"Church of the Machine God\\\",\\n\\n\\tSector12AlphaEnterprises : \\\"Alpha Enterprises\\\",\\n\\tSector12BladeIndustries : \\\"Blade Industries\\\",\\n\\tSector12CIA : \\\"Central Intelligence Agency\\\",\\n\\tSector12CarmichaelSecurity : \\\"Carmichael Security\\\",\\n\\tSector12CityHall : \\\"Sector-12 City Hall\\\",\\n\\tSector12DeltaOne : \\\"DeltaOne\\\",\\n\\tSector12FoodNStuff : \\\"FoodNStuff\\\",\\n\\tSector12FourSigma : \\\"Four Sigma\\\",\\n\\tSector12IcarusMicrosystems : \\\"Icarus Microsystems\\\",\\n\\tSector12IronGym : \\\"Iron Gym\\\",\\n\\tSector12JoesGuns : \\\"Joe's Guns\\\",\\n\\tSector12MegaCorp : \\\"MegaCorp\\\",\\n\\tSector12NSA : \\\"National Security Agency\\\",\\n\\tSector12PowerhouseGym : \\\"Powerhouse Gym\\\",\\n\\tSector12RothmanUniversity : \\\"Rothman University\\\",\\n\\tSector12UniversalEnergy : \\\"Universal Energy\\\",\\n\\n\\tNewTokyoDefComm : \\\"DefComm\\\",\\n\\tNewTokyoGlobalPharmaceuticals : \\\"Global Pharmaceuticals\\\",\\n\\tNewTokyoNoodleBar : \\\"Noodle Bar\\\",\\n\\tNewTokyoVitaLife : \\\"VitaLife\\\",\\n\\tNewTokyoArcade : \\\"Arcade\\\",\\n\\n\\tIshimaNovaMedical : \\\"Nova Medical\\\",\\n\\tIshimaOmegaSoftware : \\\"Omega Software\\\",\\n\\tIshimaStormTechnologies : \\\"Storm Technologies\\\",\\n\\tIshimaGlitch : \\\"0x6C1\\\",\\n\\n\\tVolhavenCompuTek : \\\"CompuTek\\\",\\n\\tVolhavenHeliosLabs : \\\"Helios Labs\\\",\\n\\tVolhavenLexoCorp : \\\"LexoCorp\\\",\\n\\tVolhavenMilleniumFitnessGym : \\\"Millenium Fitness Gym\\\",\\n\\tVolhavenNWO : \\\"NWO\\\",\\n\\tVolhavenOmniTekIncorporated : \\\"OmniTek Incorporated\\\",\\n\\tVolhavenOmniaCybersystems : \\\"Omnia Cybersystems\\\",\\n\\tVolhavenSysCoreSecurities : \\\"SysCore Securities\\\",\\n\\tVolhavenZBInstituteOfTechnology : \\\"ZB Institute of Technology\\\",\\n\\n\\tHospital : \\\"Hospital\\\",\\n\\tSlums : \\\"The Slums\\\",\\n\\tTravelAgency : \\\"Travel Agency\\\",\\n\\tWorldStockExchange : \\\"World Stock Exchange\\\",\\n\\n\\tVoid : \\\"The Void\\\"\\n}\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_locationNames.js\",\"server\":\"home\"}}],[\"bp3_helpers_terminal.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {getRootAccess,startFindPath} from \\\"bp3_helpers_servers.js\\\"\\n\\nexport async function connectToServerAndHack(ns, target) {\\n\\tns.print(\\\"Start connectToServarAndHack \\\",target)\\n\\tgetRootAccess(ns, target)\\n\\tif (ns.getServerRequiredHackingLevel(target) < ns.getHackingLevel()) {\\n\\t\\tlet results = startFindPath(ns, target);\\n\\t\\tfor (let i of results) {\\n\\t\\t\\tns.singularity.connect(i);\\n\\t\\t}\\n\\t\\tns.tprint(await ns.hack(target));\\n\\t\\tawait ns.sleep(20000);\\n\\t}\\n\\tns.singularity.connect(\\\"home\\\");\\n}\\n\\nexport async function connectToServerAndBackdoor(ns, target) {\\n\\tns.print(\\\"Start connectToServarAndBackdoor \\\",target)\\n\\tgetRootAccess(ns, target)\\n\\tif (ns.getServerRequiredHackingLevel(target) < ns.getHackingLevel()) {\\n\\t\\tlet results = startFindPath(ns, target);\\n\\t\\tfor (let i of results) {\\n\\t\\t\\tns.singularity.connect(i);\\n\\t\\t}\\n\\t\\tns.tprint(await ns.singularity.installBackdoor(target));\\n\\t}\\n\\tns.singularity.connect(\\\"home\\\");\\n}\\n\\nexport async function main(ns) {\\n\\t\\n}\",\"filename\":\"bp3_helpers_terminal.js\",\"server\":\"home\"}}],[\"bp3_data_factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport const FactionNames = {\\n\\tIlluminati: \\\"Illuminati\\\",\\n\\tDaedalus: \\\"Daedalus\\\",\\n\\tTheCovenant: \\\"The Covenant\\\",\\n\\tECorp: \\\"ECorp\\\",\\n\\tMegaCorp: \\\"MegaCorp\\\",\\n\\tBachmanAssociates: \\\"Bachman & Associates\\\",\\n\\tBladeIndustries: \\\"Blade Industries\\\",\\n\\tNWO: \\\"NWO\\\",\\n\\tClarkeIncorporated: \\\"Clarke Incorporated\\\",\\n\\tOmniTekIncorporated: \\\"OmniTek Incorporated\\\",\\n\\tFourSigma: \\\"Four Sigma\\\",\\n\\tKuaiGongInternational: \\\"KuaiGong International\\\",\\n\\tFulcrumSecretTechnologies: \\\"Fulcrum Secret Technologies\\\",\\n\\tBitRunners: \\\"BitRunners\\\",\\n\\tTheBlackHand: \\\"The Black Hand\\\",\\n\\tNiteSec: \\\"NiteSec\\\",\\n\\tAevum: \\\"Aevum\\\",\\n\\tChongqing: \\\"Chongqing\\\",\\n\\tIshima: \\\"Ishima\\\",\\n\\tNewTokyo: \\\"New Tokyo\\\",\\n\\tSector12: \\\"Sector-12\\\",\\n\\tVolhaven: \\\"Volhaven\\\",\\n\\tSpeakersForTheDead: \\\"Speakers for the Dead\\\",\\n\\tTheDarkArmy: \\\"The Dark Army\\\",\\n\\tTheSyndicate: \\\"The Syndicate\\\",\\n\\tSilhouette: \\\"Silhouette\\\",\\n\\tTetrads: \\\"Tetrads\\\",\\n\\tSlumSnakes: \\\"Slum Snakes\\\",\\n\\tNetburners: \\\"Netburners\\\",\\n\\tTianDiHui: \\\"Tian Di Hui\\\",\\n\\tCyberSec: \\\"CyberSec\\\",\\n\\tBladeburners: \\\"Bladeburners\\\",\\n\\tChurchOfTheMachineGod: \\\"Church of the Machine God\\\",\\n\\tShadowsOfAnarchy: \\\"Shadows of Anarchy\\\",\\n}\\n\\nexport const CorpFactions = [\\t\\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\",\\\"NWO\\\", \\\"Clarke Incorporated\\\",\\\"OmniTek Incorporated\\\",\\\"Four Sigma\\\",\\\"KuaiGong International\\\"]\\n\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_factions.js\",\"server\":\"home\"}}],[\"bp3_data_literatureNames.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport const LiteratureNames = {\\n  HackersStartingHandbook : \\\"hackers-starting-handbook.lit\\\",\\n  CorporationManagementHandbook : \\\"corporation-management-handbook.lit\\\",\\n  HistoryOfSynthoids : \\\"history-of-synthoids.lit\\\",\\n  AGreenTomorrow : \\\"A-Green-Tomorrow.lit\\\",\\n  AlphaOmega : \\\"alpha-omega.lit\\\",\\n  SimulatedReality : \\\"simulated-reality.lit\\\",\\n  BeyondMan : \\\"beyond-man.lit\\\",\\n  BrighterThanTheSun : \\\"brighter-than-the-sun.lit\\\",\\n  DemocracyIsDead : \\\"democracy-is-dead.lit\\\",\\n  Sector12Crime : \\\"sector-12-crime.lit\\\",\\n  ManAndMachine : \\\"man-and-machine.lit\\\",\\n  SecretSocieties : \\\"secret-societies.lit\\\",\\n  TheFailedFrontier : \\\"the-failed-frontier.lit\\\",\\n  CodedIntelligence : \\\"coded-intelligence.lit\\\",\\n  SyntheticMuscles : \\\"synthetic-muscles.lit\\\",\\n  TensionsInTechRace : \\\"tensions-in-tech-race.lit\\\",\\n  CostOfImmortality : \\\"cost-of-immortality.lit\\\",\\n  TheHiddenWorld : \\\"the-hidden-world.lit\\\",\\n  TheNewGod : \\\"the-new-god.lit\\\",\\n  NewTriads : \\\"new-triads.lit\\\",\\n  TheSecretWar : \\\"the-secret-war.lit\\\",\\n}\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_literatureNames.js\",\"server\":\"home\"}}],[\"bp3_player_workForFaction.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport { getBestWorkType, WorkTypes } from \\\"bp3_helpers_factions.js\\\"\\n\\nfunction getAvailWorkTypes(ns, faction) {\\n\\tlet availWorkTypes = []\\n\\tfor (let i of WorkTypes) {\\n\\t\\tif (ns.singularity.workForFaction(faction, i, false)) {\\n\\t\\t\\tavailWorkTypes.push(i)\\n\\t\\t}\\n\\t}\\n\\treturn availWorkTypes;\\n}\\n\\nexport async function main(ns) {\\n\\tlet faction = ns.args[0];\\n\\tlet workType = ns.args[1];\\n\\tlet goal = ns.args[2];\\n\\tlet factionRep = ns.singularity.getFactionRep(faction);\\n\\twhile (factionRep < goal) {\\n\\t\\tlet availWorkTypes = getAvailWorkTypes(ns, faction);\\n\\t\\tlet current = ns.singularity.getCurrentWork()\\n\\t\\tif (current === null) {\\n\\n\\t\\t\\tns.singularity.workForFaction(faction, getBestWorkType(ns, faction, ns.getPlayer(), availWorkTypes), false)\\n\\t\\t} else if (current.type === \\\"FACTION\\\" && current.factionName === faction && current.factionWorkType === workType) {\\n\\t\\t} else if (current.type === \\\"CRIME\\\") {\\n\\t\\t} else {\\n\\t\\t\\tavailWorkTypes = getAvailWorkTypes(ns, faction);\\n\\t\\t\\tns.print(\\\"p_wfF bestWorkType \\\",getBestWorkType(ns, faction, ns.getPlayer(), availWorkTypes))\\n\\t\\t\\tlet bestWorkType = getBestWorkType(ns, faction, ns.getPlayer(), );\\n\\t\\t\\tns.singularity.workForFaction(faction, bestWorkType, false)\\n\\t\\t}\\n\\t\\tawait ns.sleep(60000);\\n\\t\\tfactionRep = ns.singularity.getFactionRep(faction);\\n\\t\\tns.print(\\\"Faction Rep: \\\" + ns.formatNumber(factionRep, \\\"0.00a\\\"));\\n\\t}\\n\\tns.tprint(\\\"Goal of \\\" + ns.formatNumber(goal, \\\"0.00a\\\") + \\\" reached for \\\" + faction)\\n\\tns.exec(\\\"bp3_player_manager.js\\\", \\\"home\\\");\\n}\",\"filename\":\"bp3_player_workForFaction.js\",\"server\":\"home\"}}],[\"bp3_progress_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\twhile (true) {\\n\\t\\tns.exec(\\\"bp3_servers_upgradeHome.js\\\", \\\"home\\\");\\n\\t\\tns.exec(\\\"bp3_progress_tor.js\\\", \\\"home\\\");\\n\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\tif (ns.getHackingLevel() > 10) {\\n\\t\\t\\tns.exec(\\\"bp3_hacking_allInOne.js\\\", \\\"home\\\", { preventDuplicates: true },true);\\n\\t\\t} else {\\n\\t\\t\\tns.exec(\\\"bp3_player_university.js\\\", \\\"home\\\", { preventDuplicates: true }, 59)\\n\\t\\t}\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 26e6) {\\n\\t\\t\\tns.exec(\\\"bp3_pservers_mgr.js\\\", \\\"home\\\", { preventDuplicates: true });\\n\\t\\t}\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 50e6 && ns.stock.has4SDataTIXAPI()) {\\n\\t\\t\\tns.exec(\\\"bp3_stock_start.js\\\", \\\"home\\\", { preventDuplicates: true });\\n\\t\\t}\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 40e9 && !ns.stock.has4SDataTIXAPI()) {\\n\\t\\t\\tns.exec(\\\"bp3_stock_start.js\\\", \\\"home\\\", { preventDuplicates: true });\\n\\t\\t}\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 150e9 && !ns.corporation.hasCorporation()) {\\n\\t\\t\\tns.exec(\\\"bp3_corp_start.js\\\", \\\"home\\\", { preventDuplicates: true });\\n\\t\\t}\\n\\t\\tif(ns.getHackingLevel()>2500) {\\n\\t\\t\\tns.exec(\\\"bp3_player_manager.js\\\",\\\"home\\\",{preventDuplicates:true})\\n\\t\\t}\\n\\t\\tif(ns.singularity.getOwnedAugmentations().indexOf(\\\"The Red Pill\\\")>-1 && ns.getHackingLevel()>6000) {\\n\\t\\t\\tns.exec(\\\"bp3_progress_endBitnode.js\\\")\\n\\t\\t}\\n\\t\\tawait ns.sleep(60000)\\n\\t}\\n\\n}\",\"filename\":\"bp3_progress_manager.js\",\"server\":\"home\"}}],[\"bp3_servers_upgradeHome.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tif (ns.getServerUsedRam(\\\"home\\\") / ns.getServerMaxRam(\\\"home\\\") > .5) {\\n\\t\\tlet cost = ns.singularity.getUpgradeHomeRamCost();\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.singularity.getUpgradeHomeRamCost()) {\\n\\t\\t\\tif (ns.singularity.upgradeHomeRam()) {\\n\\t\\t\\t\\tns.tprint(\\\"Upgraded home to \\\" + ns.getServerMaxRam(\\\"home\\\")+\\\" for \\\"+cost)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bp3_servers_upgradeHome.js\",\"server\":\"home\"}}],[\"bp3_progress_programming.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction hasProgram(ns, program) {\\n\\tlet exes = ns.ls(\\\"home\\\", \\\".exe\\\");\\n\\tif (exes.indexOf(program) < 0) {\\n\\t\\treturn false\\n\\t}\\n\\treturn true;\\n}\\n\\nexport async function main(ns) {\\n\\tlet programs = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"]\\n\\tlet programHackLevels = [59, 300, 400, 500, 714]\\n\\tfor (let i of programs) {\\n\\t\\tlet program = i;\\n\\t\\tlet programReqHackingGoal = programHackLevels[programs.indexOf(program)];\\n\\t\\tlet hProgram = hasProgram(ns, program)\\n\\n\\t\\tlet lProgram = program.toLowerCase();\\n\\t\\twhile (hProgram === false) {\\n\\t\\t\\tif (hasProgram(ns, lProgram) === false && ns.getHackingLevel() > programReqHackingGoal) {\\n\\t\\t\\t\\tif (ns.hasTorRouter() === false) {\\n\\t\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 200000) {\\n\\t\\t\\t\\t\\t\\tns.singularity.purchaseTor();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ns.singularity.getDarkwebProgramCost(lProgram) < ns.getServerMoneyAvailable(\\\"home\\\") && ns.hasTorRouter() === true) {\\n\\t\\t\\t\\t\\tns.singularity.purchaseProgram(lProgram);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.singularity.createProgram(lProgram, true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\thProgram = hasProgram(ns, program)\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bp3_progress_programming.js\",\"server\":\"home\"}}],[\"bp3_player_university.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet goal = ns.args[0] || 59;\\n\\twhile (true) {\\n\\t\\tns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Algorithms\\\",false);\\n\\n\\n\\t\\tawait ns.sleep(1000)\\n\\t\\tif (ns.getHackingLevel() > goal) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tns.tprint(\\\"Hacking level goal met \\\") + goal\\n\\tns.spawn(\\\"bp3_player_manager.js\\\")\\n}\",\"filename\":\"bp3_player_university.js\",\"server\":\"home\"}}],[\"bp3_player_workForCompany.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet company = ns.args[0];\\n\\tlet goal = ns.args[1] || 400000;\\n\\twhile (true) {\\n\\t\\tif (ns.singularity.getCompanyRep(company) > goal) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tns.singularity.workForCompany(company, false);\\n\\n\\t\\tawait ns.sleep(60000)\\n\\t}\\n\\tns.tprint(\\\"Achieved company \\\" + company + \\\" work goal of \\\" + goal)\\n\\tns.exec(\\\"bp3_player_manager.js\\\",\\\"home\\\");\\n}\",\"filename\":\"bp3_player_workForCompany.js\",\"server\":\"home\"}}],[\"i3_customStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nfunction moneyInfo(ns) {\\n\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\")\\n\\tns.print(\\\"Money \\\" + ns.formatNumber(money, \\\"0.00a\\\"));\\n\\n\\treturn money\\n}\\n\\nfunction stocksInfo(ns) {\\n\\tlet syms = ns.stock.getSymbols();\\n\\tlet stockWorth = 0;\\n\\tfor (let i of syms) {\\n\\t\\tlet pos = ns.stock.getPosition(i)\\n\\t\\tstockWorth = stockWorth + pos[0] * pos[1] + pos[2] * pos[3];\\n\\t}\\n\\tns.print(\\\"Stockworth: \\\" + ns.formatNumber(stockWorth, \\\"0.00a\\\"))\\n\\treturn stockWorth\\n}\\n\\nfunction networthInfo(ns) {\\n\\t\\tlet money = moneyInfo(ns);\\n\\tlet stocks = stocksInfo(ns);\\n\\tlet networth = money + stocks;\\n\\treturn networth\\n}\\n\\nfunction homeRamInfo(ns) {\\n    let homeRam = ns.getServerMaxRam(\\\"home\\\");\\n    return homeRam;\\n}\\n\\n\\nexport async function main(ns) {\\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    const hook2 = doc.getElementById('overview-extra-hook-2');\\n\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"StocksValue\\\");\\n            values.push(ns.formatNumber(stocksInfo(ns),\\\"0.00a\\\"));\\n            // Add script exp gain rate per second\\n            headers.push(\\\"Networth\\\");\\n            values.push(ns.formatNumber(networthInfo(ns),\\\"0.00a\\\"));\\n            // TODO: Add more neat stuff\\n            headers.push(\\\"homeRam\\\");\\n            values.push(ns.formatNumber(homeRamInfo(ns),\\\"0.00a\\\"));\\n\\n\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n   }\",\"filename\":\"i3_customStats.js\",\"server\":\"home\"}}],[\"bp3_hacking_batchDaemon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\";\\n\\nexport function getRunningManagers(ns, script = \\\"bp3_hacking_manager.js\\\") {\\n    let net = hServers.networkScan(ns)\\n    let runningManagers = [];\\n    for (let i of net) {\\n        for (let j of net) {\\n            if (ns.isRunning(script, i, j))\\n                runningManagers.push(j);\\n        }\\n    }\\n    return runningManagers;\\n}\\n\\nexport function getMaxThreads(ns, hostServer, script, scriptHost) {\\n    //\\tns.print(\\\"getMaxThreads: \\\" + hostServer)\\n    let maxRam = ns.getServerMaxRam(hostServer);\\n    let scriptRam = ns.getScriptRam(script, scriptHost);\\n    let maxThreads = Math.floor(maxRam / scriptRam);\\n    return maxThreads;\\n}\\n\\nexport function distributeThreads(ns, script, hostList, totalThreads, target, action, batch) {\\n    hostList.sort((a, b) => hServers.getServerFreeRam(ns, b) - hServers.getServerFreeRam(ns, a));\\n    let remainingThreads = Math.ceil(totalThreads);\\n    for (let k of hostList) {\\n        if (remainingThreads > 0) {\\n            let hostMaxThreads = getMaxThreads(ns, k, script, k);\\n            let hostThreads = Math.min(hostMaxThreads, remainingThreads);\\n            //\\tns.print(k + \\\" \\\" + hostThreads + \\\" \\\" + target)\\n            ns.print(target,action,batch);\\n            if (ns.exec(script, k, hostThreads, target, action, batch)) {\\n                remainingThreads = remainingThreads - hostThreads;\\n            }\\n        }\\n    }\\n    return remainingThreads;\\n}\\n\\nexport function getMaxBatchThreads(ns, target) {\\n    let serv = ns.getServer(target);\\n    let hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n    let secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n    let wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1));\\n    let gThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n    let wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1));\\n    return [hThreads + wThreadsHack + gThreads + wThreadsGrow, minSec(ns, target), maxMoney(ns, target)];\\n}\\n\\nexport async function scpHackingScripts(ns, destinationList) {\\n    let scripts = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\"]\\n    let scriptHost = \\\"home\\\";\\n    for (let i of destinationList) {\\n        let destination = i;\\n        await ns.scp(scripts, destination, scriptHost);\\n    }\\n}\\n\\nexport function getWeakenThreads(ns, target) {\\n    return Math.ceil(secDecreaseRequired(ns, target) / ns.weakenAnalyze(1));\\n\\n}\\n\\nexport function getMaxGrowthPercent(ns, target) {\\n    return ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + .00001);\\n}\\n\\nexport function getGrowThreads(ns, target, growthPercent) {\\n    return Math.ceil(ns.growthAnalyze(target, growthPercent));\\n}\\n\\nexport function getHackThreads(ns, target, moneyGoal) {\\n    let threads = ns.hackAnalyzeThreads(target, moneyGoal);\\n    ns.print(\\\"hacking threads for money goal: \\\" + threads + \\\" for \\\" + ns.nFormat(moneyGoal, \\\"0.00a\\\"));\\n    return threads;\\n}\\n\\nexport function minSec(ns, target) {\\n    if (ns.getServerSecurityLevel(target) <= ns.getServerMinSecurityLevel(target) * 1.05) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\nexport function maxMoney(ns, target) {\\n    if (ns.getServerMoneyAvailable(target) === ns.getServerMaxMoney(target)) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\nexport function secDecreaseRequired(ns, target) {\\n    return ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n}\\n\\nexport function hackableMoney(ns, target) {\\n    let avail = ns.getServerMoneyAvailable(target);\\n    let moneyThresh = ns.getServerMaxMoney(target) / 2;\\n    return avail - moneyThresh;\\n}\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nexport function getHackScripts(eventList) {\\n    let scriptList = [];\\n    for (let i of eventList) {\\n        scriptList.push(EVENT_LIST[EVENT_LIST.map(function (el) { return el.action }).indexOf(i)].script);\\n    }\\n    return scriptList;\\n}\\n\\nexport function scheduleEvents(ns, target, eventList = [\\\"h\\\", \\\"w1\\\", \\\"g\\\", \\\"w2\\\"], batchName, batchStart) {\\n    let events = [];\\n    for (let i of eventList) {\\n        events.push({ n: i, nScript: \\\"\\\", nStart: 0, nDur: 0, nEnd: 0, nThreads: 0, nBName: batchName, nBStart:batchStart, nBEnd:0 })\\n    }\\n    events = updateScripts(events, getHackScripts(eventList));\\n    events = updateTimes(ns, events, target);\\n    events = updateThreads(ns, events, target);\\n    ns.print(\\\"sort end\\\");\\n    events.sort((a, b) => a.nEnd - b.nEnd);\\n    ns.print(events);\\n\\n    ns.print(\\\"sort start\\\");\\n    events.sort((a, b) => a.nStart - b.nStart);\\n    ns.print(events);\\n    return events;\\n}\\n\\nexport function getActionList(ns,target) {\\n    let actionList = [];\\n    if(ns.getServerMoneyAvailable(target) === ns.getServerMaxMoney(target) ) {\\n        actionList.push(\\\"h\\\");\\n    }\\n    actionList.push(\\\"w1\\\");\\n    if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        actionList.push(\\\"g\\\",\\\"w2\\\");\\n    }\\n}\\n\\nexport function updateScripts(events, eventScripts = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"]) {\\n    for (let i in events) {\\n        events[i].nScript = eventScripts[i];\\n    }\\n    return events\\n}\\n\\nexport function getActionTimes(ns, target, events) {\\n    let actionTimes = [];\\n    let actionList = events.map(function (el) { return el.n })\\n    for (let action of actionList) {\\n        switch (action) {\\n            case \\\"h\\\":\\n                actionTimes.push(ns.getHackTime(target));\\n                break;\\n            case \\\"w1\\\":\\n                actionTimes.push(ns.getWeakenTime(target));\\n                break;\\n            case \\\"g\\\":\\n                actionTimes.push(ns.getGrowTime(target));\\n                break;\\n            case \\\"w2\\\":\\n                actionTimes.push(ns.getWeakenTime(target));\\n                break;\\n        }\\n    }\\n    return actionTimes\\n}\\n\\nexport function updateTimes(ns, events, target) {\\n    let eventTimes = getActionTimes(ns, target, events);\\n    for (let i in events) {\\n        events[i].nDur = eventTimes[i];\\n    }\\n    let maxDur = Math.max.apply(Math, events.map(function (el) { return el.nDur })) + 8000;\\n    let endBatch = Math.max.apply(Math, events.map(function (el) { return el.nDur })) + 2000;\\n    for (let i in events) {\\n        events[i].nEnd = maxDur - (events.length - i) * 2000;\\n        events[i].nStart = events[i].nEnd - events[i].nDur;\\n    }\\n    return events;\\n}\\n\\nexport function updateThreads(ns, events, target, scriptList = [\\\"bp3_hack.js\\\", \\\"bp3_weaken.js\\\", \\\"bp3_grow.js\\\"]) {\\n    let availThreads = Math.floor(hServers.getNetworkRamAvailable(ns, false) / getMaxScriptRam(ns, scriptList) * .95);\\n    let hThreads = 0;\\n    let hWThreads = 0;\\n    let gThreads = 0;\\n    let gWThreads = 0;\\n    let gPerc = 1.05 * ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)\\n    if (hackableMoney(ns, target) > 0) {\\n        hThreads = getHackThreads(ns, target, hackableMoney(ns, target));\\n        ns.print(\\\"% hacked with single thread on target: \\\" + ns.hackAnalyze(target) + \\\" \\\" + target);\\n        hWThreads = hThreads * .002 / .05;\\n        ns.print(\\\"sec inc hack: \\\" + ns.hackAnalyzeSecurity(hThreads))\\n        let hackedAmount = ns.hackAnalyze(target) * ns.getServerMoneyAvailable(target) * hThreads;\\n        gPerc = 1.05 * ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) - hackedAmount)\\n        gThreads = getGrowThreads(ns, target, gPerc);\\n        ns.print(\\\"sec inc grow: \\\" + ns.growthAnalyzeSecurity(gThreads))\\n        gWThreads = gThreads * .004 / .05 * 1.05;\\n        ns.print(\\\"weaken per thread: \\\" + ns.weakenAnalyze(1, 1));\\n    } else {\\n        hWThreads = secDecreaseRequired(ns, target) / .05;\\n        if (ns.getServerMoneyAvailable(target) === 0) {\\n            gThreads = 1;\\n        } else {\\n            gThreads = getGrowThreads(ns, target, gPerc);\\n        }\\n        gWThreads = gThreads * .004 / .05 * 1.05;\\n    }\\n    let tThreads = hThreads + hWThreads + gThreads + gWThreads;\\n    let threadSet = [Math.floor(hThreads), Math.ceil(hWThreads), Math.ceil(gThreads), Math.ceil(gWThreads)]\\n    ns.print(\\\"total batch threads: \\\" + tThreads);\\n    ns.print(\\\"network Threads Avail: \\\" + availThreads)\\n    if (tThreads > availThreads) {\\n        let hRatio = hThreads / tThreads;\\n        let hWRatio = hWThreads / tThreads;\\n        let gRatio = gThreads / tThreads;\\n        let gWRatio = gWThreads / tThreads;\\n        threadSet = [Math.floor(availThreads * hRatio), Math.ceil(availThreads * hWRatio), Math.ceil(availThreads * gRatio), Math.ceil(availThreads * gWRatio)]\\n    }\\n    let eventThreadSet = getEventThreadSet(ns, threadSet, events);\\n    for (let i in events) {\\n        ns.print(events[i].n, \\\" \\\", events[i].nThreads, \\\" \\\", threadSet[i], \\\" \\\", Math.floor(events[i].nStart), \\\" \\\", Math.floor(events[i].nDur), \\\" \\\", Math.floor(events[i].nEnd));\\n        events[i].nThreads = eventThreadSet[i];\\n    }\\n    return events;\\n}\\n\\nexport function getEventThreadSet(ns, threadSet, events) {\\n    let actionThreadsList = [\\n        { action: \\\"h\\\", threads: threadSet[0] },\\n        { action: \\\"w1\\\", threads: threadSet[1] },\\n        { action: \\\"g\\\", threads: threadSet[2] },\\n        { action: \\\"w2\\\", threads: threadSet[3] },\\n    ]\\n    let actionThreads = [];\\n    let actionList = actionThreadsList.map(function (el) { return el.action })\\n    for (let i of events) {\\n        actionThreads.push(actionThreadsList[actionList.indexOf(i.n)].threads);\\n    }\\n    return actionThreads\\n}\\n\\nexport function getMaxScriptRam(ns, scriptList) {\\n    let maxRam = 0;\\n    for (let i of scriptList) {\\n        let sRam = ns.getScriptRam(i, \\\"home\\\");\\n        if (sRam > maxRam) {\\n            maxRam = sRam;\\n        }\\n    }\\n    return maxRam;\\n}\\n\\nexport async function launchScripts(ns, eventSchedule, target) {\\n    ns.print(\\\"Launch Start\\\");\\n    let prevTime = Date.now();\\n    let maxDur = Math.max.apply(Math, eventSchedule.map(function (el) { return el.nDur })) + 8000;\\n    let finalSleep = maxDur - eventSchedule[eventSchedule.length - 1].nEnd + 2000;\\n    for (let i = 0; i < eventSchedule.length; i++) {\\n        //       ns.print(eventSchedule[i]);\\n        let hostServers = hServers.getAvailableHostServers(ns, false, ns.getScriptRam(eventSchedule[i].nScript, \\\"home\\\"));\\n        if (eventSchedule.nScript === \\\"bp3_hack.js\\\" && (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) / 2)) {\\n            let sleepTime = 0;\\n            if (i === 0) {\\n                sleepTime = eventSchedule[i].nStart;\\n            } else {\\n                sleepTime = eventSchedule[i].nStart - eventSchedule[i - 1].nStart;\\n            }\\n            ns.print(\\\"sleeping for \\\" + sleepTime);\\n            await ns.sleep(sleepTime)\\n            //       printServerStatus(ns, target);\\n        } else {\\n            let sleepTime = 0;\\n            if (i === 0) {\\n                sleepTime = eventSchedule[i].nStart;\\n            } else {\\n                sleepTime = eventSchedule[i].nStart - eventSchedule[i - 1].nStart;\\n            }\\n            let mSec = minSec(ns,target);\\n            while(!mSec) {\\n                for(let j of eventSchedule) {\\n                    j.nStart=j.nStart +2000;\\n                    j.nEnd = j.nEnd + 2000;\\n                }\\n                await ns.sleep(2000);\\n                mSec = minSec(ns,target);\\n            }\\n            ns.print(\\\"sleeping for \\\" + sleepTime);\\n            await ns.sleep(sleepTime)\\n            ns.print(\\\"Distributing: \\\" + eventSchedule[i].n, \\\" \\\", eventSchedule[i].nThreads, \\\" \\\", Math.floor(eventSchedule[i].nStart), \\\" \\\", Math.floor(eventSchedule[i].nDur), \\\" \\\", Math.floor(eventSchedule[i].nEnd));\\n            distributeThreads(ns, eventSchedule[i].nScript, hostServers, eventSchedule[i].nThreads, target, eventSchedule[i].n, eventSchedule[i].nBName)\\n            let currentTime = Date.now();\\n            let elapsedTime = currentTime - prevTime;\\n            ns.print(elapsedTime);\\n            ns.print(\\\"secDif \\\" + (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)));\\n            prevTime = currentTime;\\n            //     printServerStatus(ns, target);\\n        }\\n    }\\n    ns.print(\\\"sleeping for \\\" + finalSleep);\\n    await ns.sleep(finalSleep);\\n}\\n\\nexport function printServerStatus(ns, target) {\\n    ns.print(\\\"secDif \\\" + (ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)));\\n    ns.print(\\\"money perc in dec \\\" + ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target));\\n}\\n\\nexport const EVENT_LIST = [{ action: \\\"h\\\", script: \\\"bp3_hack.js\\\" }, { action: \\\"w1\\\", script: \\\"bp3_weaken.js\\\" }, { action: \\\"g\\\", script: \\\"bp3_grow.js\\\" }, { action: \\\"w2\\\", script: \\\"bp3_weaken.js\\\" }]\\n\\n\\n\\n\\n\\n\\nexport async function main(ns) {\\n\\n//batch management per target\\n//schedule up to 3 batches\\n//when 1 batch ends, schedule next batch\\n\\n\\n\\n\\n\\n}\",\"filename\":\"bp3_hacking_batchDaemon.js\",\"server\":\"home\"}}],[\"bp3_augs_purchase.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\";\\nimport { purchaseAugs } from \\\"bp3_helpers_purchase.js\\\"\\n\\n\\n\\n\\nexport async function main(ns) {\\n\\tlet stats = hAugs.AllStats;\\n//\\tlet stats = hAugs.HackStats.concat(hAugs.RepStats);\\n\\tlet augsWHacking = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWHacking = hAugs.addUtilsToWantedList(ns, augsWHacking);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet sList = hAugs.getShoppingList(ns, augsWHacking);\\n\\n\\tsList.sort((a, b) => b.aPrice - a.aPrice);\\n\\n\\tpurchaseAugs(ns, sList);\\n\\n\\tstats = hAugs.CombatStats;\\n\\taugsWHacking = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWHacking = hAugs.addUtilsToWantedList(ns, augsWHacking);\\n\\n\\trepAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tsList = hAugs.getShoppingList(ns, augsWHacking);\\n\\n\\tsList.sort((a, b) => b.aPrice - a.aPrice);\\n\\n\\n\\n\\t//get wanted augs list\\n\\t//set money available\\n\\t////get most score for money\\n\\t//////prereqs\\n\\t//////rep achievable\\n\\n\\n\\n\\n\\n\\n\\n}\",\"filename\":\"bp3_augs_purchase.js\",\"server\":\"home\"}}],[\"bp3_helpers_corp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\";\\nimport { FactionNames } from \\\"bp3_data_factions.js\\\"\\nimport * as dCorp from \\\"bp3_data_corporation.js\\\"\\n\\n\\n// =======Corp Start=========\\nexport function createCorp(ns) {\\n\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > 150e9) {\\n\\t\\tns.corporation.createCorporation(CorpName, true);\\n\\t}\\n}\\n\\nexport function getFunds(ns) {\\n\\tlet funds = ns.corporation.getCorporation().funds;\\n\\treturn funds\\n}\\n\\nexport function expandDivision(ns, divType, divName) {\\n\\tlet existingDivs = ns.corporation.getCorporation().divisions;\\n\\tif (existingDivs.map(function (el) { return ns.corporation.getDivision(el).type }).includes(divType)) {\\n\\t\\tns.print(divType + \\\"division \\\" + divName + \\\" already exists\\\")\\n\\t\\treturn false;\\n\\t} else {\\n\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getIndustryData(divType).startingCost) {\\n\\t\\t\\tns.print(\\\"Expanding to industry \\\"+divType)\\n\\t\\t\\tns.corporation.expandIndustry(divType, divName);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function hireToMax(ns, div, city) {\\n\\tlet office = ns.corporation.getOffice(div, city)\\n\\tlet hireQty = office.size - office.numEmployees\\n\\tif (hireQty > 0) {\\n\\t\\tfor (let i = 0; i < hireQty; i++)\\n\\t\\t\\tns.corporation.hireEmployee(div, city)\\n\\t}\\n}\\n\\nexport function getJobAssignmentSet(ns, div, city, spread) {\\n\\tlet jobAssigns = [];\\n\\tlet office = ns.corporation.getOffice(div, city)\\n\\tlet numEmp = office.numEmployees;\\n\\tlet distTot = spread.reduce((acc, curr) => acc + curr, 0);\\n\\tlet unemployed = getUnemployed(ns, div, city)\\n\\n\\tfor (let i in Jobs) {\\n\\t\\tjobAssigns.push(\\n\\t\\t\\t{\\n\\t\\t\\t\\tjobName: Jobs[i],\\n\\t\\t\\t\\tcurrentEmps: office.employeeJobs[Jobs[i]],\\n\\t\\t\\t\\tgoalEmps: Math.floor(spread[i] / distTot * numEmp),\\n\\t\\t\\t\\tdiff: Math.floor(spread[i] / distTot * numEmp) - office.employeeJobs[Jobs[i]]\\n\\t\\t\\t}\\n\\t\\t)\\n\\t\\tunemployed = unemployed + jobAssigns[i].diff\\n\\t}\\n\\n\\tif (unemployed > 0) {\\n\\t\\tjobAssigns.jobName[\\\"Interns\\\"][goalEmps] = jobAssigns.jobName[\\\"Interns\\\"][goalEmps] + unemployed\\n\\t}\\n\\tns.print(jobAssigns)\\n\\tns.print(\\\"first\\\")\\n\\tns.print(jobAssigns[0])\\n\\tjobAssigns.sort((a, b) => jobAssigns[a].diff - jobAssigns[b].diff);\\n\\treturn jobAssigns;\\n}\\n\\nexport async function assignJobs(ns, div, city, spread = JobDistEven) {\\n\\thireToMax(ns, div, city)\\n\\tlet waitTime = 10000;\\n\\tif (ns.corporation.getBonusTime() > 50000) {\\n\\t\\twaitTime = 1000;\\n\\t}\\n\\tlet numEmp = ns.corporation.getOffice(div, city).numEmployees\\n\\tif (numEmp < 4) {\\n\\t\\tspread = JobDistStart;\\n\\t}\\n\\tlet distTot = spread.reduce((acc, curr) => acc + curr, 0);\\n\\t//down to 0\\n\\n\\tlet assign = Math.floor(1 / distTot * numEmp)\\n\\n\\tlet job = [Jobs[0]]\\n\\n\\tjob = Jobs[5]\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.ceil(numEmp / 8)\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\n\\tlet salaried = ns.corporation.getOffice(div, city).numEmployees - ns.corporation.getOffice(div,city).employeeJobs[Jobs[5]];\\n\\tjob = Jobs[0]\\n\\tassign = Math.floor(1/5*salaried)\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.min(Math.floor(1 / distTot * numEmp), ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"])\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\n\\tsalaried = ns.corporation.getOffice(div, city).numEmployees - ns.corporation.getOffice(div,city).employeeJobs[Jobs[5]];\\n\\tjob = Jobs[1]\\n\\tassign = Math.floor(1/5*salaried)\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.min(Math.floor(1 / distTot * numEmp), ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"])\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\n\\tsalaried = ns.corporation.getOffice(div, city).numEmployees - ns.corporation.getOffice(div,city).employeeJobs[Jobs[5]];\\n\\tjob = Jobs[3]\\n\\tassign = Math.floor(1/5*salaried)\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.min(Math.floor(1 / distTot * numEmp), ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"])\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\n\\t\\tsalaried = ns.corporation.getOffice(div, city).numEmployees - ns.corporation.getOffice(div,city).employeeJobs[Jobs[5]];\\n\\tjob = Jobs[2]\\n\\tassign = Math.floor(1/5*salaried)\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.min(Math.floor(1 / distTot * numEmp), ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"])\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\t\\n\\tsalaried = ns.corporation.getOffice(div, city).numEmployees - ns.corporation.getOffice(div,city).employeeJobs[Jobs[5]];\\n\\tjob = Jobs[4]\\n\\tassign = Math.floor(1/5*salaried)\\n\\tif (assign !== ns.corporation.getOffice(div, city).employeeJobs[job]) {\\n\\t\\tassign = Math.min(Math.floor(1 / distTot * numEmp), ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"])\\n\\t\\tif (ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"] >= assign - ns.corporation.getOffice(div, city).employeeJobs[job] || ns.corporation.getOffice(div, city).employeeJobs[job] < assign) {\\n\\t\\t\\tawait ns.corporation.setAutoJobAssignment(div, city, job, assign)\\n\\t\\t\\tawait ns.sleep(waitTime);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function assignAllJobs(ns) {\\n\\tlet corp = ns.corporation.getCorporation();\\n\\tlet divs = corp.divisions\\n\\tfor (let i of divs) {\\n\\t\\tlet cities = ns.corporation.getDivision(i).cities\\n\\t\\tfor (let j of cities) {\\n\\t\\t\\tawait assignJobs(ns, i, j, JobDistEven)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function upgradeOffice(ns, div, city, goalEmps) {\\n\\tlet office = ns.corporation.getOffice(div, city)\\n\\tif (office.size >= goalEmps) {\\n\\t\\treturn;\\n\\t} else {\\n\\t\\tlet exp = Math.min(getMaxHire(ns, div, city), goalEmps - office.size)\\n\\n\\t\\tif (isFinite(exp) && exp > 0) {\\n\\t\\t\\tns.print(\\\"expanding office \\\",div,\\\" \\\",city)\\n\\t\\t\\tns.corporation.upgradeOfficeSize(div, city, exp)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function hireAndAssign(ns, div, city, goalEmps, distribution = [1, 1, 1, 1, 1, 1]) {\\n\\tupgradeOffice(ns, div, city, goalEmps)\\n\\thireToMax(ns, div, city)\\n\\tawait assignJobs(ns, div, city, distribution)\\n}\\n\\nexport function getUnemployed(ns, div, city) {\\n\\tlet unemployed = ns.corporation.getOffice(div, city).employeeJobs[\\\"Unassigned\\\"];\\n\\treturn unemployed;\\n}\\n\\nexport function getMaxHire(ns, div, city) {\\n\\tlet funds = ns.corporation.getCorporation().funds\\n\\tlet cost = ns.corporation.getOfficeSizeUpgradeCost(div, city, 1);\\n\\tlet maxEmps = 6;\\n\\twhile (funds > cost) {\\n\\t\\tcost = ns.corporation.getOfficeSizeUpgradeCost(div, city, maxEmps);\\n\\t\\tmaxEmps = maxEmps + 6;\\n\\t\\tif (maxEmps >= 300) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tmaxEmps = maxEmps - 12\\n\\treturn maxEmps\\n}\\n\\nexport function startWarehouse(ns, division, city) {\\n\\tns.print(\\\"Has warehouse? \\\" + division + city + ns.corporation.hasWarehouse(division, city))\\n\\tif (ns.corporation.hasWarehouse(division, city) === false) {\\n\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getConstants().warehouseInitialCost) {\\n\\t\\t\\tns.print(\\\"Purchasing warehouse for \\\" + division + \\\" \\\" + city)\\n\\t\\t\\tns.corporation.purchaseWarehouse(division, city);\\n\\t\\t}\\n\\t}\\n}\\n\\n\\nexport async function expandCityStaffWarehouse(ns, division) {\\n\\tns.print(\\\"ExpandCityStaffWarehouse\\\")\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let i of DivCities) {\\n\\t\\tif (!existingCities.includes(i)) {\\n\\t\\t\\tns.print(\\\"expanding to city \\\"+division+i)\\n\\t\\t\\tns.corporation.expandCity(division, i);\\n\\t\\t\\texistingCities.push(i);\\n\\t\\t}\\n\\t}\\n\\texistingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let j of existingCities) {\\n\\t\\tawait hireAndAssign(ns, division, j, 6, JobDistEven);\\n\\t\\tstartWarehouse(ns, division, j)\\n\\t\\tenableSmartSupply(ns, division, j);\\n\\t\\tsetSellAtMP(ns, division, j)\\n\\t\\tupgradeStorage(ns, division, j, 300);\\n\\t}\\n}\\n\\nexport function setSellAtMP(ns, division, city) {\\n\\tns.print(\\\"Set sell at MP materials\\\")\\n\\tif (ns.corporation.getCorporation().divisions.indexOf(division) > -1) {\\n\\t\\tif (ns.corporation.getDivision(division).cities.indexOf(city) > -1) {\\n\\t\\t\\tlet materials = MaterialNames.filter(el => ns.corporation.getMaterial(division, city, el).productionAmount > 0);\\n\\t\\t\\tns.print(materials);\\n\\t\\t\\tif (materials.length > 0) {\\n\\t\\t\\t\\tfor (let i of materials) {\\n\\t\\t\\t\\t\\tns.print(\\\"Setting sell material \\\" + i + city)\\n\\t\\t\\t\\t\\tns.corporation.sellMaterial(division, city, i, \\\"MAX\\\", \\\"MP\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function updateMaterialPrices(ns, div, city) {\\n\\tif (ns.corporation.hasWarehouse(div, city)) {\\n\\t\\tlet saleableMaterials = AgricultureSellMats;\\n\\t\\tfor (let j of saleableMaterials) {\\n\\t\\t\\tlet materialData = ns.corporation.getMaterial(div, city, j)\\n\\t\\t\\tlet currentPrice = materialData.desiredSellPrice;\\n\\t\\t\\tlet onHand = materialData.stored;\\n\\t\\t\\tlet productionQty = materialData.productionAmount\\n\\t\\t\\tlet price = 1;\\n\\t\\t\\tif (isNaN(currentPrice)) {\\n\\t\\t\\t\\tif (currentPrice === \\\"MP\\\") {\\n\\t\\t\\t\\t\\tprice = 1\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tprice = Number(currentPrice.split('MP*')[1]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tlet exportQty = 0;\\n\\t\\t\\tfor (let k of materialData.exports) {\\n\\t\\t\\t\\texportQty = exportQty + k.amount;\\n\\t\\t\\t}\\n\\t\\t\\tlet wh = ns.corporation.getWarehouse(div, city);\\n\\t\\t\\tns.print(\\\"Mat \\\" + j)\\n\\t\\t\\tns.print(\\\"sell \\\" + materialData.actualSellAmount)\\n\\t\\t\\tns.print(\\\"prod \\\" + materialData.productionAmount)\\n\\t\\t\\tns.print(\\\"exp \\\" + exportQty);\\n\\t\\t\\tns.print(\\\"oldPrice \\\" + price)\\n\\t\\t\\tns.print(wh.sizeUsed + \\\" / \\\" + wh.size);\\n\\t\\t\\tif (materialData.actualSellAmount + exportQty < (materialData.productionAmount) * .95) {\\n\\t\\t\\t\\tprice = price * .9\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprice = price * 1.1\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.corporation.getWarehouse(div, city).sizeUsed >= ns.corporation.getWarehouse(div, city).size * .8) {\\n\\t\\t\\t\\tprice = price * .9\\n\\t\\t\\t}\\n\\t\\t\\tns.print(\\\"updated price \\\" + price)\\n\\t\\t\\tif (price < 1) { price = 1 };\\n\\t\\t\\tns.corporation.sellMaterial(div, city, j, \\\"MAX\\\", \\\"MP*\\\" + price, false)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function warehouseMonitor(ns) {\\n\\tlet corp = ns.corporation.getCorporation(ns);\\n\\tlet mats = [];\\n\\tfor (let i of corp.divisions) {\\n\\t\\tlet div = i;\\n\\t\\tlet cities = ns.corporation.getDivision(div).cities;\\n\\t\\tfor (let j of cities) {\\n\\t\\t\\tlet city = j;\\n\\t\\t\\tif (ns.corporation.hasWarehouse(div, city)) {\\n\\t\\t\\t\\tlet wh = ns.corporation.getWarehouse(div, city)\\n\\n\\t\\t\\t\\tfor (let k of MaterialNames) {\\n\\t\\t\\t\\t\\tlet mat = ns.corporation.getMaterial(div, city, k);\\n\\t\\t\\t\\t\\tmats.push([i, j, k, mat.stored, mat.actualSellAmount, mat.actualSellAmount, mat.exports.amount, wh.sizeUsed, wh.size])\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfor (let m of mats) {\\n\\t\\tif (m[3] > 0)\\n\\t\\t\\tns.print(m);\\n\\t}\\n}\\n\\nexport function setAllExportIProd(ns) {\\n\\tlet divisions = ns.corporation.getCorporation().divisions;\\n\\tfor (let i of divisions) {\\n\\t\\tif (ns.corporation.getCorporation().divisions.indexOf(i) > -1) {\\n\\t\\t\\tlet cities = ns.corporation.getDivision(i).cities;\\n\\n\\t\\t\\tfor (let j of cities) {\\n\\t\\t\\t\\tif (ns.corporation.getDivision(i).cities.indexOf(j) > -1) {\\n\\t\\t\\t\\t\\tfor (let k of ExportMap) {\\n\\t\\t\\t\\t\\t\\tlet divs = ns.corporation.getCorporation().divisions\\n\\t\\t\\t\\t\\t\\tif (divs.indexOf(k.expDiv) > -1 && divs.indexOf(k.impDiv) > -1) {\\n\\t\\t\\t\\t\\t\\t\\tlet expCities = ns.corporation.getDivision(k.expDiv).cities\\n\\t\\t\\t\\t\\t\\t\\tlet impCities = ns.corporation.getDivision(k.impDiv).cities\\n\\t\\t\\t\\t\\t\\t\\tif (expCities.indexOf(k.expCity > -1) && impCities.indexOf(k.impCity > -1)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!exportExistsCheck(ns, k.expDiv, j, k.impDiv, j, k.material))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tns.corporation.exportMaterial(k.expDiv, j, k.impDiv, j, k.material, \\\"IPROD*(-1)\\\");\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function exportExistsCheck(ns, expDiv, expCity, impDiv, impCity, material) {\\n\\tlet divs = ns.corporation.getCorporation().divisions\\n\\tif (divs.indexOf(expDiv) > -1 && divs.indexOf(impDiv) > -1) {\\n\\t\\tlet expCities = ns.corporation.getDivision(expDiv).cities\\n\\t\\tlet impCities = ns.corporation.getDivision(impDiv).cities\\n\\t\\tif (expCities.indexOf(expCity > -1) && impCities.indexOf(impCity > -1)) {\\n\\t\\t\\tlet matExp = ns.corporation.getMaterial(expDiv, expCity, material).exports;\\n\\t\\t\\tif (matExp.length > 0) {\\n\\t\\t\\t\\tfor (let i of matExp) {\\n\\t\\t\\t\\t\\tif (i.city === impCity && i.division === impDiv) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function upgradeStorage(ns, division, city, goal) {\\n\\tlet warehouse = ns.corporation.getWarehouse(division, city);\\n\\tlet sizeInc = (goal - warehouse.size);\\n\\tif (sizeInc > 0) {\\n\\t\\tlet numUpgrades = Math.ceil((sizeInc) / (100 + 10 * ns.corporation.getUpgradeLevel(\\\"Smart Storage\\\")))\\n\\t\\tlet cost = ns.corporation.getUpgradeWarehouseCost(division, city, numUpgrades)\\n\\t\\tif (getFunds(ns) > cost) {\\n\\t\\t\\tns.print(\\\"upgradeStorage: Upgrading Warehouse \\\" + division, city, numUpgrades)\\n\\t\\t\\tns.corporation.upgradeWarehouse(division, city, numUpgrades);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function upgradeStorageOrBuyAds(ns, division, city) {\\n\\tlet mats = MaterialNames;\\n\\tfor (let i of mats) {\\n\\t\\tlet mat = ns.corporation.getMaterial(division, city, i)\\n\\t\\tif (mat.productionAmount > mat.actualSellAmount + mat.exports.amount) {\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getHireAdVertCost(division)) {\\n\\t\\t\\t\\tns.print(\\\"Buying Adverts for \\\" + division)\\n\\t\\t\\t\\tns.corporation.hireAdVert(division);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getUpgradeWarehouseCost(division, city)) {\\n\\t\\t\\t\\tns.print(\\\"UpgradeStorageOrBuyAds: Upgrading Warehouse \\\" + division, city)\\n\\t\\t\\t\\tns.corporation.upgradeWarehouse(division, city);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function starterAdVert(ns, division) {\\n\\tif (ns.corporation.getHireAdVertCount(division) < 1) {\\n\\t\\tns.print(\\\"Hiring advert \\\"+ns.corporation.getHireAdVertCost(division))\\n\\t\\tns.corporation.hireAdVert(division)\\n\\t}\\n}\\n\\nexport function enableSmartSupply(ns) {\\n\\tlet divs = ns.corporation.getCorporation().divisions;\\n\\tfor (let i of divs) {\\n\\t\\tlet cities = ns.corporation.getDivision(i).cities\\n\\t\\tfor (let j of cities) {\\n\\t\\t\\tif (ns.corporation.hasWarehouse(i, j) === true) {\\n\\t\\t\\t\\tns.corporation.setSmartSupply(i, j, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function starterUpgrades(ns) {\\n\\tlet upgrades = [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\", \\\"Smart Factories\\\"]\\n\\tfor (let i of upgrades) {\\n\\t\\tlet upgLevel = ns.corporation.getUpgradeLevel(i);\\n\\t\\tif (upgLevel < 2) {\\n\\t\\t\\tfor (let j = 0; j < 2 - upgLevel; j++) {\\n\\t\\t\\t\\tif (getFunds(ns) > ns.corporation.getUpgradeLevelCost(i))\\n\\t\\t\\t\\t\\tns.corporation.levelUpgrade(i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n\\nexport async function corpStartup(ns) {\\n\\tif (ns.corporation.hasCorporation() === false) {\\n\\t\\tcreateCorp(ns)\\n\\t}\\n\\tlet divType = \\\"Agriculture\\\"\\n\\tlet divName = DivNames[divType];\\n\\tif (ns.corporation.hasCorporation() === true) {\\n\\t\\texpandDivision(ns, divType, divName)\\n\\t}\\n\\tif (ns.corporation.hasUnlock(\\\"Smart Supply\\\") === false) {\\n\\t\\tns.corporation.purchaseUnlock(\\\"Smart Supply\\\")\\n\\t}\\n\\tawait expandCityStaffWarehouse(ns, divName);\\n\\tstarterAdVert(ns, divName);\\n\\tstarterUpgrades(ns);\\n}\\n\\nexport function corpInvestCheck(ns, goalAmt, maxRound) {\\n\\tlet offer = ns.corporation.getInvestmentOffer();\\n\\tif (maxRound <= offer.round && goalAmt < offer.funds) {\\n\\t\\tns.corporation.acceptInvestmentOffer()\\n\\t\\tns.tprint(\\\"Corporation offer accepted: \\\",offer.funds,\\\" \\\",round);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function corpInvest1(ns) {\\n\\tlet divType = \\\"Agriculture\\\"\\n\\tlet division = DivNames[divType];\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let i of DivCities) {\\n\\t\\tif (!existingCities.includes(i)) {\\n\\t\\t\\tns.corporation.expandCity(division, i);\\n\\t\\t\\texistingCities.push(i);\\n\\t\\t}\\n\\t}\\n\\texistingCities = ns.corporation.getDivision(division).cities;\\n\\tinvest1Upgrades(ns)\\n\\tfor (let j of existingCities) {\\n\\t\\tif (ns.corporation.getOffice(division, j).size < 1) {\\n\\t\\t\\thireAndAssign(ns, division, j, 9, JobDistUpgr);\\n\\t\\t}\\n\\t\\tupgradeStorage(ns, division, j, 2000);\\n\\t}\\n}\\n\\nexport function invest1Upgrades(ns) {\\n\\tlet upgrades = [\\\"Smart Factories\\\", \\\"Smart Storage\\\"]\\n\\tfor (let i of upgrades) {\\n\\t\\tlet upgLevel = ns.corporation.getUpgradeLevel(i);\\n\\t\\tif (upgLevel < 10) {\\n\\t\\t\\tfor (let j = 0; j < 10 - upgLevel; j++) {\\n\\t\\t\\t\\tif (getFunds(ns) > ns.corporation.getUpgradeLevelCost(i))\\n\\t\\t\\t\\t\\tns.corporation.levelUpgrade(i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function corpInvest2(ns) {\\n\\tlet divType = \\\"Agriculture\\\"\\n\\tlet division = DivNames[divType];\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let i of DivCities) {\\n\\t\\tif (!existingCities.includes(i)) {\\n\\t\\t\\tns.corporation.expandCity(division, i);\\n\\t\\t\\texistingCities.push(i);\\n\\t\\t}\\n\\t}\\n\\tinvest1Upgrades(ns)\\n\\n\\texistingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let j of existingCities) {\\n\\t\\tif (ns.corporation.getOffice(division, j).size < 1) {\\n\\t\\t\\thireAndAssign(ns, division, j, 9, JobDistUpgr);\\n\\t\\t}\\n\\t\\tupgradeStorage(ns, division, j, 3800);\\n\\t}\\n}\\n\\n\\nexport async function bpmForAg(ns, division, agProdMats) {\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\texistingCities.sort((a, b) => ns.corporation.getWarehouse(division, a).size - ns.corporation.getWarehouse(division, b).size)\\n\\tfor (let j of existingCities) {\\n\\t\\tfor (let k of ProductionMats) {\\n\\t\\t\\t//\\tns.print(j, agProdMats[k])\\n\\t\\t\\tawait buyProductionMaterial(ns, division, j, k, agProdMats[k]);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function buyProductionMaterial(ns, div, city, material, goalQty) {\\n\\tlet qty = ns.corporation.getMaterial(div, city, material).stored\\n\\t//ns.print(material, \\\" \\\", goalQty, \\\" \\\", qty)\\n\\tif (qty < goalQty) {\\n\\t\\tlet buyQty = Math.min((goalQty - qty), Math.floor(ns.corporation.getCorporation().funds / ns.corporation.getMaterial(div, city, material).marketPrice))\\n\\t\\tlet wh = ns.corporation.getWarehouse(div, city);\\n\\t\\t//\\tns.print(dCorp.MaterialInfo[material].size)\\n\\t\\tlet sizeRestBuyQty = Math.floor((wh.size * .8 - wh.sizeUsed) / dCorp.MaterialInfo[material].size)\\n\\t\\tbuyQty = Math.min(buyQty, sizeRestBuyQty)\\n\\t\\t//\\tns.print(buyQty)\\n\\t\\tif (buyQty > 0) {\\n\\t\\t\\tns.print(\\\"Buying prod mats \\\" + div, city, material)\\n\\t\\t\\tns.corporation.bulkPurchase(div, city, material, buyQty)\\n\\t\\t}\\n\\t}\\n\\t//ns.print(ns.corporation.getCorporation().funds)\\n}\\n\\nexport async function tobaccoStartup(ns) {\\n\\n\\tif (ns.corporation.hasCorporation() === false) {\\n\\t\\tcreateCorp(ns)\\n\\t}\\n\\tlet divType = \\\"Tobacco\\\"\\n\\tlet divName = DivNames[divType];\\n\\tif (ns.corporation.hasCorporation() === true) {\\n\\t\\texpandDivision(ns, divType, divName)\\n\\t}\\n\\tif (ns.corporation.hasUnlock(\\\"Smart Supply\\\") === false) {\\n\\t\\tns.corporation.purchaseUnlock(\\\"Smart Supply\\\")\\n\\t}\\n\\tawait expandCityStaffWarehouse(ns, divName);\\n\\tstarterAdVert(ns, divName);\\n\\tstarterUpgrades(ns);\\n}\\n\\nexport async function divStartup(ns, divType) {\\n\\n\\tif (ns.corporation.hasCorporation() === false) {\\n\\t\\tcreateCorp(ns)\\n\\t}\\n\\tlet divName = DivNames[divType];\\n\\tif (ns.corporation.hasCorporation() === true) {\\n\\t\\texpandDivision(ns, divType, divName)\\n\\t}\\n\\tif (ns.corporation.hasUnlock(\\\"Smart Supply\\\") === false) {\\n\\t\\tns.corporation.purchaseUnlock(\\\"Smart Supply\\\")\\n\\t}\\n\\tawait expandCityStaffWarehouse(ns, divName);\\n\\tstarterAdVert(ns, divName);\\n\\tstarterUpgrades(ns);\\n}\\n\\n// ===========Product Management=========\\n\\nexport function getProductStatuses(ns, div) {\\n\\tlet prods = ns.corporation.getDivision(div).products;\\n\\n\\tlet completed = prods.filter(el => ns.corporation.getProduct(div, DevCity, el).developmentProgress === 100);\\n\\tlet inDevelopment = prods.filter(el => ns.corporation.getProduct(div, DevCity, el).developmentProgress < 100)\\n\\tlet maxProdNo = getMaxProductNumber(ns, div)\\n\\tlet openSlots = maxProdNo - completed.length - inDevelopment.length;\\n\\treturn [completed, inDevelopment, openSlots];\\n}\\n\\nexport function getMaxProductNumber(ns, div) {\\n\\tlet maxProdNum = 3;\\n\\tif (ns.corporation.hasResearched(div, \\\"uPgrade: Capacity.I\\\")) {\\n\\t\\tmaxProdNum = maxProdNum + 1;\\n\\t}\\n\\tif (ns.corporation.hasResearched(div, \\\"uPgrade: Capacity.II\\\")) {\\n\\t\\tmaxProdNum = maxProdNum + 1;\\n\\t}\\n\\treturn maxProdNum;\\n}\\n\\nexport function discontinueWeakest(ns, div) {\\n\\tlet prodStatus = getProductStatuses(ns, div);\\n\\tlet completed = prodStatus[0];\\n\\tlet weakest = completed[0];\\n\\tlet weakestQual = ns.corporation.getProduct(div, DevCity, weakest).rat;\\n\\tfor (let i of completed) {\\n\\t\\tif (ns.corporation.getProduct(div, DevCity, i).rat < weakestQual) {\\n\\t\\t\\tweakest = completed[0];\\n\\t\\t\\tweakestQual = ns.corporation.getProduct(div, DevCity, weakest).rat;\\n\\t\\t}\\n\\t}\\n\\tns.corporation.discontinueProduct(div, weakest);\\n}\\n\\nexport function developProduct(ns, div, number) {\\n\\tlet prods = ns.corporation.getDivision(div).products;\\n\\tlet funds = getFunds(ns);\\n\\tfor (let i of ProdNames) {\\n\\t\\tif (!prods.includes(i)) {\\n\\t\\t\\tns.print(\\\"Developing product \\\" + i)\\n\\t\\t\\tns.corporation.makeProduct(div, DevCity, i, funds / number / 2, funds / number / 2)\\n\\t\\t\\tnumber--;\\n\\t\\t\\tif (number === 0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function updateProductPrice(ns, div, product) {\\n\\tfor (let i of DivCities) {\\n\\t\\tif (ns.corporation.hasWarehouse(div,i)) {\\n\\t\\t\\tlet productData = ns.corporation.getProduct(div, i, product);\\n\\t\\t\\tlet currentPrice = productData.desiredSellPrice;\\n\\t\\t\\tlet onHand = productData.qty\\n\\t\\t\\tlet productionQty = productData.prod\\n\\t\\t\\tlet price = productData.rating / 100\\n\\t\\t\\tif (isNaN(currentPrice)) {\\n\\t\\t\\t\\tif (currentPrice === \\\"MP\\\") {\\n\\t\\t\\t\\t\\tprice = 1\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tprice = Number(currentPrice.split('MP*')[1]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (productData.actualSellAmount <= productData.productionAmount * .95) {\\n\\t\\t\\t\\tprice = price * .9\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprice = price * 1.1\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.corporation.getWarehouse(div, i).sizeUsed >= ns.corporation.getWarehouse(div, i).size * .9) {\\n\\t\\t\\t\\tprice = price * .9\\n\\t\\t\\t}\\n\\t\\t\\tif (price < 1) { price = 1 };\\n\\t\\t\\tns.corporation.sellProduct(div, i, product, \\\"MAX\\\", \\\"MP*\\\" + price, false)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function setMarketPrices(ns, div) {\\n\\tlet prods = ns.corporation.getDivision(div).products;\\n\\tfor (let i of prods) {\\n\\t\\tupdateProductPrice(ns, div, i)\\n\\t\\tif (ns.corporation.hasResearched(div, \\\"Market-TA.II\\\")) {\\n\\t\\t\\tns.corporation.setProductMarketTA1(div, i, true)\\n\\t\\t\\tns.corporation.setProductMarketTA2(div, i, true)\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n// if completed products === max product number\\n///discontinue product\\n// if products in development < (max prod - completed)\\n///start development of new product\\n//update prices\\n\\nexport function productTasks(ns, div) {\\n\\tlet prodStatus = getProductStatuses(ns, div);\\n\\tlet maxProd = getMaxProductNumber(ns, div)\\n\\tlet completed = prodStatus[0];\\n\\tif (completed.length === maxProd) {\\n\\t\\tdiscontinueWeakest(ns, div);\\n\\t}\\n\\tprodStatus = getProductStatuses(ns, div);\\n\\tcompleted = prodStatus[0];\\n\\tlet inDev = prodStatus[1];\\n\\n\\tif (completed.length + inDev.length < maxProd) {\\n\\t\\tdevelopProduct(ns, div, prodStatus[2]);\\n\\t}\\n\\tsetMarketPrices(ns, div);\\n}\\n\\n\\n//===========Office & Warehouse Management==========\\nexport async function expandOffice(ns, division) {\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\tlet goalEmps = 30;\\n\\tfor (let j of existingCities) {\\n\\t\\tif (j === DevCity) {\\n\\t\\t\\tgoalEmps = 300;\\n\\t\\t} else {\\n\\t\\t\\tgoalEmps = (ns.corporation.getOffice(division, DevCity).size - 60)\\n\\t\\t}\\n\\t\\tawait hireAndAssign(ns, division, j, goalEmps, JobDistEven);\\n\\t}\\n}\\n\\nexport function getMaxAdVerts(ns, div) {\\n\\tlet funds = ns.corporation.getCorporation().funds\\n\\tlet cost = ns.corporation.getHireAdVertCost(div)\\n\\tlet advertCount = Math.floor(funds / cost)\\n\\treturn advertCount;\\n}\\n\\nexport async function purchaseProdMats(ns, division) {\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\tfor (let i of existingCities) {\\n\\t\\tlet warehouse = ns.corporation.getWarehouse(division, i);\\n\\t\\tif (warehouse.sizeUsed / warehouse.size < .5) {\\n\\t\\t\\tfor (let j of ProductionMats) {\\n\\t\\t\\t\\tlet agSize = (dCorp.MaterialInfo[j].size)\\n\\t\\t\\t\\tlet totQty = Math.floor(warehouse.size / 2 * AgProdMatPerc[j] / agSize)\\n\\t\\t\\t\\tawait buyProductionMaterial(ns, division, i, j, totQty);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function expandWarehouses(ns, division) {\\n\\tlet existingCities = ns.corporation.getDivision(division).cities;\\n\\texistingCities.sort((a, b) => ns.corporation.getWarehouse(division, a).size - ns.corporation.getWarehouse(division, b).size)\\n\\tfor (let i of existingCities) {\\n\\t\\tlet warehouse = ns.corporation.getWarehouse(division, i);\\n\\t\\tif (warehouse.sizeUsed / warehouse.size > .8) {\\n\\t\\t\\tif (ns.corporation.getUpgradeWarehouseCost(division, i) < ns.corporation.getCorporation().funds) {\\n\\t\\t\\t\\tns.print(\\\"ExpandWarehouse:Upgrading warehouse \\\" + division, i)\\n\\t\\t\\t\\tns.corporation.upgradeWarehouse(division, i);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n//============upgrades=============\\n\\nexport function getCheapestUpgradeCost(ns) {\\n\\tlet lowestCost = ns.corporation.getUpgradeLevelCost(UpgradeList[0]);\\n\\tlet cheapestUpgrade = UpgradeList[0]\\n\\tfor (let h of UpgradeList) {\\n\\t\\tif (ns.corporation.getUpgradeLevelCost(h) < lowestCost) {\\n\\t\\t\\tlowestCost = ns.corporation.getUpgradeLevelCost(h);\\n\\t\\t\\tcheapestUpgrade = h;\\n\\t\\t}\\n\\t}\\n\\treturn lowestCost;\\n}\\n\\nexport function buyAllUpgrades(ns) {\\n\\tlet funds = getFunds(ns);\\n\\tlet lowestCost = getCheapestUpgradeCost(ns);\\n\\tlet counter = 0;\\n\\twhile (funds > lowestCost) {\\n\\t\\tif (counter > 1000) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tfor (let i of UpgradeList) {\\n\\t\\t\\tfunds = getFunds(ns);\\n\\n\\t\\t\\tif (ns.corporation.getUpgradeLevelCost(i) < funds) {\\n\\t\\t\\t\\tns.print(\\\"Purchasing upgrade \\\" + i)\\n\\t\\t\\t\\tns.corporation.levelUpgrade(i);\\n\\t\\t\\t\\tfunds = getFunds(ns);\\n\\t\\t\\t}\\n\\t\\t\\tlowestCost = getCheapestUpgradeCost(ns);\\n\\t\\t\\tif (funds < lowestCost) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tfunds = getFunds(ns);\\n\\t\\tlowestCost = getCheapestUpgradeCost(ns);\\n\\t\\tcounter++\\n\\t}\\n}\\n\\n\\nexport function buyAdVerts(ns, division) {\\n\\tlet funds = getFunds(ns)\\n\\tlet cost = ns.corporation.getHireAdVertCost(division);\\n\\tlet counter = 0;\\n\\twhile (funds > cost) {\\n\\t\\tif (counter > 1000) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (ns.corporation.getHireAdVertCost(division) < funds) {\\n\\t\\t\\tns.print(\\\"Buying adverts for \\\" + division)\\n\\t\\t\\tns.corporation.hireAdVert(division)\\n\\t\\t} else {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tfunds = getFunds(ns)\\n\\t\\tcost = ns.corporation.getHireAdVertCost(division)\\n\\t\\tcounter++;\\n\\t}\\n}\\n\\n//===========Stock Buyback and Rep Donations=========\\nexport function repDonations(ns) {\\n\\tlet augsList = hAugs.getAllAugs(ns, Object.values(FactionNames), hAugs.AllStats);\\n\\t//ns.print(augsList)\\n\\tfor (let i of augsList) {\\n\\t\\tdonateToRep(ns, i.aName, i.aFaction);\\n\\t}\\n}\\n\\nexport function donateToRep(ns, aug, faction) {\\n\\tlet playerFactions = ns.getPlayer().factions;\\n\\tif (playerFactions.includes(faction)) {\\n\\t\\t//\\tns.print(aug, faction)\\n\\t\\tlet neededRep = ns.singularity.getAugmentationRepReq(aug) - ns.singularity.getFactionRep(faction)\\n\\t\\tlet bribePerRep = 1e9\\n\\t\\tif (neededRep > 0) {\\n\\t\\t\\tlet amt = bribePerRep * neededRep;\\n\\t\\t\\tns.corporation.bribe(faction, amt)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function buyBackAllShares(ns) {\\n\\tlet corpInfo = ns.corporation.getCorporation()\\n\\tlet availShares = corpInfo.issuedShares;\\n\\tlet funds = ns.getServerMoneyAvailable(\\\"home\\\") / 10;\\n\\tlet sharePrice = corpInfo.sharePrice;\\n\\tlet affordableShares = Math.floor(funds / sharePrice);\\n\\tlet amt = Math.min(availShares, affordableShares)\\n\\tif (amt > 0) {\\n\\t\\tns.corporation.buyBackShares(amt)\\n\\t}\\n}\\n\\nexport const CorpName = \\\"BPCorp\\\"\\nexport const DivNames = { \\\"Agriculture\\\": \\\"FishFarm\\\", \\\"Tobacco\\\": \\\"PuffinPuffin\\\", \\\"Chemical\\\": \\\"CompostBin\\\" }\\nexport const DivCities = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Volhaven\\\"]\\nexport const DivInfo = [\\n\\t{\\n\\t\\tdivType: \\\"Agriculture\\\",\\n\\t\\tdivName: \\\"FishFarm\\\",\\n\\t\\tdivMatsCons: [\\\"Chemicals\\\", \\\"Water\\\"],\\n\\t\\tdivMatsProd: [\\\"Plants\\\", \\\"Food\\\"],\\n\\t},\\n\\t{\\n\\t\\tdivType: \\\"Tobacco\\\",\\n\\t\\tdivName: \\\"PuffinPuffin\\\",\\n\\t\\tdivMatsCons: [\\\"Plants\\\"],\\n\\t\\tdivMatsProd: [],\\n\\t},\\n\\t{\\n\\t\\tdivType: \\\"Chemical\\\",\\n\\t\\tdivName: \\\"CompostHeap\\\",\\n\\t\\tdivMatsCons: [\\\"Plants\\\"],\\n\\t\\tdivMatsProd: [\\\"Chemicals\\\"],\\n\\t}\\n]\\nexport const Jobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\", \\\"Management\\\", \\\"Research & Development\\\", \\\"Intern\\\"]\\nexport const JobDistStart = [1, 1, 1]\\nexport const JobDistUpgr = [1, 1, 1, 1, 1, 1]\\nexport const JobDistEven = [1, 1, 1, 1, 1, 1]\\nexport const JobDistMfg = []\\nexport const JobDistSales = []\\nexport const AgricultureSellMats = [\\\"Food\\\", \\\"Plants\\\"]\\nexport const ChemicalSellMats = [\\\"Chemicals\\\"]\\nexport const ExportMap = [\\n\\t{\\n\\t\\texpDiv: DivNames[\\\"Agriculture\\\"],\\n\\t\\tmaterial: \\\"Plants\\\",\\n\\t\\timpDiv: DivNames[\\\"Chemical\\\"]\\n\\t},\\n\\t{\\n\\t\\texpDiv: DivNames[\\\"Agriculture\\\"],\\n\\t\\tmaterial: \\\"Plants\\\",\\n\\t\\timpDiv: DivNames[\\\"Tobacco\\\"]\\n\\t},\\n\\t{\\n\\t\\texpDiv: DivNames[\\\"Chemical\\\"],\\n\\t\\tmaterial: \\\"Chemicals\\\",\\n\\t\\timpDiv: DivNames[\\\"Agriculture\\\"]\\n\\t}\\n]\\nexport const ProductionMats = [\\\"Hardware\\\", \\\"Robots\\\", \\\"AI Cores\\\", \\\"Real Estate\\\"]\\nexport const AgProdMat1 = { \\\"Hardware\\\": 125, \\\"Robots\\\": 0, \\\"AI Cores\\\": 75, \\\"Real Estate\\\": 27000 }\\nexport const AgProdMat2 = { \\\"Hardware\\\": 2800, \\\"Robots\\\": 96, \\\"AI Cores\\\": 2520, \\\"Real Estate\\\": 146400 }\\nexport const AgProdMat3 = { \\\"Hardware\\\": 9300, \\\"Robots\\\": 726, \\\"AI Cores\\\": 6270, \\\"Real Estate\\\": 230400 }\\nexport const AgProdMatPerc = { \\\"Hardware\\\": 0.3, \\\"Robots\\\": 0.2, \\\"AI Cores\\\": 0.2, \\\"Real Estate\\\": 0.3 }\\nexport const ProdNames = [\\\"T1\\\", \\\"T2\\\", \\\"T3\\\", \\\"T4\\\", \\\"T5\\\"]\\nexport const UpgradeList = [\\n\\t\\\"Smart Factories\\\",\\n\\t\\\"Smart Storage\\\",\\n\\t\\\"DreamSense\\\",\\n\\t\\\"Wilson Analytics\\\",\\n\\t\\\"Nuoptimal Nootropic Injector Implants\\\",\\n\\t\\\"Speech Processor Implants\\\",\\n\\t\\\"Neural Accelerators\\\",\\n\\t\\\"FocusWires\\\",\\n\\t\\\"ABC SalesBots\\\",\\n\\t\\\"Project Insight\\\"\\n]\\nexport const DevCity = \\\"Sector-12\\\"\\nexport const MaterialNames = [\\n\\t\\\"Minerals\\\",\\n\\t\\\"Ore\\\",\\n\\t\\\"Water\\\",\\n\\t\\\"Food\\\",\\n\\t\\\"Plants\\\",\\n\\t\\\"Metal\\\",\\n\\t\\\"Hardware\\\",\\n\\t\\\"Chemicals\\\",\\n\\t\\\"Drugs\\\",\\n\\t\\\"Robots\\\",\\n\\t\\\"AI Cores\\\",\\n\\t\\\"Real Estate\\\"\\n]\\n\\n\\n\\nexport async function main(ns) {\\n\\tcorpInvestCheck(ns, 210e9, 1)\\n\\n}\",\"filename\":\"bp3_helpers_corp.js\",\"server\":\"home\"}}],[\"bp3_corp_start.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n\\nexport async function main(ns) {\\nawait hCorp.corpStartup(ns);\\nlet divName = \\\"FishFarm\\\"\\n\\tawait hCorp.bpmForAg(ns, divName,hCorp.AgProdMat1);\\n}\",\"filename\":\"bp3_corp_start.js\",\"server\":\"home\"}}],[\"bp3_corp_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\tlet corp = ns.corporation.getCorporation();\\n\\tlet divs = corp.divisions;\\n\\tlet productDivs = divs.filter(el => ns.corporation.getDivision(el).makesProducts)\\n\\tlet nonProductDivs = divs.filter(el => !ns.corporation.getDivision(el).makesProducts)\\n\\tlet fundBuffer = 5e9;\\n\\tlet sleepTime = 10000\\n\\n\\twhile (true) {\\n\\t\\t//warehouse space\\n\\t\\t//--sales\\n\\t\\t//----advertising\\n\\t\\t//----marketPrice\\n\\t\\t//--expansion\\n\\t\\t//consumption\\n\\t\\t//--employees\\n\\t\\t//exporting\\n\\t\\t//development\\n\\t\\t//production\\n\\t\\t//--employees\\n\\t\\t//--production multi\\n\\t\\t//----warehouse space\\n\\t\\t//----materials\\n\\n\\t\\tcorp = ns.corporation.getCorporation()\\n\\t\\tlet offer = ns.corporation.getInvestmentOffer()\\n\\n\\n\\t\\tif (offer.round === 1) {\\n\\t\\t\\tlet divName = \\\"FishFarm\\\"\\n\\t\\t\\tawait hCorp.bpmForAg(ns, divName, hCorp.AgProdMat1);\\n\\t\\t}\\n\\n\\t\\tif (hCorp.corpInvestCheck(ns, 210e9, 1)) {\\n\\t\\t\\thCorp.corpInvest1(ns);\\n\\t\\t\\tlet divName = \\\"FishFarm\\\"\\n\\t\\t\\tawait hCorp.bpmForAg(ns, divName, hCorp.AgProdMat2);\\n\\t\\t\\tawait ns.sleep(60000)\\n\\t\\t\\t}\\n\\t\\tif (hCorp.corpInvestCheck(ns, 5e12, 2)) {\\n\\t\\t\\tlet divType = \\\"Tobacco\\\";\\n\\t\\t\\thCorp.divStartup(ns, divType)\\n\\t\\t\\thCorp.corpInvest2(ns);\\n\\t\\t\\tlet divName = \\\"FishFarm\\\"\\n\\t\\t\\tawait hCorp.bpmForAg(ns, divName, hCorp.AgProdMat3);\\n\\t\\t\\tawait ns.sleep(60000)\\n\\t\\t\\t}\\n\\t\\tif (hCorp.corpInvestCheck(ns, 800e12, 3)) {\\n\\n\\t\\t}\\n\\n\\t//\\tns.print(\\\"==All Divisions==\\\")\\n\\t\\tif (offer.round <= 3) {\\n\\t//\\t\\tns.print(ns.formatNumber(offer.funds),\\\" \\\",offer.round);\\n\\t\\t}\\n\\n\\t\\t//hCorp.warehouseMonitor(ns);\\n\\n\\t\\tdivs.sort((a, b) => productDivs.indexOf(b) - productDivs.indexOf(a))\\n\\n\\t\\tfor (let i of divs) {\\n\\t\\t//\\tns.print(i,\\\" \\\",ns.formatNumber(ns.corporation.getDivision(i).productionMult))\\n\\t\\t\\tlet divInfo = ns.corporation.getDivision(i)\\n\\t\\t\\tlet cities = divInfo.cities;\\n\\t\\t\\tcities.sort((a, b) => ns.corporation.getOffice(i, a).size - ns.corporation.getOffice(i, b).size)\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getHireAdVertCost(i)) {\\n\\t\\t\\t\\tif (productDivs.indexOf(i) > -1) {\\n\\t\\t\\t\\t\\tawait hCorp.expandOffice(ns, i)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getHireAdVertCost(i)) {\\n\\t\\t\\t\\tif (productDivs.indexOf(i) > -1) {\\n\\t\\t\\t\\t\\tlet maxAdverts = hCorp.getMaxAdVerts(ns, i)\\n\\t\\t\\t\\t\\tfor (let n = 0; n < maxAdverts; n++) {\\n\\t\\t\\t\\t\\t\\tns.corporation.hireAdVert(i)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tcities = cities.filter(el=>ns.corporation.hasWarehouse(i,el));\\n\\t\\t\\tcities.sort((a, b) => ns.corporation.getWarehouse(i, a).size - ns.corporation.getWarehouse(i, b).size)\\n\\t\\t\\tfor (let j of cities) {\\n\\t\\t\\t\\tif (ns.corporation.getCorporation().funds > fundBuffer && ns.corporation.getWarehouse(i, j).sizeUsed > ns.corporation.getWarehouse(i, j).size * .9) {\\n\\t\\t\\t\\t\\tlet maxAdverts = hCorp.getMaxAdVerts(ns, i)\\n\\t\\t\\t\\t\\tfor (let n = 0; n < maxAdverts; n++) {\\n\\t\\t\\t\\t\\t\\tns.corporation.hireAdVert(i)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\thCorp.updateMaterialPrices(ns, i, j);\\n\\t\\t\\t\\t\\thCorp.setAllExportIProd(ns);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (productDivs.indexOf(i) > -1) {\\n\\t\\t\\t\\thCorp.setMarketPrices(ns, i)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (ns.corporation.getDivision(i).productionMult < 500) {\\n\\t\\t\\t\\t\\tif (ns.corporation.getCorporation().funds > fundBuffer * 50)\\n\\t\\t\\t\\t\\t\\tawait hCorp.purchaseProdMats(ns, i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait hCorp.assignAllJobs(ns)\\n\\n\\t\\tif (ns.corporation.getCorporation().divisions.indexOf(\\\"PuffinPuffin\\\") > -1) {\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > fundBuffer * 10) {\\n\\t\\t\\t\\tif (ns.corporation.getOffice(\\\"PuffinPuffin\\\", \\\"Sector-12\\\").size >= 300) {\\n\\t\\t\\t\\t\\thCorp.buyAllUpgrades(ns)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (ns.corporation.getCorporation().funds > ns.corporation.getOfficeSizeUpgradeCost(\\\"PuffinPuffin\\\", \\\"Sector-12\\\", 18)) {\\n\\t\\t\\t\\tfor (let k of productDivs) {\\n\\t\\t\\t\\t\\tns.print(\\\"  Updating Products\\\")\\n\\t\\t\\t\\t\\thCorp.productTasks(ns, k);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\thCorp.repDonations(ns)\\n\\t\\tif (corp.public) {\\n\\t\\t\\thCorp.buyBackAllShares(ns);\\n\\t\\t}\\n\\n\\t//\\tns.print(\\\"Home funds \\\" + ns.formatNumber(ns.getServerMoneyAvailable(\\\"home\\\"), \\\"0.00a\\\"))\\n\\t//\\tns.print(\\\"Corporate funds: \\\" + ns.formatNumber(ns.corporation.getCorporation().funds, \\\"0.00a\\\"));\\n\\t\\tsleepTime = (ns.corporation.getBonusTime() > 0 ? 1000 : 10000)\\n\\t\\tawait ns.sleep(sleepTime)\\n\\t//\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_corp_manager.js\",\"server\":\"home\"}}],[\"bp3_augs_nfg.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet factions = ns.getPlayer().factions\\n\\tfactions.sort((a,b)=>ns.singularity.getFactionFavor(b)-ns.singularity.getFactionFavor(a))\\n\\t\\n\\tif (ns.corporation.hasCorporation()) {\\n\\t\\tns.corporation.bribe(factions[0], ns.getServerMoneyAvailable(\\\"home\\\") / 10)\\n\\t}\\n\\tfactions.sort((a,b)=>ns.singularity.getFactionRep(b)-ns.singularity.getFactionRep(a))\\n\\n\\tlet nfgCost = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\")\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\")\\n\\twhile (money > nfgCost) {\\n\\t\\tns.singularity.purchaseAugmentation(factions[0], \\\"NeuroFlux Governor\\\")\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tnfgCost = ns.singularity.getAugmentationPrice(\\\"NeuroFlux Governor\\\")\\n\\t\\tmoney = ns.getServerMoneyAvailable(\\\"home\\\")\\n\\t}\\n}\",\"filename\":\"bp3_augs_nfg.js\",\"server\":\"home\"}}],[\"bp3_corp_scpManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet target = ns.args[0];\\n\\n\\tlet files = [\\n\\t\\t\\\"bp3_corp_manager.js\\\",\\n\\t\\t\\\"bp3_helpers_manager.js\\\",\\n\\t\\t\\\"bp3_helpers_augs.js\\\",\\n\\t\\t\\\"bp3_helpers_factions.js\\\",\\n\\t\\t\\\"bp3_data_factions.js\\\",\\n\\t\\t\\\"bp3_data_servers.js\\\",\\n\\t\\t\\\"bp3_helpers_terminal.js\\\"\\n\\t]\\n\\tns.scp(files, target, \\\"home\\\")\\n\\n}\",\"filename\":\"bp3_corp_scpManager.js\",\"server\":\"home\"}}],[\"bp3_monitors_corp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction nFormatAll(ns,strings) {\\n\\tlet formatted = [];\\n\\tfor(let i of strings) {\\n\\t\\tformatted.push(ns.formatNumber(i,\\\"0.00a\\\"))\\n\\t}\\n\\treturn formatted;\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.tail();\\n\\tlet div = \\\"PuffinPuffin\\\"\\n\\twhile (true) {\\n\\n\\t\\tlet products = ns.corporation.getDivision(div).products;\\n\\t\\tfor (let i of products) {\\n\\t\\t\\tlet prod = ns.corporation.getProduct(div, i)\\n\\t\\t\\tlet output1= nFormatAll(ns,[prod.rat])\\n\\t\\t\\tlet output2 = nFormatAll(ns,prod.cityData[\\\"Aevum\\\"])\\n\\t\\t\\t\\tns.print(i,\\\" \\\",output1,\\\" \\\",output2,\\\" \\\",prod.sCost)\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(800)\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_monitors_corp.js\",\"server\":\"home\"}}],[\"bp3_crime_doBest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport {getCrimeScores} from \\\"bp3_helpers_player.js\\\"\\nexport async function main(ns) {\\nns.print(getCrimeScores(ns));\\n}\",\"filename\":\"bp3_crime_doBest.js\",\"server\":\"home\"}}],[\"bp3_player_crime.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet crime = ns.args[0] || \\\"Mug\\\";\\n\\tlet stat = ns.args[1] || \\\"Money\\\"\\n\\n\\tlet goal = ns.args[2] || 1e6;\\n\\tlet sleepTime = ns.args[3] || ns.singularity.getCrimeStats(crime).time+1000 || 60000;\\n\\tlet player = ns.getPlayer();\\n\\twhile (true) {\\n\\t\\tns.singularity.commitCrime(crime,false)\\n\\n\\n\\t\\tawait ns.sleep(sleepTime)\\n\\t\\tplayer = ns.getPlayer();\\n\\n\\n\\t\\tif (stat === \\\"Money\\\") {\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > goal) {\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (player[stat] > goal) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.print(\\\"Stat / goal \\\"+stat + \\\" / \\\"+goal)\\n\\t}\\n\\tns.tprint(\\\"Stat goal met \\\") + goal + \\\"for goal \\\" + stat\\n}\",\"filename\":\"bp3_player_crime.js\",\"server\":\"home\"}}],[\"bp3_corp_invest1.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\thCorp.corpInvest1(ns);\\n\\tlet divName = \\\"FishFarm\\\"\\n\\tawait hCorp.bpmForAg(ns, divName, hCorp.AgProdMat2);\\n\\tawait ns.sleep(60000)\\n\\t}\\n}\",\"filename\":\"bp3_corp_invest1.js\",\"server\":\"home\"}}],[\"bp3_corp_invest2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n\\nexport async function main(ns) {\\n\\thCorp.corpInvest2(ns);\\n\\tlet divName = \\\"FishFarm\\\"\\n\\tawait hCorp.bpmForAg(ns, divName, hCorp.AgProdMat3);\\n}\",\"filename\":\"bp3_corp_invest2.js\",\"server\":\"home\"}}],[\"bp3_player_train.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet goal = ns.args[0] || 30;\\n\\tlet tiers = [30, 75, 200, 300]\\n\\tlet player = ns.getPlayer();\\n\\tlet pSkills = player.skills;\\n\\tlet combatSkills = [\\\"strength\\\", \\\"defense\\\", \\\"dexterity\\\", \\\"agility\\\"]\\n\\tlet min = 0;\\n\\twhile (min < goal) {\\n\\t\\tplayer = ns.getPlayer();\\n\\t\\tpSkills = player.skills;\\n\\t\\tlet min = 300;\\n\\t\\tlet minStat = \\\"strength\\\";\\n\\t\\tfor (let h of combatSkills) {\\n\\t\\t\\tif (pSkills[h] < min) {\\n\\t\\t\\t\\tmin = pSkills[h]\\n\\t\\t\\t\\tminStat = h;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (min < goal) {\\n\\t\\t\\tif (player.location !== \\\"Sector-12\\\")\\n\\t\\t\\t\\tns.singularity.travelToCity(\\\"Sector-12\\\")\\n\\t\\t\\tns.singularity.gymWorkout(\\\"Powerhouse Gym\\\", minStat, false);\\n\\t\\t}\\n\\t\\tpSkills = ns.getPlayer().skills;\\n\\t\\tns.print(minStat + \\\" \\\" + pSkills[minStat] + \\\"/\\\" + goal);\\n\\n\\t\\tawait ns.sleep(5000);\\n\\t\\tns.clearLog();\\n\\t\\tns.singularity.stopAction();\\n\\t}\\n\\t\\n\\tns.tprint(\\\"Workout to \\\" + goal + \\\" complete\\\")\\n}\",\"filename\":\"bp3_player_train.js\",\"server\":\"home\"}}],[\"bp3_factions_joinAll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\"\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\n\\nexport async function main(ns) {\\n\\tlet aFactions = hAugs.getFactionShoppingList(ns,hAugs.AllStats);\\n\\tfor (let i of aFactions) {\\n\\t\\thFactions.getInvite(ns, i)\\n\\t}\\n}\",\"filename\":\"bp3_factions_joinAll.js\",\"server\":\"home\"}}],[\"bp3_servers_connectToServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\thServers.connectToServer(ns, target)\\n}\",\"filename\":\"bp3_servers_connectToServer.js\",\"server\":\"home\"}}],[\"bp3_helpers_sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function checkShock(ns, sleeveNo, shockPerc = 95) {\\n\\tlet sleevePerson = ns.sleeve.getSleeve(sleeveNo);\\n\\tif (sleevePerson.shock < shockPerc) {\\n\\t\\treturn true;\\n\\t} \\n\\treturn false;\\n}\\n\\nexport function chooseTask(ns, sleeveNo) {\\n\\tlet sleevePerson = ns.sleeve.getSleeve(sleeveNo);\\n\\tif (sleevePerson.shock > 95) {\\n\\t\\tns.sleeve.setToShockRecovery(sleeveNo);\\n\\t\\treturn;\\n\\t}\\n\\tns.sleeve.setToCommitCrime(sleeveNo, \\\"Mug\\\")\\n}\\n\\nexport function setAllSleevesToMug(ns) {\\n\\tlet numSleeves = ns.sleeve.getNumSleeves()\\n\\tfor (let i = 0; i < numSleeves; i++) {\\n\\t\\tlet info = ns.sleeve.getSleeve(i)\\n\\n\\t\\tif (info.shock < 97) {\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, \\\"Mug\\\")\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_helpers_sleeves.js\",\"server\":\"home\"}}],[\"bp3_hacknet_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hHacknet from \\\"bp3_helpers_hacknet.js\\\"\\n\\nexport async function main(ns) {\\n\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable')\\n\\tlet counter = 0;\\n\\tlet noServers = ns.hacknet.numNodes();\\n\\twhile(noServers === 0) {\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") / 100 > ns.hacknet.getPurchaseNodeCost()) {\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t}\\n\\t\\tnoServers = ns.hacknet.numNodes();\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tns.print(counter)\\n\\t\\thHacknet.cacheCheckAndUpgrade(ns);\\n\\t\\thHacknet.sellAtOverCapacity(ns)\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") / 100 > ns.hacknet.getPurchaseNodeCost()) {\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t}\\n\\t\\n\\t\\tlet upgradeList = hHacknet.getAllUpgradeChoices(ns)\\n\\t\\tupgradeList = upgradeList.filter(el => hHacknet.getTimeToRecoup(ns, el.nodeNum, el.uName) < 10800 || el.uCost < ns.getServerMoneyAvailable(\\\"home\\\") / 100)\\n\\t\\tif (counter > 30 && upgradeList.length > 0) {\\n\\t\\t\\thHacknet.sellAllHashesForMoney(ns)\\n\\n\\t\\t\\tupgradeList = hHacknet.getAllUpgradeChoices(ns)\\n\\t\\t\\t//\\tupgradeList = upgradeList.filter(el => el.uCost < hHacknet.getBankRoll(ns, 80));\\n\\t\\t\\tupgradeList = upgradeList.filter(el => hHacknet.getTimeToRecoup(ns, el.nodeNum, el.uName) < 10800 || el.uCost < ns.getServerMoneyAvailable(\\\"home\\\") / 100)\\n\\t\\t\\tlet countdown = upgradeList.length;\\n\\t\\t\\tlet check = 1000\\n\\t\\t\\twhile (countdown > 0) {\\n\\n\\t\\t\\t\\tupgradeList.sort((a, b) => b.uScore - a.uScore)\\n\\t\\t\\t\\tns.print(upgradeList[0])\\n\\t\\t\\t\\tif (hHacknet.upgradeServer(ns, upgradeList[0].nodeNum, upgradeList[0].uName)) {\\n\\t\\t\\t\\t\\tcounter = 0;\\n\\t\\t\\t\\t\\tupgradeList = hHacknet.getAllUpgradeChoices(ns);\\n\\t\\t\\t\\t\\tupgradeList = upgradeList.filter(el => hHacknet.getTimeToRecoup(ns, el.nodeNum, el.uName) < 10800 || el.uCost < ns.getServerMoneyAvailable(\\\"home\\\") / 100)\\n\\n\\t\\t\\t\\t\\t//\\tupgradeList = upgradeList.filter(el => el.uCost < hHacknet.getBankRoll(ns, 80));\\n\\t\\t\\t\\t\\tupgradeList.sort((a, b) => b.uScore - a.uScore)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcheck--;\\n\\t\\t\\t\\tif (check < 1) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcountdown = upgradeList.length;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.print(upgradeList)\\n\\t\\t/*let noNodes = ns.hacknet.numNodes();\\n\\t\\t\\tfor (let i = 0; i < noNodes; i++) {\\n\\t\\t\\t\\tlet costLimit = Math.floor(hHacknet.getBankRoll(ns,80)/noNodes);\\n\\t\\t\\t//\\tns.print(i, hHacknet.getUpgradeChoice(ns, i))\\n\\t\\t\\t\\thHacknet.upgradeServer(ns, i, hHacknet.getUpgradeChoice(ns, i,costLimit))\\n\\t\\t\\t}*/\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000);\\n\\t\\tns.clearLog();\\n\\t}\\n\\n}\",\"filename\":\"bp3_hacknet_manager.js\",\"server\":\"home\"}}],[\"bp3_helpers_hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n\\nexport const SERVER_BASE_COST = 720;\\nexport const SERVER_BASE_OUTPUT = .96\\nexport const LEVEL_UPGRADE_OUTPUT = .96\\nexport const RAM_UPGRADE_OUTPUT = .034\\nexport const CORE_UPGRADE_OUTPUT = .16\\n\\nexport function moneyGainRatePerCost(ns, nodeNum, upgradeType, startLevel, startRam, startCores, startMult) {\\n\\tlet nodeStats = ns.hacknet.getNodeStats(nodeNum);\\n\\n}\\n\\n\\n\\n\\n//======Servers=========\\n\\nexport function getAvailableMoney(ns) {\\n\\tlet numHash = ns.hacknet.numHashes();\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet availableMoney = money + Math.floor(numHash / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1e6\\n\\t//\\tns.print(\\\"nHash\\\"+numHash)\\n\\t//\\tns.print(\\\"cashMoney\\\"+money) \\n\\t//\\tns.print(\\\"totAvailMoney\\\"+availableMoney)\\n\\treturn availableMoney;\\n}\\n\\nexport function getBankRoll(ns, percent) {\\n\\tlet bankRoll = getAvailableMoney(ns) * percent / 100\\n\\treturn bankRoll\\n}\\n\\nexport function sellHashesForMoney(ns, goalMoney) {\\n\\tlet numHash = ns.hacknet.numHashes();\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tif (money < goalMoney) {\\n\\t\\tlet moneyNeeded = goalMoney - money;\\n\\t\\tlet count = Math.ceil(moneyNeeded / 1000000)\\n\\t\\tlet hashesNeeded = count * ns.hacknet.hashCost(\\\"Sell for Money\\\");\\n\\t\\tif (hashesNeeded < numHash) {\\n\\t\\t\\tns.hacknet.spendHashes(\\\"Sell for Money\\\", count)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function sellAllHashesForMoney(ns) {\\n\\tns.hacknet.spendHashes(\\\"Sell for Money\\\", \\\"\\\", Math.floor(ns.hacknet.numHashes() / ns.hacknet.hashCost(\\\"Sell for Money\\\")))\\n}\\n\\nexport function sellAtOverCapacity(ns, upgName = \\\"Sell for Money\\\") {\\n\\tlet hashes = ns.hacknet.numHashes();\\n\\tlet cap = ns.hacknet.hashCapacity();\\n\\tif (hashes / cap > .9) {\\n\\t\\tlet count = Math.floor((hashes - cap * .9) / ns.hacknet.hashCost(upgName))\\n\\t\\tif (count > 0) {\\n\\t\\t\\tif (ns.hacknet.spendHashes(upgName, \\\"\\\", count)) {\\n\\t\\t\\t\\tns.print(\\\"Sold hashes \\\" + count + \\\" times for \\\" + count * 1e6)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n}\\n\\nexport function cacheCheckAndUpgrade(ns) {\\n\\tlet hashes = ns.hacknet.numHashes();\\n\\tlet cap = ns.hacknet.hashCapacity();\\n\\tlet nodeNum = ns.hacknet.numNodes();\\n\\tif (cap-hashes < 100) {\\n\\t\\tlet smallestNode = 0\\n\\t\\tlet smallestNodeSize = ns.hacknet.getNodeStats(0).hashCapacity;\\n\\t\\tfor (let i = 0; i < nodeNum; i++) {\\n\\t\\t\\tif(ns.hacknet.getCacheUpgradeCost(i) < ns.getServerMoneyAvailable(\\\"home\\\")/100) {\\n\\t\\t\\t\\tns.hacknet.upgradeCache(i);\\n\\t\\t\\t}\\n\\t\\t\\tif(ns.hacknet.getNodeStats(i).hashCapacity < smallestNodeSize) {\\n\\t\\t\\t\\tsmallestNode = i;\\n\\t\\t\\t\\tsmallestNodeSize = ns.hacknet.getNodeStats(i).hashCapacity;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\")>ns.hacknet.getCacheUpgradeCost(smallestNode)) {\\n\\t\\t\\tns.hacknet.upgradeCache(smallestNode)\\n\\t\\t}\\n\\t}\\n}\\n\\n\\nexport function getAllUpgradeChoices(ns) {\\n\\n\\tlet upgradeCost = 1e15;\\n\\tlet score = 0;\\n\\tlet upgradeList = [];\\n\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tlet n = ns.hacknet.getNodeStats(i);\\n\\t\\t//level\\n\\t\\tupgradeCost = ns.hacknet.getLevelUpgradeCost(i, 1)\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level++, n.ramUsed, n.ram, n.cores) / upgradeCost\\n\\t\\tupgradeList.push({ \\\"nodeNum\\\": i, \\\"uName\\\": \\\"Level\\\", \\\"uCost\\\": upgradeCost, \\\"uScore\\\": score })\\n\\t\\tn.level--\\n\\t\\t//ram\\n\\t\\tupgradeCost = ns.hacknet.getRamUpgradeCost(i, 1)\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed = n.ramUsed * 2, n.ram = n.ram * 2, n.cores) / upgradeCost\\n\\t\\tupgradeList.push({ \\\"nodeNum\\\": i, \\\"uName\\\": \\\"Ram\\\", \\\"uCost\\\": upgradeCost, \\\"uScore\\\": score })\\n\\t\\tn.ram = n.ram / 2\\n\\t\\tn.ramUsed = n.ramUsed / 2\\n\\t\\t//cores\\n\\t\\tupgradeCost = ns.hacknet.getCoreUpgradeCost(i, 1)\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores++) / upgradeCost\\n\\t\\tupgradeList.push({ \\\"nodeNum\\\": i, \\\"uName\\\": \\\"Core\\\", \\\"uCost\\\": upgradeCost, \\\"uScore\\\": score })\\n\\n\\t\\tn.cores--\\n\\t}\\n\\treturn upgradeList;\\n}\\n\\nexport function getUpgradeChoice(ns, nodeNum, costLimit) {\\n\\tns.disableLog('ALL')\\n\\n\\tlet n = ns.hacknet.getNodeStats(nodeNum);\\n\\tns.print(n)\\n\\tlet bestUpgrade = \\\"\\\";\\n\\tlet bestUpgradeScore = 0;\\n\\tlet upgradeCost = 1e15;\\n\\tlet score = 0;\\n\\t//level\\n\\tupgradeCost = ns.hacknet.getLevelUpgradeCost(nodeNum, 1)\\n\\tif (upgradeCost < costLimit) {\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level++, n.ramUsed, n.ram, n.cores) / upgradeCost\\n\\t\\tns.print(\\\"Level \\\", n.level, \\\"Ram\\\", n.ram, \\\"Cores\\\", n.cores)\\n\\t\\tif (score > bestUpgradeScore) {\\n\\t\\t\\tbestUpgrade = \\\"Level\\\"\\n\\t\\t\\tbestUpgradeScore = score;\\n\\t\\t}\\n\\t\\tn.level--\\n\\t}\\n\\t//ram\\n\\tupgradeCost = ns.hacknet.getRamUpgradeCost(nodeNum, 1)\\n\\tif (upgradeCost < costLimit) {\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed = n.ramUsed * 2, n.ram = n.ram * 2, n.cores) / upgradeCost\\n\\t\\tns.print(\\\"Level \\\", n.level, \\\"Ram\\\", n.ram, \\\"Cores\\\", n.cores)\\n\\t\\tif (score > bestUpgradeScore) {\\n\\t\\t\\tbestUpgrade = \\\"Ram\\\"\\n\\t\\t\\tbestUpgradeScore = score;\\n\\t\\t}\\n\\t\\tn.ram = n.ram / 2\\n\\t\\tn.ramUsed = n.ramUsed / 2\\n\\t}\\n\\n\\t//core\\n\\tupgradeCost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1)\\n\\tif (upgradeCost < costLimit) {\\n\\t\\tscore = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores++) / upgradeCost\\n\\t\\tns.print(\\\"Level \\\", n.level, \\\"Ram\\\", n.ram, \\\"Cores\\\", n.cores)\\n\\t\\tif (score > bestUpgradeScore) {\\n\\t\\t\\tbestUpgrade = \\\"Core\\\"\\n\\t\\t\\tbestUpgradeScore = score;\\n\\t\\t}\\n\\t\\tn.cores--\\n\\t}\\n\\treturn bestUpgrade;\\n}\\n\\nexport function upgradeServer(ns, nodeNum, upgradeType, costLimit = getAvailableMoney(ns)) {\\n\\tif (upgradeType === \\\"Level\\\") {\\n\\t\\tif (ns.hacknet.getLevelUpgradeCost(nodeNum, 1) < costLimit) {\\n\\t\\t\\tsellHashesForMoney(ns, ns.hacknet.getLevelUpgradeCost(nodeNum, 1))\\n\\t\\t\\treturn ns.hacknet.upgradeLevel(nodeNum, 1)\\n\\t\\t}\\n\\t}\\n\\tif (upgradeType === \\\"Ram\\\") {\\n\\t\\tif (ns.hacknet.getRamUpgradeCost(nodeNum, 1) < costLimit) {\\n\\t\\t\\tsellHashesForMoney(ns, ns.hacknet.getRamUpgradeCost(nodeNum, 1))\\n\\t\\t\\treturn ns.hacknet.upgradeRam(nodeNum, 1)\\n\\t\\t}\\n\\t}\\n\\tif (upgradeType === \\\"Core\\\") {\\n\\t\\tif (ns.hacknet.getCoreUpgradeCost(nodeNum, 1) < costLimit) {\\n\\t\\t\\tsellHashesForMoney(ns, ns.hacknet.getCoreUpgradeCost(nodeNum, 1))\\n\\t\\t\\treturn ns.hacknet.upgradeCore(nodeNum, 1)\\n\\t\\t}\\n\\t}\\n\\tif (upgradeType === \\\"Cache\\\") {\\n\\t\\tif (ns.hacknet.getLevelUpgradeCost(nodeNum, 1) < costLimit) {\\n\\t\\t\\tsellHashesForMoney(ns, ns.hacknet.getCacheUpgradeCost(nodeNum, 1))\\n\\t\\t\\treturn ns.hacknet.upgradeCache(nodeNum, 1)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function getTimeToRecoup(ns, nodeNum, upgradeType) {\\n\\tns.disableLog('ALL')\\n\\n\\tlet n = ns.hacknet.getNodeStats(nodeNum);\\n\\tlet timeToRecoupCost = -1;\\n\\tlet upgradeCost = -1;\\n\\tlet startHGR = -1\\n\\tlet upgHGR = -1\\n\\tlet change = -1\\n\\tlet moneyPerSecond = -1\\n\\n\\tif (upgradeType === \\\"Level\\\") {\\n\\t\\tupgradeCost = ns.hacknet.getLevelUpgradeCost(nodeNum, 30)\\n\\t\\tstartHGR = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores)\\n\\t\\tupgHGR = ns.formulas.hacknetServers.hashGainRate(n.level = n.level + 30, n.ramUsed, n.ram, n.cores)\\n\\t\\tchange = upgHGR - startHGR\\n\\t\\tmoneyPerSecond = change * (1000000 / ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n\\t\\ttimeToRecoupCost = upgradeCost / moneyPerSecond\\n\\t}\\n\\tif (upgradeType === \\\"Ram\\\") {\\n\\t\\tupgradeCost = ns.hacknet.getRamUpgradeCost(nodeNum, 1)\\n\\t\\tstartHGR = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores)\\n\\t\\tupgHGR = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram = n.ram * 2, n.cores)\\n\\t\\tchange = upgHGR - startHGR\\n\\t\\tmoneyPerSecond = change * (1000000 / ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n\\t\\ttimeToRecoupCost = upgradeCost / moneyPerSecond\\n\\t}\\n\\tif (upgradeType === \\\"Core\\\") {\\n\\t\\tupgradeCost = ns.hacknet.getCoreUpgradeCost(nodeNum, 1)\\n\\t\\tstartHGR = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores)\\n\\t\\tupgHGR = ns.formulas.hacknetServers.hashGainRate(n.level, n.ramUsed, n.ram, n.cores++)\\n\\t\\tchange = upgHGR - startHGR\\n\\t\\tmoneyPerSecond = change * (1000000 / ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n\\t\\ttimeToRecoupCost = upgradeCost / moneyPerSecond\\n\\t}\\n\\n\\treturn timeToRecoupCost\\n}\\n\\nexport function spendChoice(ns) {\\n\\t\\n}\\n\\n\\nexport async function main(ns) {\\n\\tns.print(getTimeToRecoup(ns, 8, \\\"Level\\\"))\\n\\tns.print(getTimeToRecoup(ns, 8, \\\"Ram\\\"))\\n\\tns.print(getTimeToRecoup(ns, 8, \\\"Core\\\"))\\n}\",\"filename\":\"bp3_helpers_hacknet.js\",\"server\":\"home\"}}],[\"bp3_hacking_loop.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction numRunningScripts(ns, script, scriptArgs) {\\n\\tlet numScripts = 0;\\n\\tlet stringArgs = JSON.stringify(scriptArgs)\\n\\tlet allScripts = ns.ps(\\\"home\\\");\\n\\tfor (let i of allScripts) {\\n\\t\\tif (i.filename === script && JSON.stringify(i.args) === stringArgs) {\\n\\t\\t\\tnumScripts++\\n\\t\\t}\\n\\t}\\n\\treturn numScripts;\\n}\\n\\nfunction maxBatch(ns, target) {\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet maxBatchNum = Math.floor(wTime / 4) + 1\\n\\treturn maxBatchNum;\\n}\\n\\nexport async function main(ns) {\\n\\tlet target = ns.args[0] || \\\"n00dles\\\"\\n\\n\\tlet numRun = numRunningScripts(ns, \\\"bp3_hacking_batch.js\\\", [target, \\\"a\\\", 0, true])\\n\\tns.print(numRun)\\n\\tlet maxB = maxBatch(ns, target);\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tnumRun = numRunningScripts(ns, \\\"bp3_hacking_batch.js\\\", [target, \\\"a\\\", 0, true])\\n\\t\\tif (numRun < maxB)\\n\\t\\t\\tns.exec(\\\"bp3_hacking_batch.js\\\", \\\"home\\\", 1, target, \\\"a\\\", 0, true);\\n\\t\\tmaxB = maxBatch(ns, target);\\n\\t\\tawait ns.sleep(4000)\\n\\t}\\n}\",\"filename\":\"bp3_hacking_loop.js\",\"server\":\"home\"}}],[\"bp3_servers_homeManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tif (ns.getServerUsedRam(\\\"home\\\") / ns.getServerMaxRam(\\\"home\\\") > .5) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.singularity.getUpgradeHomeRamCost())\\n\\t\\t\\t\\tns.singularity.upgradeHomeRam();\\n\\t\\t}\\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n}\",\"filename\":\"bp3_servers_homeManager.js\",\"server\":\"home\"}}],[\"bp3_augs_augStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\n\\nlet aug = ns.args[0]||ns.singularity.getAugmentationStats(\\\"DataJack\\\")\\nns.print(aug)\\n\\n}\",\"filename\":\"bp3_augs_augStats.js\",\"server\":\"home\"}}],[\"bp3_doNotUse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_doNotUse.js\",\"server\":\"home\"}}],[\"bp3_pservers_list.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\nlet list = ns.getPurchasedServers();\\nlet hasDoNotUse = false;\\nlist.sort((a,b)=>ns.getServerMaxRam(a)-ns.getServerMaxRam(b))\\nfor(let i of list) {\\n\\thasDoNotUse=false;\\n\\tif(ns.ls(i).indexOf(\\\"bp3_doNotUse.js\\\")>-1) {\\n\\t\\thasDoNotUse = true\\n\\t}\\n\\tns.print(i,\\\" \\\",ns.getServerMaxRam(i),\\\" \\\",hasDoNotUse)\\n}\\n\\n\\n\\n}\",\"filename\":\"bp3_pservers_list.js\",\"server\":\"home\"}}],[\"bp3_hacking_allInOne.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport { getNetworkRamTotal, networkScan, getRootAccess, getAvailableHostServers, getTargetList, getTargetScore } from \\\"bp3_helpers_servers.js\\\"\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\";\\n\\nfunction getMaxScriptRam(ns, scriptList) {\\n\\tlet maxRam = 0;\\n\\tfor (let i of scriptList) {\\n\\t\\tlet sRam = ns.getScriptRam(i, \\\"home\\\");\\n\\t\\tif (sRam > maxRam) {\\n\\t\\t\\tmaxRam = sRam;\\n\\t\\t}\\n\\t}\\n\\treturn maxRam;\\n}\\n\\nfunction getMaxManagedThreads(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n\\tlet secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n\\tlet wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1));\\n\\tlet gThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n\\tlet wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1));\\n\\treturn hThreads + gThreads + wThreadsHack + wThreadsGrow;\\n}\\n\\n\\nfunction getAllRunningScripts(ns) {\\n\\tlet net = networkScan(ns)\\n\\tlet runningScripts = [];\\n\\tfor (let i of net) {\\n\\t\\tlet sRunningScripts = ns.ps(i);\\n\\t\\tfor (let j of sRunningScripts) {\\n\\t\\t\\tlet rScriptNames = runningScripts.map(function (el) { return el.filename })\\n\\t\\t\\tlet rScriptArgs = runningScripts.map(function (el) { return JSON.stringify(el.args) })\\n\\t\\t\\tif (rScriptNames.indexOf(j.filename) < 0 && rScriptArgs.indexOf(JSON.stringify(j.args)) < 0) {\\n\\t\\t\\t\\trunningScripts.push(j);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn runningScripts;\\n}\\n\\nfunction getTotBatchNum(ns, target) {\\n\\treturn Math.max(Math.floor(ns.getWeakenTime(target) / (hHacking.DRUM_TIME * 4)), 1)\\n}\\n\\nfunction getAvailableBatches(ns, target, schedule) {\\n\\tlet ars = getAllRunningScripts(ns)\\n\\n\\tlet totBatchNum = getTotBatchNum(ns, target)\\n\\tns.print(\\\"target\\\" + \\\" total batch num \\\" + totBatchNum)\\n\\tlet availBatches = [];\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tfor (let h = 0; h < totBatchNum; h++) {\\n\\t\\tavailBatches.push(h);\\n\\t}\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tfor (let j = 0; j < totBatchNum; j++) {\\n\\t\\t\\t//\\tns.print(j, i.args, i.filename)\\n\\t\\t\\t//\\tns.print(sArgs.indexOf(j))\\n\\t\\t\\tif ((sArgs[2] === j) && (sArgs[0] === target) && availBatches.indexOf(j) > -1) {\\n\\t\\t\\t\\t//\\t\\t\\tns.print(\\\"running avail batch pre splice\\\")\\n\\t\\t\\t\\t//\\t\\tns.print(availBatches)\\n\\t\\t\\t\\tavailBatches.splice(availBatches.indexOf(j), 1);\\n\\t\\t\\t\\tj--\\n\\t\\t\\t\\t//\\tns.print(availBatches);\\n\\t\\t\\t\\t//\\tns.print(\\\"running avail batch pre splice\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//\\tns.print(\\\"schedule\\\")\\n\\t//\\tns.print(schedule)\\n\\tfor (let k of schedule) {\\n\\t\\tfor (let m = 0; m < totBatchNum; m++) {\\n\\t\\t\\tif (k.nTarget === target && k.nBName === m && availBatches.indexOf(m) > -1) {\\n\\t\\t\\t\\t//\\tns.print(\\\"sched avail batch pre splice\\\")\\n\\t\\t\\t\\t//\\tns.print(availBatches)\\n\\t\\t\\t\\tavailBatches.splice(availBatches.indexOf(m), 1)\\n\\t\\t\\t\\tm--;\\n\\t\\t\\t\\t//\\t\\tns.print(\\\"sched avail batch post splice\\\")\\n\\n\\t\\t\\t\\t//\\tns.print(availBatches)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\n\\t//\\tns.print(\\\"avail batches\\\")\\n\\t//\\tns.print(target)\\n\\t//\\tns.print(availBatches);\\n\\treturn availBatches;\\n}\\n\\nfunction getLatestScheduledBatchEndTime(ns, target, queue) {\\n\\tlet tSchedule = queue.filter(el => (el.nTarget === target && el.n === \\\"w2\\\"));\\n\\tlet latestBatchTime = 0;\\n\\tfor (let i of tSchedule) {\\n\\t\\tif (i.nEndTime > latestBatchTime) {\\n\\t\\t\\tlatestBatchTime = i.nEndTime;\\n\\t\\t}\\n\\t}\\n\\treturn latestBatchTime;\\n}\\n\\nfunction getLatestRunningBatchTime(ns, target) {\\n\\tlet ars = getAllRunningScripts(ns)\\n\\t//\\tlet availBatches = [\\\"a\\\", \\\"b\\\", \\\"c\\\"]\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tlet latestBatchTime = 0;\\n\\tif (ars.length === 0) {\\n\\t\\tns.print(\\\"no running batches\\\")\\n\\t\\treturn 0;\\n\\t}\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tns.print(i.args, i.filename)\\n\\t\\tif ((sArgs.indexOf(target) > -1) && (sArgs.indexOf(\\\"w2\\\") > -1)) {\\n\\t\\t\\tif (sArgs[4] > latestBatchTime) {\\n\\t\\t\\t\\tlatestBatchTime = sArgs[4]\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\treturn latestBatchTime;\\n}\\n\\nfunction getLatestBatchTime(ns, target, queue) {\\n\\tns.print(\\\"Latests scheduled batch Time\\\")\\n\\tns.print(getLatestScheduledBatchEndTime(ns, target, queue))\\n\\tns.print(\\\"Latest running batch time\\\")\\n\\tns.print(getLatestRunningBatchTime(ns, target))\\n\\tlet latestBatchTime = Math.ceil(Math.max(getLatestScheduledBatchEndTime(ns, target, queue), getLatestRunningBatchTime(ns, target)))\\n\\tns.print(\\\"Latest batch Time\\\")\\n\\tns.print(latestBatchTime)\\n\\treturn latestBatchTime\\n}\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nasync function batchAdd(ns, target, batchName, earlyGame, queue, scheduledBatches) {\\n\\tgetRootAccess(ns, target);\\n\\thHacking.printServerStatus(ns, target);\\n\\tlet threads = 0;\\n\\n\\tif (ns.hasRootAccess(target) === true) {\\n\\t\\t//     find available ram for those threads\\n\\t\\tlet hostServers = getAvailableHostServers(ns, earlyGame, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n\\t\\t//     copy the weaken script to the server(s) with RAM\\n\\t\\tawait hHacking.scpHackingScripts(ns, hostServers)\\n\\t\\tlet actionList = hHacking.getActionList(ns, target)\\n\\t\\tlet latestBatchTime = getLatestBatchTime(ns, target, queue)\\n\\t\\tns.print(\\\"batchAdd target latestBatchTime\\\")\\n\\t\\tns.print(target, \\\" \\\", latestBatchTime)\\n\\t\\tlet batchStart = 0;\\n\\t\\tif (latestBatchTime > 2000000) { batchStart = latestBatchTime + hHacking.DRUM_TIME * 4 } else { batchStart = latestBatchTime + hHacking.DRUM_TIME * 4 - Date.now() }\\n\\t\\tlet eventSchedule = hHacking.scheduleEvents(ns, target, actionList, batchName, batchStart, latestBatchTime)\\n\\t\\tqueue = updateQueue(ns, queue, eventSchedule)\\n\\t\\thHacking.printServerStatus(ns, target);\\n\\t\\tthreads = getMaxManagedThreads(ns, target)\\n\\t\\tscheduledBatches.push({ bTarget: target, bName: batchName, bThreads: threads })\\n\\t}\\n\\treturn [queue, scheduledBatches, threads];\\n}\\n\\nfunction updateQueue(ns, queue, addedEvents) {\\n\\tif (queue.length > 0) {\\n\\t\\tqueue = queue.concat(addedEvents);\\n\\t} else {\\n\\t\\tqueue = addedEvents\\n\\t}\\n\\tqueue.sort((a, b) => a.nStart - b.nStart);\\n\\treturn queue;\\n}\\n\\nfunction getScheduledRam(ns, queue, hackScripts) {\\n\\tlet scheduledRam = 0;\\n\\tfor (let i of queue) {\\n\\t\\tscheduledRam = scheduledRam + i.nThreads * getMaxScriptRam(ns, hackScripts);\\n\\t}\\n\\treturn scheduledRam\\n}\\n\\n//===================MAIN==================\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\tlet hNet = ns.args[0] || false\\n\\t/*\\n\\tphase steps by 1 second\\n\\t\\tcheck running batches\\n\\t  \\n\\t\\n\\trunning batch list:\\n\\t\\twhen batch started, add to running batch list\\n\\t\\twhen batch complete (last weaken goes off), remove from running batch list\\n\\t\\tqueue new batches if ram available\\n\\t\\tbatch list comprised of target, batch name, estimated threads\\n\\t\\n\\tqueue based on open thread ram:\\n\\t\\tbatch threads estimated based on server at weakest sec, 45% money removal\\n\\t*/\\n\\n\\tlet hackScripts = [\\\"bp3_hack.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"];\\n\\n\\tlet usedRam = 0;\\n\\tlet scheduledBatches = []\\n\\tlet queue = [];\\n\\twhile (true) {\\n\\t\\t//root all\\n\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\t//get network max ram (not home);\\n\\t\\tlet networkTotalRam = getNetworkRamTotal(ns);\\n\\n\\t\\t//get running managers\\n\\n\\n\\t\\t//get target list, sort by score\\n\\t\\tlet targetList = getTargetList(ns);\\n\\t\\ttargetList.sort((a, b) => getTargetScore(ns, b) - getTargetScore(ns, a));\\n\\t\\t//determine if we can run another one on available space\\n\\t\\ttargetList = targetList.filter(el => ns.getWeakenTime(el) < 120000);\\n\\t\\t//targetList = [\\\"n00dles\\\"]\\n\\t\\tns.print(\\\"Target list \\\" + targetList)\\n\\t\\tfor (let i of targetList) {\\n\\t\\t\\tlet availBatches = getAvailableBatches(ns, i, queue)\\n\\t\\t\\tif (availBatches.length > 0) {\\n\\t\\t\\t\\tfor (let j of availBatches) {\\n\\n\\t\\t\\t\\t\\tlet newBatch = await batchAdd(ns, i, j, true, queue, scheduledBatches);\\n\\t\\t\\t\\t\\tqueue = newBatch[0]\\n\\t\\t\\t\\t\\tscheduledBatches = newBatch[1]\\n\\t\\t\\t\\t\\tusedRam = getScheduledRam(ns, queue, hackScripts)\\n\\t\\t\\t\\t\\tif (usedRam / networkTotalRam > 0.8) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"used ram / netTotRam \\\" + usedRam + \\\"/\\\" + networkTotalRam)\\n\\t\\t\\t\\tif (usedRam / networkTotalRam > 0.8) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t//\\tns.print(\\\"main queue\\\")\\n\\t\\t//\\tns.print(queue)\\n\\t\\tns.print(\\\"Now: \\\" + Date.now())\\n\\t\\tlet e = await hHacking.getLaunchPeriodEvents(ns, queue, hHacking.DRUM_TIME)\\n\\t\\tlet periodEvents = e[0]\\n\\n\\n\\t\\tqueue = e[1]\\n\\t\\tif (periodEvents.length === 0) {\\n\\t\\t\\tawait ns.sleep(hHacking.DRUM_TIME)\\n\\t\\t\\tns.print(\\\"queue empty\\\")\\n\\t\\t} else {\\n\\t\\t\\t//\\t\\t\\tns.print(\\\"launching period events\\\")\\n\\t\\t\\t//\\t\\t\\tns.print(Date.now());\\n\\t\\t\\t//\\t\\t\\tns.print(\\\"Remaining queue\\\")\\n\\t\\t\\t//\\t\\t\\tns.print(queue.length)\\n\\n\\n\\t\\t\\tqueue.sort((a, b) => a.nEndTime - b.nEndTime)\\n\\t\\t\\tqueue.sort((a, b) => a.nTarget - b.nTarget)\\n\\t\\t\\t/*\\t\\tfor (let i of queue) {\\n\\t\\t\\t\\t\\t\\tns.print(i.nTarget, \\\" \\\", i.nBName, \\\" \\\", i.n, \\\" \\\", i.nEndTime)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tns.print(\\\"Period Events\\\")\\n\\t\\t\\t\\t\\tns.print(periodEvents.length)\\n\\t\\t\\t\\t\\t*/\\n\\t\\t\\tperiodEvents.sort((a, b) => a.nEndTime - b.nEndTime)\\n\\t\\t\\tperiodEvents.sort((a, b) => a.nTarget - b.nTarget)\\n\\t\\t\\t/*\\t\\tfor (let j of periodEvents) {\\n\\t\\t\\t\\t\\t\\tns.print(j.nTarget, \\\" \\\", j.nBName, \\\" \\\", j.n, \\\" \\\", j.nEndTime)\\n\\t\\t\\t\\t\\t}*/\\n\\n\\t\\t\\t//ns.print(periodEvents)\\n\\n\\t\\t\\tawait hHacking.launchPeriodEvents(ns, periodEvents, hHacking.DRUM_TIME,hNet)\\n\\t\\t}\\n\\t\\tns.clearLog();\\n\\t\\t//\\tawait ns.sleep(hHacking.DRUM_TIME)\\n\\t}\\n}\",\"filename\":\"bp3_hacking_allInOne.js\",\"server\":\"home\"}}],[\"bp3_test_hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\";\\n\\nfunction getMaxScriptRam(ns, scriptList) {\\n\\tlet maxRam = 0;\\n\\tfor (let i of scriptList) {\\n\\t\\tlet sRam = ns.getScriptRam(i, \\\"home\\\");\\n\\t\\tif (sRam > maxRam) {\\n\\t\\t\\tmaxRam = sRam;\\n\\t\\t}\\n\\t}\\n\\treturn maxRam;\\n}\\n\\nfunction getMaxManagedThreads(ns, target) {\\n\\tlet serv = ns.getServer(target);\\n\\tlet hThreads = Math.floor(ns.hackAnalyzeThreads(target, serv.moneyMax / 2))\\n\\tlet secIncHack = Math.ceil(ns.hackAnalyzeSecurity(hThreads, target));\\n\\tlet wThreadsHack = Math.ceil(secIncHack / ns.weakenAnalyze(1));\\n\\tlet gThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n\\tlet wThreadsGrow = Math.ceil(ns.growthAnalyzeSecurity(gThreads, target, 1));\\n\\treturn hThreads + gThreads + wThreadsHack + wThreadsGrow;\\n}\\n\\nfunction getAvailableBatchRam(ns, totalRam, runningList, scriptList) {\\n\\tfor (let i of runningList) {\\n\\t\\ttotalRam = totalRam - getMaxManagedThreads(ns, i) * getMaxScriptRam(ns, scriptList);\\n\\t}\\n\\treturn totalRam;\\n}\\n\\nfunction scriptChoice(ns, target) {\\n\\tlet choice = \\\"bp3_hacking_batch.js\\\"\\n\\tif (hHacking.minSec(ns, target) === false || hHacking.maxMoney(ns, target) === false) {\\n\\t\\tchoice = \\\"bp3_hacking_prepBatch.js\\\"\\n\\t}\\n\\treturn choice;\\n}\\n\\nfunction getAllRunningScripts(ns) {\\n\\tlet net = hServers.networkScan(ns)\\n\\tlet runningScripts = [];\\n\\tfor (let i of net) {\\n\\t\\tlet sRunningScripts = ns.ps(i);\\n\\t\\tfor (let j of sRunningScripts) {\\n\\t\\t\\tlet rScriptNames = runningScripts.map(function (el) { return el.filename })\\n\\t\\t\\tlet rScriptArgs = runningScripts.map(function (el) { return JSON.stringify(el.args) })\\n\\t\\t\\tif (rScriptNames.indexOf(j.filename) < 0 && rScriptArgs.indexOf(JSON.stringify(j.args)) < 0) {\\n\\t\\t\\t\\trunningScripts.push(j);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn runningScripts;\\n}\\n\\nfunction getEstimatedEndTime(ns, target, startTime) {\\n\\treturn Math.ceil(ns.getWeakenTime(target) + 10000 + startTime);\\n}\\n\\nfunction getTotBatchNum(ns, target) {\\n\\treturn Math.max(Math.floor(ns.getWeakenTime(target) / (hHacking.DRUM_TIME * 4)), 1)\\n}\\n\\nfunction getAvailableBatches(ns, target, schedule) {\\n\\tlet ars = getAllRunningScripts(ns)\\n\\n\\tlet totBatchNum = getTotBatchNum(ns, target)\\n\\tns.print(\\\"target\\\" + \\\" total batch num \\\" + totBatchNum)\\n\\tlet availBatches = [];\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tfor (let h = 0; h < totBatchNum; h++) {\\n\\t\\tavailBatches.push(h);\\n\\t}\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tfor (let j = 0; j < totBatchNum; j++) {\\n\\t\\t\\t//\\tns.print(j, i.args, i.filename)\\n\\t\\t\\t//\\tns.print(sArgs.indexOf(j))\\n\\t\\t\\tif ((sArgs[2] === j) && (sArgs[0] === target) && availBatches.indexOf(j) > -1) {\\n\\t\\t\\t\\t//\\t\\t\\tns.print(\\\"running avail batch pre splice\\\")\\n\\t\\t\\t\\t//\\t\\tns.print(availBatches)\\n\\t\\t\\t\\tavailBatches.splice(availBatches.indexOf(j), 1);\\n\\t\\t\\t\\tj--\\n\\t\\t\\t\\t//\\tns.print(availBatches);\\n\\t\\t\\t\\t//\\tns.print(\\\"running avail batch pre splice\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//\\tns.print(\\\"schedule\\\")\\n\\t//\\tns.print(schedule)\\n\\tfor (let k of schedule) {\\n\\t\\tfor (let m = 0; m < totBatchNum; m++) {\\n\\t\\t\\tif (k.nTarget === target && k.nBName === m && availBatches.indexOf(m) > -1) {\\n\\t\\t\\t\\t//\\tns.print(\\\"sched avail batch pre splice\\\")\\n\\t\\t\\t\\t//\\tns.print(availBatches)\\n\\t\\t\\t\\tavailBatches.splice(availBatches.indexOf(m), 1)\\n\\t\\t\\t\\tm--;\\n\\t\\t\\t\\t//\\t\\tns.print(\\\"sched avail batch post splice\\\")\\n\\n\\t\\t\\t\\t//\\tns.print(availBatches)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\n\\t//\\tns.print(\\\"avail batches\\\")\\n\\t//\\tns.print(target)\\n\\t//\\tns.print(availBatches);\\n\\treturn availBatches;\\n}\\n\\nfunction getLatestScheduledBatchEndTime(ns, target, queue) {\\n\\tlet tSchedule = queue.filter(el => (el.nTarget === target && el.n === \\\"w2\\\"));\\n\\tlet latestBatchTime = 0;\\n\\tfor (let i of tSchedule) {\\n\\t\\tif (i.nEndTime > latestBatchTime) {\\n\\t\\t\\tlatestBatchTime = i.nEndTime;\\n\\t\\t}\\n\\t}\\n\\treturn latestBatchTime;\\n}\\n\\nfunction getLatestRunningBatchTime(ns, target) {\\n\\tlet ars = getAllRunningScripts(ns)\\n\\t//\\tlet availBatches = [\\\"a\\\", \\\"b\\\", \\\"c\\\"]\\n\\tars.filter(el => el.args.indexOf[target] > 0);\\n\\t//ns.print(ars);\\n\\tlet latestBatchTime = 0;\\n\\tif(ars.length === 0) {\\n\\t\\tns.print(\\\"no running batches\\\")\\n\\t\\treturn 0;\\n\\t}\\n\\tfor (let i of ars) {\\n\\t\\tlet sArgs = i.args;\\n\\t\\tns.print(i.args, i.filename)\\n\\t\\tif ((sArgs.indexOf(target) > -1) && (sArgs.indexOf(\\\"w2\\\") > -1)) {\\n\\t\\t\\tif (sArgs[4] > latestBatchTime) {\\n\\t\\t\\t\\tlatestBatchTime = sArgs[4]\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\treturn latestBatchTime;\\n}\\n\\nfunction getLatestBatchTime(ns, target, queue) {\\n\\tns.print(\\\"Latests scheduled batch Time\\\")\\n\\tns.print(getLatestScheduledBatchEndTime(ns, target, queue))\\n\\tns.print(\\\"Latest running batch time\\\")\\n\\tns.print(getLatestRunningBatchTime(ns, target))\\n\\tlet latestBatchTime = Math.ceil(Math.max(getLatestScheduledBatchEndTime(ns, target, queue), getLatestRunningBatchTime(ns, target)))\\n\\tns.print(\\\"Latest batch Time\\\")\\n\\tns.print(latestBatchTime)\\n\\treturn latestBatchTime }\\n\\n//get free ram\\n//determine number of threads we can run\\n//create target list and sort\\n//figure out what's already running\\n//choose target\\n//figure out thread ratio per batch\\n//time and distribute actions\\n//whwgw\\n//get weaken time, time should be 2 + weaken time - grow time\\n//get grow time\\n\\nasync function batchAdd(ns, target, batchName, earlyGame, queue, scheduledBatches) {\\n\\thServers.getRootAccess(ns, target);\\n\\thHacking.printServerStatus(ns, target);\\n\\tlet threads = 0;\\n\\n\\tif (ns.hasRootAccess(target) === true) {\\n\\t\\t//     find available ram for those threads\\n\\t\\tlet hostServers = hServers.getAvailableHostServers(ns, earlyGame, ns.getScriptRam(\\\"bp3_weaken.js\\\", \\\"home\\\"));\\n\\t\\t//     copy the weaken script to the server(s) with RAM\\n\\t\\tawait hHacking.scpHackingScripts(ns, hostServers)\\n\\t\\tlet actionList = hHacking.getActionList(ns, target)\\n\\t\\tlet latestBatchTime = getLatestBatchTime(ns, target, queue)\\n\\t\\tns.print(\\\"batchAdd target latestBatchTime\\\")\\n\\t\\tns.print(target, \\\" \\\", latestBatchTime)\\n\\t\\tlet batchStart = 0;\\n\\t\\tif (latestBatchTime > 2000000) { batchStart = latestBatchTime + hHacking.DRUM_TIME * 4 } else { batchStart = latestBatchTime + hHacking.DRUM_TIME * 4 - Date.now() }\\n\\t\\tlet eventSchedule = hHacking.scheduleEvents(ns, target, actionList, batchName, batchStart, latestBatchTime)\\n\\t\\tqueue = updateQueue(ns, queue, eventSchedule)\\n\\t\\thHacking.printServerStatus(ns, target);\\n\\t\\tthreads = getMaxManagedThreads(ns, target)\\n\\t\\tscheduledBatches.push({ bTarget: target, bName: batchName, bThreads: threads })\\n\\t}\\n\\treturn [queue, scheduledBatches, threads];\\n}\\n\\nfunction updateQueue(ns, queue, addedEvents) {\\n\\tif (queue.length > 0) {\\n\\t\\tqueue = queue.concat(addedEvents);\\n\\t} else {\\n\\t\\tqueue = addedEvents\\n\\t}\\n\\tqueue.sort((a, b) => a.nStart - b.nStart);\\n\\treturn queue;\\n}\\n\\nfunction getScheduledRam(ns, queue, hackScripts) {\\n\\tlet scheduledRam = 0;\\n\\tfor (let i of queue) {\\n\\t\\tscheduledRam = scheduledRam + i.nThreads * getMaxScriptRam(ns, hackScripts);\\n\\t}\\n\\treturn scheduledRam\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\t/*\\n\\tphase steps by 1 second\\n\\t\\tcheck running batches\\n\\t  \\n\\t\\n\\trunning batch list:\\n\\t\\twhen batch started, add to running batch list\\n\\t\\twhen batch complete (last weaken goes off), remove from running batch list\\n\\t\\tqueue new batches if ram available\\n\\t\\tbatch list comprised of target, batch name, estimated threads\\n\\t\\n\\tqueue based on open thread ram:\\n\\t\\tbatch threads estimated based on server at weakest sec, 45% money removal\\n\\t*/\\n\\n\\tlet hackScripts = [\\\"bp3_hack.js\\\", \\\"bp3_grow.js\\\", \\\"bp3_weaken.js\\\"];\\n\\n\\tlet eventSchedule = [];\\n\\n\\tlet usedRam = 0;\\n\\tlet scheduledBatches = []\\n\\tlet queue = [];\\n\\twhile (true) {\\n\\t\\t//root all\\n\\t\\tns.exec(\\\"bp3_hacking_rootAll.js\\\", \\\"home\\\");\\n\\t\\t//get network max ram (not home);\\n\\t\\tlet networkTotalRam = hServers.getNetworkRamTotal(ns);\\n\\n\\t\\t//get running managers\\n\\n\\n\\t\\t//get target list, sort by score\\n\\t\\tlet targetList = hServers.targetList(ns);\\n\\t\\ttargetList.sort((a, b) => hServers.targetScore(ns, b) - hServers.targetScore(ns, a));\\n\\t\\t//determine if we can run another one on available space\\n\\t\\ttargetList = targetList.filter(el => ns.getWeakenTime(el) < 120000);\\n\\t\\t//targetList = [\\\"n00dles\\\"]\\n\\t\\tns.print(\\\"Target list \\\" + targetList)\\n\\t\\tfor (let i of targetList) {\\n\\t\\t\\tlet availBatches = getAvailableBatches(ns, i, queue)\\n\\t\\t\\tif (availBatches.length > 0) {\\n\\t\\t\\t\\tfor (let j of availBatches) {\\n\\n\\t\\t\\t\\t\\tlet newBatch = await batchAdd(ns, i, j, true, queue, scheduledBatches);\\n\\t\\t\\t\\t\\tqueue = newBatch[0]\\n\\t\\t\\t\\t\\tscheduledBatches = newBatch[1]\\n\\t\\t\\t\\t\\tusedRam = getScheduledRam(ns, queue, hackScripts)\\n\\t\\t\\t\\t\\tif (usedRam / networkTotalRam > 0.8) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"used ram / netTotRam \\\" + usedRam + \\\"/\\\" + networkTotalRam)\\n\\t\\t\\t\\tif (usedRam / networkTotalRam > 0.8) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t//\\tns.print(\\\"main queue\\\")\\n\\t\\t//\\tns.print(queue)\\n\\t\\tns.print(\\\"Now: \\\" + Date.now())\\n\\t\\tlet e = await hHacking.getLaunchPeriodEvents(ns, queue, hHacking.DRUM_TIME)\\n\\t\\tlet periodEvents = e[0]\\n\\n\\n\\t\\tqueue = e[1]\\n\\t\\tif (periodEvents.length === 0) {\\n\\t\\t\\tawait ns.sleep(hHacking.DRUM_TIME)\\n\\t\\t\\tns.print(\\\"queue empty\\\")\\n\\t\\t} else {\\n\\t\\t\\t//\\t\\t\\tns.print(\\\"launching period events\\\")\\n\\t\\t\\t//\\t\\t\\tns.print(Date.now());\\n\\t\\t\\t//\\t\\t\\tns.print(\\\"Remaining queue\\\")\\n\\t\\t\\t//\\t\\t\\tns.print(queue.length)\\n\\n\\n\\t\\t\\tqueue.sort((a, b) => a.nEndTime - b.nEndTime)\\n\\t\\t\\tqueue.sort((a, b) => a.nTarget - b.nTarget)\\n\\t\\t\\t/*\\t\\tfor (let i of queue) {\\n\\t\\t\\t\\t\\t\\tns.print(i.nTarget, \\\" \\\", i.nBName, \\\" \\\", i.n, \\\" \\\", i.nEndTime)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tns.print(\\\"Period Events\\\")\\n\\t\\t\\t\\t\\tns.print(periodEvents.length)\\n\\t\\t\\t\\t\\t*/\\n\\t\\t\\tperiodEvents.sort((a, b) => a.nEndTime - b.nEndTime)\\n\\t\\t\\tperiodEvents.sort((a, b) => a.nTarget - b.nTarget)\\n\\t/*\\t\\tfor (let j of periodEvents) {\\n\\t\\t\\t\\tns.print(j.nTarget, \\\" \\\", j.nBName, \\\" \\\", j.n, \\\" \\\", j.nEndTime)\\n\\t\\t\\t}*/\\n\\n\\t\\t\\t//ns.print(periodEvents)\\n\\n\\t\\t\\tawait hHacking.launchPeriodEvents(ns, periodEvents, hHacking.DRUM_TIME)\\n\\t\\t}\\n\\t\\tns.clearLog();\\n\\t\\t//\\tawait ns.sleep(hHacking.DRUM_TIME)\\n\\t}\\n}\",\"filename\":\"bp3_test_hacking.js\",\"server\":\"home\"}}],[\"bp3_data_corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n\\n\\nexport const IndustriesData = {\\n  Agriculture: {\\n    startingCost: 40e9,\\n    description: \\\"Cultivate crops and breed livestock to produce food.\\\",\\n    recommendStarting: true,\\n    realEstateFactor: 0.72,\\n    scienceFactor: 0.5,\\n    hardwareFactor: 0.2,\\n    robotFactor: 0.3,\\n    aiCoreFactor: 0.3,\\n    advertisingFactor: 0.04,\\n    requiredMaterials: { Water: 0.5, Chemicals: 0.2 },\\n    producedMaterials: [\\\"Plants\\\", \\\"Food\\\"],\\n  },\\n  Spring: {\\n    startingCost: 10e9,\\n    description: \\\"Gather water through passive means.\\\",\\n    recommendStarting: false,\\n    realEstateFactor: 0.2,\\n    scienceFactor: 0.1,\\n    hardwareFactor: 0.0,\\n    robotFactor: 0.0,\\n    aiCoreFactor: 0.1,\\n    advertisingFactor: 0.03,\\n    requiredMaterials: {},\\n    producedMaterials: [\\\"Water\\\"],\\n  },\\n  Refinery: {\\n    startingCost: 50e9,\\n    description: \\\"Refine ore into usable metal.\\\",\\n    recommendStarting: true,\\n    realEstateFactor: 0.3,\\n    scienceFactor: 0.5,\\n    hardwareFactor: 0.5,\\n    robotFactor: 0.4,\\n    aiCoreFactor: 0.3,\\n    advertisingFactor: 0.04,\\n    requiredMaterials: { Ore: 1 },\\n    producedMaterials: [\\\"Metal\\\"],\\n  },\\n  Chemical: {\\n    startingCost: 70e9,\\n    description: \\\"Produce industrial chemicals.\\\",\\n    recommendStarting: false,\\n    realEstateFactor: 0.25,\\n    scienceFactor: 0.75,\\n    hardwareFactor: 0.2,\\n    robotFactor: 0.25,\\n    aiCoreFactor: 0.2,\\n    advertisingFactor: 0.07,\\n    requiredMaterials: { Plants: 1, Water: 0.5 },\\n    producedMaterials: [\\\"Chemicals\\\"],\\n  },\\n  Computers: {\\n    startingCost: 500e9,\\n    description: \\\"Develop and manufacture new computer hardware and networking infrastructures.\\\",\\n    product: {\\n      name: \\\"Product\\\",\\n      verb: \\\"Create\\\",\\n      desc: \\\"Design and manufacture a new computer hardware product!\\\",\\n      ratingWeights: {\\n        quality: 0.15,\\n        performance: 0.25,\\n        durability: 0.25,\\n        reliability: 0.2,\\n        aesthetics: 0.05,\\n        features: 0.1,\\n      },\\n    },\\n    recommendStarting: false,\\n    realEstateFactor: 0.2,\\n    scienceFactor: 0.62,\\n    robotFactor: 0.36,\\n    aiCoreFactor: 0.19,\\n    advertisingFactor: 0.17,\\n    requiredMaterials: { Metal: 2 },\\n    producedMaterials: [\\\"Hardware\\\"],\\n  },\\n  Fishing: {\\n    startingCost: 80e9,\\n    description: \\\"Produce food through the breeding and processing of fish and fish products.\\\",\\n    recommendStarting: false,\\n    realEstateFactor: 0.15,\\n    scienceFactor: 0.35,\\n    hardwareFactor: 0.35,\\n    robotFactor: 0.5,\\n    aiCoreFactor: 0.2,\\n    advertisingFactor: 0.08,\\n    requiredMaterials: { Plants: 0.5 },\\n    producedMaterials: [\\\"Food\\\"],\\n  },\\n  Restaurant: {\\n    startingCost: 10e9,\\n    description: \\\"Create your own restaurants all around the world.\\\",\\n    product: {\\n      name: \\\"Restaurant\\\",\\n      verb: \\\"Build\\\",\\n      desc: \\\"Build and manage a new restaurant!\\\",\\n      ratingWeights: {\\n        quality: 0.7,\\n        durability: 0.1,\\n        aesthetics: 0.2,\\n      },\\n    },\\n    recommendStarting: true,\\n    scienceFactor: 0.12,\\n    hardwareFactor: 0.15,\\n    robotFactor: 0.3,\\n    aiCoreFactor: 0.25,\\n    advertisingFactor: 0.25,\\n    realEstateFactor: 0.05,\\n    requiredMaterials: { Food: 0.5, Water: 0.5 },\\n  },\\n  Healthcare: {\\n    startingCost: 750e9,\\n    description: \\\"Create and manage hospitals.\\\",\\n    product: {\\n      name: \\\"Hospital\\\",\\n      verb: \\\"Build\\\",\\n      desc: \\\"Build and manage a new hospital!\\\",\\n      ratingWeights: {\\n        quality: 0.4,\\n        performance: 0.1,\\n        durability: 0.1,\\n        reliability: 0.3,\\n        features: 0.1,\\n      },\\n    },\\n    recommendStarting: false,\\n    realEstateFactor: 0.1,\\n    scienceFactor: 0.75,\\n    advertisingFactor: 0.11,\\n    hardwareFactor: 0.1,\\n    robotFactor: 0.1,\\n    aiCoreFactor: 0.1,\\n    requiredMaterials: { Robots: 10, \\\"AI Cores\\\": 5, Drugs: 5, Food: 5 },\\n  },\\n  Mining: {\\n    startingCost: 300e9,\\n    description: \\\"Extract and process metals from the earth.\\\",\\n    recommendStarting: false,\\n    realEstateFactor: 0.3,\\n    scienceFactor: 0.26,\\n    hardwareFactor: 0.4,\\n    robotFactor: 0.45,\\n    aiCoreFactor: 0.45,\\n    advertisingFactor: 0.06,\\n    requiredMaterials: { Hardware: 0.1 },\\n    producedMaterials: [\\\"Ore\\\", \\\"Minerals\\\"],\\n  },\\n  Pharmaceutical: {\\n    startingCost: 200e9,\\n    description: \\\"Discover, develop, and create new pharmaceutical drugs.\\\",\\n    product: {\\n      name: \\\"Drug\\\",\\n      verb: \\\"Develop\\\",\\n      desc: \\\"Design and develop a new pharmaceutical drug!\\\",\\n      ratingWeights: {\\n        quality: 0.2,\\n        performance: 0.2,\\n        durability: 0.1,\\n        reliability: 0.3,\\n        features: 0.2,\\n      },\\n    },\\n    recommendStarting: false,\\n    realEstateFactor: 0.05,\\n    scienceFactor: 0.8,\\n    hardwareFactor: 0.15,\\n    robotFactor: 0.25,\\n    aiCoreFactor: 0.2,\\n    advertisingFactor: 0.16,\\n    requiredMaterials: { Chemicals: 2, Water: 0.5 },\\n    producedMaterials: [\\\"Drugs\\\"],\\n  },\\n  RealEstate: {\\n    startingCost: 600e9,\\n    description: \\\"Develop and manage real estate properties.\\\",\\n    product: {\\n      name: \\\"Property\\\",\\n      verb: \\\"Develop\\\",\\n      desc: \\\"Develop a new piece of real estate property!\\\",\\n      ratingWeights: {\\n        quality: 0.2,\\n        durability: 0.25,\\n        reliability: 0.1,\\n        aesthetics: 0.35,\\n        features: 0.1,\\n      },\\n    },\\n    recommendStarting: false,\\n    robotFactor: 0.6,\\n    aiCoreFactor: 0.6,\\n    advertisingFactor: 0.25,\\n    scienceFactor: 0.05,\\n    hardwareFactor: 0.05,\\n    requiredMaterials: { Metal: 5, Plants: 1, Water: 2, Hardware: 4 },\\n    producedMaterials: [\\\"Real Estate\\\"],\\n  },\\n  Robotics: {\\n    startingCost: 1e12,\\n    description: \\\"Develop and create robots.\\\",\\n    product: {\\n      name: \\\"Robot\\\",\\n      verb: \\\"Design\\\",\\n      desc: \\\"Design and create a new robot or robotic system!\\\",\\n      ratingWeights: {\\n        quality: 0.1,\\n        performance: 0.2,\\n        durability: 0.2,\\n        reliability: 0.2,\\n        aesthetics: 0.1,\\n        features: 0.2,\\n      },\\n    },\\n    recommendStarting: false,\\n    realEstateFactor: 0.32,\\n    scienceFactor: 0.65,\\n    aiCoreFactor: 0.36,\\n    advertisingFactor: 0.18,\\n    hardwareFactor: 0.19,\\n    requiredMaterials: { Hardware: 5, \\\"AI Cores\\\": 3 },\\n    producedMaterials: [\\\"Robots\\\"],\\n  },\\n  Software: {\\n    startingCost: 25e9,\\n    description: \\\"Develop computer software and create AI Cores.\\\",\\n    product: {\\n      name: \\\"Software\\\",\\n      verb: \\\"Develop\\\",\\n      desc: \\\"Develop a new piece of software!\\\",\\n      ratingWeights: {\\n        quality: 0.2,\\n        performance: 0.2,\\n        reliability: 0.2,\\n        durability: 0.2,\\n        features: 0.2,\\n      },\\n    },\\n    recommendStarting: false,\\n    scienceFactor: 0.62,\\n    advertisingFactor: 0.16,\\n    hardwareFactor: 0.25,\\n    realEstateFactor: 0.15,\\n    aiCoreFactor: 0.18,\\n    robotFactor: 0.05,\\n    requiredMaterials: { Hardware: 0.5 },\\n    producedMaterials: [\\\"AI Cores\\\"],\\n  },\\n  Tobacco: {\\n    startingCost: 20e9,\\n    description: \\\"Create and distribute tobacco and tobacco-related products.\\\",\\n    product: {\\n      name: \\\"Product\\\",\\n      verb: \\\"Create\\\",\\n      desc: \\\"Create a new tobacco product!\\\",\\n      ratingWeights: {\\n        quality: 0.7,\\n        durability: 0.1,\\n        aesthetics: 0.2,\\n      },\\n    },\\n    recommendStarting: true,\\n    realEstateFactor: 0.15,\\n    scienceFactor: 0.75,\\n    hardwareFactor: 0.15,\\n    robotFactor: 0.2,\\n    aiCoreFactor: 0.15,\\n    advertisingFactor: 0.2,\\n    requiredMaterials: { Plants: 1 },\\n  },\\n  Water: {\\n    startingCost: 150e9,\\n    description: \\\"Distribute water and provide wastewater services.\\\",\\n    recommendStarting: false,\\n    realEstateFactor: 0.5,\\n    scienceFactor: 0.6,\\n    robotFactor: 0.4,\\n    aiCoreFactor: 0.4,\\n    advertisingFactor: 0.08,\\n    requiredMaterials: { Hardware: 0.1 },\\n    producedMaterials: [\\\"Water\\\"],\\n  },\\n}\\n\\n\\nexport const MaterialInfo = {\\n  Water: {\\n    name: \\\"Water\\\",\\n    size: 0.05,\\n    demandBase: 75,\\n    demandRange: [65, 85],\\n    competitionBase: 50,\\n    competitionRange: [40, 60],\\n    baseCost: 1500,\\n    maxVolatility: 0.2,\\n    baseMarkup: 6,\\n  },\\n  Ore: {\\n    name: \\\"Ore\\\",\\n    size: 0.01,\\n    demandBase: 50,\\n    demandRange: [40, 60],\\n    competitionBase: 80,\\n    competitionRange: [65, 95],\\n    baseCost: 500,\\n    maxVolatility: 0.2,\\n    baseMarkup: 6,\\n  },\\n  Minerals: {\\n    name: \\\"Minerals\\\",\\n    size: 0.04,\\n    demandBase: 75,\\n    demandRange: [90, 60],\\n    competitionBase: 80,\\n    competitionRange: [65, 95],\\n    baseCost: 500,\\n    maxVolatility: 0.2,\\n    baseMarkup: 6,\\n  },\\n  Food: {\\n    name: \\\"Food\\\",\\n    size: 0.03,\\n    demandBase: 80,\\n    demandRange: [70, 90],\\n    competitionBase: 60,\\n    competitionRange: [35, 85],\\n    baseCost: 5000,\\n    maxVolatility: 1,\\n    baseMarkup: 3,\\n  },\\n  Plants: {\\n    name: \\\"Plants\\\",\\n    size: 0.05,\\n    demandBase: 70,\\n    demandRange: [20, 90],\\n    competitionBase: 50,\\n    competitionRange: [30, 70],\\n    baseCost: 3000,\\n    maxVolatility: 0.6,\\n    baseMarkup: 3.75,\\n  },\\n  Metal: {\\n    name: \\\"Metal\\\",\\n    size: 0.1,\\n    demandBase: 80,\\n    demandRange: [75, 85],\\n    competitionBase: 70,\\n    competitionRange: [60, 80],\\n    baseCost: 2650,\\n    maxVolatility: 1,\\n    baseMarkup: 6,\\n  },\\n  Hardware: {\\n    name: \\\"Hardware\\\",\\n    size: 0.06,\\n    demandBase: 85,\\n    demandRange: [80, 90],\\n    competitionBase: 80,\\n    competitionRange: [65, 95],\\n    baseCost: 8e3,\\n    maxVolatility: 0.5,\\n    baseMarkup: 1,\\n  },\\n  Chemicals: {\\n    name: \\\"Chemicals\\\",\\n    size: 0.05,\\n    demandBase: 55,\\n    demandRange: [40, 70],\\n    competitionBase: 60,\\n    competitionRange: [40, 80],\\n    baseCost: 9e3,\\n    maxVolatility: 1.2,\\n    baseMarkup: 2,\\n  },\\n  Drugs: {\\n    name: \\\"Drugs\\\",\\n    size: 0.02,\\n    demandBase: 60,\\n    demandRange: [45, 75],\\n    competitionBase: 70,\\n    competitionRange: [40, 99],\\n    baseCost: 40e3,\\n    maxVolatility: 1.6,\\n    baseMarkup: 1,\\n  },\\n  Robots: {\\n    name: \\\"Robots\\\",\\n    size: 0.5,\\n    demandBase: 90,\\n    demandRange: [80, 99],\\n    competitionBase: 90,\\n    competitionRange: [80, 99],\\n    baseCost: 75e3,\\n    maxVolatility: 0.5,\\n    baseMarkup: 1,\\n  },\\n  \\\"AI Cores\\\": {\\n    name: \\\"AI Cores\\\",\\n    size: 0.1,\\n    demandBase: 90,\\n    demandRange: [80, 99],\\n    competitionBase: 90,\\n    competitionRange: [80, 99],\\n    baseCost: 15e3,\\n    maxVolatility: 0.8,\\n    baseMarkup: 0.5,\\n  },\\n  \\\"Real Estate\\\": {\\n    name: \\\"Real Estate\\\",\\n    size: 0.005,\\n    demandBase: 50,\\n    demandRange: [5, 99],\\n    competitionBase: 50,\\n    competitionRange: [25, 75],\\n    baseCost: 80e3,\\n    maxVolatility: 1.5,\\n    baseMarkup: 1.5,\\n  },\\n};\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_corporation.js\",\"server\":\"home\"}}],[\"bp3_corp_divisionStartup.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n\\nexport async function main(ns) {\\n\\tlet divType = ns.args[0] || \\\"Tobacco\\\"\\n\\tawait hCorp.divStartup(ns,divType);\\n}\",\"filename\":\"bp3_corp_divisionStartup.js\",\"server\":\"home\"}}],[\"bp3_stock_start.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction stuffCheck(ns) {\\n\\treturn ns.stock.hasWSEAccount() && ns.stock.hasTIXAPIAccess && ns.stock.has4SData() && ns.stock.has4SDataTIXAPI()\\n}\\n\\nfunction getAllStockStuff(ns) {\\n\\tif (!ns.stock.hasWSEAccount() && ns.getServerMoneyAvailable(\\\"home\\\") > 200e6 * 1.1) {\\n\\t\\tns.stock.purchaseWseAccount();\\n\\t}\\n\\tif (!ns.stock.hasTIXAPIAccess() && ns.getServerMoneyAvailable(\\\"home\\\") > 5e9 * 1.1) {\\n\\t\\tns.stock.purchaseTixApi();\\n\\t}\\n\\tif (!ns.stock.has4SData() && ns.getServerMoneyAvailable(\\\"home\\\") > 1e9 * 1.1) {\\n\\t\\tns.stock.purchase4SMarketData();\\n\\t}\\n\\tif (!ns.stock.has4SDataTIXAPI() && ns.getServerMoneyAvailable(\\\"home\\\") > 25e9 * 1.1) {\\n\\t\\tns.stock.purchase4SMarketDataTixApi();\\n\\t}\\n}\\n\\n\\nexport async function main(ns) {\\n\\tgetAllStockStuff(ns);\\n\\tif (stuffCheck) {\\n\\t\\tns.exec(\\\"bp3_stocks_4SManager.js\\\", \\\"home\\\", { preventDuplicates: true })\\n\\t} else {\\n\\t\\tns.tprint(\\\"Need more stock things before running stockMaster\\\")\\n\\t}\\n}\",\"filename\":\"bp3_stock_start.js\",\"server\":\"home\"}}],[\"bp3_corp_waitForInvestors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_corp_waitForInvestors.js\",\"server\":\"home\"}}],[\"bp3_crime_getBest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n\\nexport function getCrimeStatGain(ns, stat) {\\n\\tlet crimeScores = [];\\n\\tfor (let i of CRIMELIST) {\\n\\t\\tlet chance = ns.singularity.getCrimeChance(i)\\n\\t\\tlet stats = ns.singularity.getCrimeStats(i)\\n\\t\\tlet score = stats[stat] * chance / stats.time;\\n\\t\\tcrimeScores.push({ cName: i, cScore: score, cTime: stats.time })\\n\\t}\\n\\tcrimeScores.sort((a, b) => b.cScore - a.cScore);\\n\\treturn crimeScores\\n}\\n\\nexport function getBestCrime(ns, stat = \\\"money\\\") {\\n\\tlet scores = getCrimeStatGain(ns, stat)\\n\\tscores = scores.filter(el => el.cTime < 120000)\\n\\treturn scores[0].cName\\n}\\n\\nexport const CRIMELIST = [\\n\\t\\\"Assassination\\\",\\n\\t\\\"Bond Forgery\\\",\\n\\t\\\"Deal Drugs\\\",\\n\\t\\\"Grand Theft Auto\\\",\\n\\t\\\"Heist\\\",\\n\\t\\\"Homicide\\\",\\n\\t\\\"Kidnap\\\",\\n\\t\\\"Larceny\\\",\\n\\t\\\"Mug\\\",\\n\\t\\\"Rob Store\\\",\\n\\t\\\"Shoplift\\\",\\n\\t\\\"Traffick Arms\\\"\\n]\\n//import {getBestCrime} from \\\"bp3_helpers_player.js\\\"\\nexport async function main(ns) {\\n\\tlet stat = ns.args[0] || \\\"money\\\"\\nns.tprint(getBestCrime(ns,stat),\\\" \\\",stat)\\n}\",\"filename\":\"bp3_crime_getBest.js\",\"server\":\"home\"}}],[\"bp3_graft_augList.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\n\\nfunction getHackingGraftList(ns) {\\n\\tlet wantedList = hAugs.getAugsWithStat(ns, hAugs.HackStats);\\n\\tlet hackAugs = hAugs.getShoppingList(ns, wantedList)\\n\\tlet gAugs = ns.grafting.getGraftableAugmentations()\\n\\tlet hAugsNames = hackAugs.map(function (el) { return el.aName })\\n\\tgAugs = gAugs.filter(el => hAugsNames.indexOf(el) > -1)\\n\\tgAugs.sort((a, b) => ns.grafting.getAugmentationGraftTime(a) - ns.grafting.getAugmentationGraftTime(b))\\n\\tgAugs = gAugs.filter(el => ns.grafting.getAugmentationGraftPrice(el) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\tlet repAchievedAugs = hAugs.getRepAchievedAugs(ns);\\n\\tgAugs = gAugs.filter(el => repAchievedAugs.indexOf(el) < 0);\\n\\treturn gAugs\\n}\\n\\nexport async function main(ns) {\\n\\tlet gAugs = getHackingGraftList(ns);\\n\\tfor (let i of gAugs) {\\n\\t\\tns.print(i, \\\" \\\", ns.formatNumber(ns.grafting.getAugmentationGraftPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.formatNumber(ns.grafting.getAugmentationGraftTime(i) / (60 * 1000), \\\"0.00a\\\") + \\\" min\\\")\\n\\t}\\n\\n\\twhile (gAugs.length > 0) {\\n\\t\\tlet cWork = ns.singularity.getCurrentWork();\\n\\t\\tif (cWork === null) {\\n\\t\\t\\tgAugs = getHackingGraftList(ns)\\n\\t\\t\\tif (ns.getPlayer().location !== \\\"New Tokyo\\\") {\\n\\t\\t\\t\\tns.singularity.travelToCity(\\\"New Tokyo\\\");\\n\\t\\t\\t}\\n\\t\\t\\tns.grafting.graftAugmentation(gAugs[0], false)\\n\\t\\t\\tns.tprint(\\\"Started \\\" + gAugs[0])\\n\\t\\t\\tns.tprint(\\\"Time required: \\\" + (ns.grafting.getAugmentationGraftTime(gAugs[0])) / 60000 + \\\" minutes\\\");\\n\\t\\t} else {\\n\\t\\t\\tif (cWork.type !== \\\"GRAFTING\\\") {\\n\\t\\t\\t\\tgAugs = getHackingGraftList(ns)\\n\\t\\t\\t\\tif (ns.getPlayer().location !== \\\"New Tokyo\\\") {\\n\\t\\t\\t\\t\\tns.singularity.travelToCity(\\\"New Tokyo\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.grafting.graftAugmentation(gAugs[0], false)\\n\\t\\t\\t\\tns.tprint(\\\"Started \\\" + gAugs[0])\\n\\t\\t\\t\\tns.tprint(\\\"Time required: \\\" + (ns.grafting.getAugmentationGraftTime(gAugs[0])) / 60000 + \\\" minutes\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.print(ns.singularity.getCurrentWork())\\n\\t\\tns.print(\\\"Time required: \\\" + (ns.grafting.getAugmentationGraftTime(gAugs[0])) / 60000 + \\\" minutes\\\");\\n\\t\\tawait ns.sleep(60000)\\n\\t}\\n\\tns.tprint(\\\"All grafts completed\\\")\\n}\",\"filename\":\"bp3_graft_augList.js\",\"server\":\"home\"}}],[\"bp3_player_info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hPurchase from \\\"bp3_helpers_purchase.js\\\"\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\"\\nimport * as hPlayer from \\\"bp3_helpers_player.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\t//looping version:\\n\\t//get all augs with wanted stats\\n\\t//sum reptime by faction\\n\\t//sort factions by reptime (lowest to highest)\\n\\t//select faction with lowest reptime\\n\\t//attempt to join faction\\n\\t//if can't join, go to next\\n\\n\\t//choose stat increase (rep / hack / combat / bb)\\n\\tlet stats = hAugs.HackStats.concat(hAugs.RepStats);\\n\\t//choose target aug\\n\\tlet augsWHacking = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWHacking = hAugs.addUtilsToWantedList(ns, augsWHacking);\\n\\t////aug with lowest remaining rep req\\n\\taugsWHacking.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet sList = hAugs.getShoppingList(ns, augsWHacking); //removes owned\\n\\tsList = sList.filter(el => repAchievedNames.indexOf(el.aName) < 0);\\n\\tsList.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet factionList = []\\n\\tfor (let f of sList) {\\n\\t\\tif (factionList.includes(f.aFaction) === false) {\\n\\t\\t\\tfactionList.push(f.aFaction);\\n\\t\\t}\\n\\t}\\n\\tlet factionRepTime = [];\\n\\tfor (let g of factionList) {\\n\\t\\tfactionRepTime.push({ fName: g, fRepTime: 0 });\\n\\t\\tfor (let h of sList) {\\n\\t\\t\\tif (h.aFaction === g) {\\n\\t\\t\\t\\tlet fIndex = factionRepTime.findIndex(el => el.fName === g);\\n\\t\\t\\t\\tfactionRepTime[fIndex].fRepTime = factionRepTime[fIndex].fRepTime + h.aRepTime;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfactionRepTime = factionRepTime.filter(el => el.fRepTime > 0).sort((a, b) => a.fRepTime - b.fRepTime);\\n\\tlet factionRepTimeList = factionRepTime.map(function (el) { return el.fName })\\n\\n\\tns.print(\\\"==========Shopping =============\\\")\\n\\tfor (let g = 0; g < 10; g++) {\\n\\t\\tns.print(sList[g].aName, \\\" \\\", sList[g].aFaction)\\n\\t}\\n\\n\\t//choose faction\\n\\t//work on rep 'til goal\\n\\t//choose next target\\n\\t//\\tns.print(getFactionAugs(ns, \\\"CyberSec\\\"));\\n\\t//ns.print(hAugs.HackStats);\\n\\t//ns.print(augsWHacking);\\n\\t//ns.print(ns.singularity.getAugmentationStats(augsWHacking[2]))\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tlet availableHAugs = sList.filter(el => availableFactions.indexOf(el.aFaction) > -1);\\n\\t//ns.print(Object.keys(availableHAugs[0]))\\n\\tavailableHAugs = availableHAugs.filter(el => el.aName !== \\\"NeuroFlux Governor\\\");\\n\\tns.print(\\\"==========Work List=============\\\")\\n\\n\\tavailableHAugs.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\tfor (let j of availableHAugs) {\\n\\t\\tns.print(j)\\n\\t}\\n\\tif (availableHAugs.length > 0) {\\n\\t\\tlet choice = availableHAugs[0];\\n\\t\\tns.print(\\\"Choice \\\" + choice)\\n\\t} else {\\n\\t\\t//check for company factions\\n\\n\\t\\t//else do crimes\\n\\t}\\n\\n\\n\\tns.print(\\\"========simulated Purchase=========\\\")\\n\\tlet sim = hPurchase.simulatePurchase(ns, hAugs.getShoppingList(ns, augsWHacking));\\n\\tsim.sort((a, b) => b.aPrice - a.aPrice)\\n\\tfor (let i of sim) {\\n\\t\\tns.print(i.aName, \\\" \\\", i.aFaction, \\\" \\\", i.aScore / i.aPrice * 1000);\\n\\t}\\n\\n\\tns.print(hAugs.getTotalAugCost(ns, sim.map(function (el) { return el.aName })));\\n\\n\\n\\tns.print(\\\"===========rep reached========\\\")\\n\\tlet repAchievedCost = 0;\\n\\tlet repAchievedAlreadyListed = [];\\n\\tlet repAchievedMulti = 1;\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\tfor (let i of repAchievedNames) {\\n\\t\\tif (repAchievedAlreadyListed.indexOf(i) < 0) {\\n\\t\\t\\tns.print(i, \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i) * repAchievedMulti, \\\"0.00a\\\"));\\n\\t\\t\\trepAchievedCost = repAchievedCost + ns.singularity.getAugmentationPrice(i) * repAchievedMulti;\\n\\t\\t\\trepAchievedAlreadyListed.push(i)\\n\\t\\t\\trepAchievedMulti = repAchievedMulti * 2\\n\\t\\t}\\n\\t}\\n\\tif (repAchievedCost > ns.getServerMoneyAvailable(\\\"home\\\") && repAchievedCost < 25e6) {\\n\\t\\thPlayer.doBestCrime(ns, \\\"money\\\", repAchievedCost)\\n\\t}\\n\\tns.print(\\\"Total goal: \\\" + ns.nFormat(repAchievedCost, \\\"0.00a\\\"))\\n\\n\\t//\\tns.print(ns.singularity.getAugmentationStats(\\\"Wired Reflexes\\\"));\\n\\t//\\tfor(let i of sim) {\\n\\t//\\t\\tns.singularity.purchaseAugmentation(i.aFaction,i.aName);\\n\\t//\\t}\\n\\n}\",\"filename\":\"bp3_player_info.js\",\"server\":\"home\"}}],[\"bp3_test_canvas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n//const canvas = document.getElementById(\\\"jss20\\\");\\n//const ctx = canvas.getContext(\\\"2d\\\");\\n\\nfunction drawRectangle() {\\nctx.fillStyle = \\\"green\\\";\\nctx.fillRect(10,10,150,100)\\n}\\n\\nexport async function main(ns) {\\nns.alert(\\\"Test Test Test\\\"\\n)\\n}\",\"filename\":\"bp3_test_canvas.js\",\"server\":\"home\"}}],[\"bp3_helpers_progress.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n//get daedalus access\\n//--hack level\\n//--money\\n//--aug count\\n//join daedalus\\n//get red pill rep\\n//purchase red pill\\n//reset\\n//get world hack skill\\n//hack world\\n\\nfunction flightCheck(ns) {\\n\\tif(ns.getPlayer().factions.indexOf(\\\"Daedalus\\\")>-1) {\\n\\t\\tns.toast(\\\"Already part of Daedalus \\\"+ns.formatNumber(ns.singularity.getFactionRep(\\\"Daedalus\\\"),\\\"0.00a\\\" ))\\n\\t\\t\\treturn true;\\n\\t}\\n\\tif(ns.singularity.checkFactionInvitations().indexOf(\\\"Daedalus\\\")>-1) {\\n\\t\\tns.toast(\\\"Have Daedalus invite\\\") \\n\\t\\t\\treturn true;\\n\\t}\\n\\t\\tif(ns.getHackingLevel()>2500) {\\n\\t\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\")>100e9) {\\n\\t\\t\\t\\tif(ns.getOwnedAugmentations(false).length > 30) {\\n\\t\\t\\t\\t\\tns.toast(\\\"Daedalus ready!\\\")\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif(ns.getOwnedAugmentations(true).length > 30) {\\n\\t\\t\\t\\t\\tns.toast(\\\"install augs\\\") \\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.toast(\\\"Need more augs\\\")\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.toast(\\\"Need more money\\\")\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tns.toast(\\\"Need more Daedalus rep\\\")\\n\\t\\t\\treturn false;\\n\\t\\t}\\n}\\n\\nfunction redPillCheck(ns) {\\n\\tif(ns.singularity.getOwnedAugmentations(true).indexOf(\\\"The Red Pill\\\")>-1) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n\\n\\n\\nexport async function main(ns) {\\nflightCheck(ns)\\n}\",\"filename\":\"bp3_helpers_progress.js\",\"server\":\"home\"}}],[\"bp3_hacknet_sellAllHashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\nns.hacknet.spendHashes(\\\"Sell for Money\\\",\\\"\\\",Math.floor(ns.hacknet.numHashes()/ns.hacknet.hashCost(\\\"Sell for Money\\\")))\\n}\",\"filename\":\"bp3_hacknet_sellAllHashes.js\",\"server\":\"home\"}}],[\"bp3_monitors_augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\n\\nexport async function main(ns) {\\n\\t\\n\\t\\t\\n\\twhile (true) {\\n\\t\\n\\t\\tlet stats = hAugs.HackStats.concat(hAugs.RepStats);\\n\\t//choose target aug\\n\\tlet augsWHacking = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWHacking = hAugs.addUtilsToWantedList(ns, augsWHacking);\\n\\t////aug with lowest remaining rep req\\n\\taugsWHacking.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWHacking.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet repAchievedCost = 0;\\n\\tlet repAchievedMulti = 1;\\n\\tlet repAchievedAlreadyListed = [];\\n\\n\\t\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\t\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\t\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\t\\tfor (let i of repAchievedNames) {\\n\\t\\t\\tif (repAchievedAlreadyListed.indexOf(i) < 0) {\\n\\t\\t\\t\\tns.print(i, \\\" \\\", ns.formatNumber(ns.singularity.getAugmentationPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.formatNumber(ns.singularity.getAugmentationPrice(i) * repAchievedMulti, \\\"0.00a\\\"));\\n\\t\\t\\t\\trepAchievedCost = repAchievedCost + ns.singularity.getAugmentationPrice(i) * repAchievedMulti;\\n\\t\\t\\t\\trepAchievedAlreadyListed.push(i)\\n\\t\\t\\t\\trepAchievedMulti = repAchievedMulti * 2\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > repAchievedCost && repAchievedCost > 0) {\\n\\t\\t\\tns.toast(\\\"Can afford all Rep Achieved Augs \\\"+repAchievedNames.length)\\n\\t\\t} else {\\n\\t\\t\\tns.toast(\\\"Goal money \\\"+ns.formatNumber(repAchievedCost,\\\"0.00a\\\"))\\n\\t\\t}\\n\\t\\tns.print(\\\"Total goal: \\\" + ns.formatNumber(repAchievedCost, \\\"0.00a\\\"))\\n\\n\\t\\tawait ns.sleep(60000)\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_monitors_augs.js\",\"server\":\"home\"}}],[\"bp3_progress_hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n//start hacknet\\n//weaken joesguns\\n//join factions\\n//graft to victory\\n//sleeves faction reps\\n//sleeves augs go go\\n//sleeves algorithms to victory\\n\\n\\n\\n\\n}\",\"filename\":\"bp3_progress_hacknet.js\",\"server\":\"home\"}}],[\"bp3_corp_products.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as hCorp from \\\"bp3_helpers_corp.js\\\"\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\t\\n\\tlet allProducts = [];\\n\\tlet divs = ns.corporation.getCorporation().divisions\\n\\tfor (let i of divs) {\\n\\t\\tlet div = ns.corporation.getDivision(i)\\n\\t\\tif (div.makesProducts === true) {\\n\\t\\t\\thCorp.setMarketPrices(ns, i)\\n\\t\\t\\tlet cities = div.cities;\\n\\t\\t\\tfor (let j of cities) {\\n\\t\\t\\t\\tfor (let k of div.products) {\\n\\n\\t\\t\\t\\t\\tlet prod = ns.corporation.getProduct(i, j, k)\\n\\t\\t\\t\\t\\tallProducts.push(prod);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tns.print(allProducts)\\n\\tfor(let p of allProducts) {\\n\\t\\tlet keys = Object.keys(p);\\n\\t\\tlet vals = Object.values(p);\\n\\t\\tfor(let q in keys) {\\n\\t\\t\\tns.print(keys[q],\\\" \\\",vals[q])\\n\\t\\t}\\n\\t}\\n\\tawait ns.sleep(10000)\\n\\tns.clearLog()\\n\\t}\\n}\",\"filename\":\"bp3_corp_products.js\",\"server\":\"home\"}}],[\"bp3_corp_purchaseProdMaterials.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function buyProductionMaterial(ns, div, city, material, goalQty) {\\n\\tlet qty = ns.corporation.getMaterial(div, city, material).stored\\n\\t//ns.print(material, \\\" \\\", goalQty, \\\" \\\", qty)\\n\\tif (qty < goalQty) {\\n\\t\\tlet buyQty = Math.min((goalQty - qty), Math.floor(ns.corporation.getCorporation().funds / ns.corporation.getMaterial(div, city, material).marketPrice))\\n\\t\\tif (buyQty > 0)\\n\\t\\t\\tns.print(\\\"Buying prod mats \\\" + div, city, material)\\n\\t\\tns.corporation.bulkPurchase(div, city, material, buyQty)\\n\\t}\\n}\\nexport async function main(ns) {\\n\\tlet materials = [\\\"Real Estate\\\", \\\"Hardware\\\", \\\"Robots\\\", \\\"AI Cores\\\"]\\n\\tlet matQtys = [40000, 3333, 360, 2000]\\n\\n\\tlet div = ns.corporation.getDivision(\\\"CompostBin\\\")\\n\\tlet cities = div.cities;\\n\\tfor (let i of cities) {\\n\\t\\tfor (let j in materials) {\\n\\t\\t\\tbuyProductionMaterial(ns, div.name, i, materials[j], matQtys[j])\\n\\t\\t}\\n\\t}\\n\\n\\n}\",\"filename\":\"bp3_corp_purchaseProdMaterials.js\",\"server\":\"home\"}}],[\"bp3_corp_bribes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport { FactionNames } from \\\"bp3_data_factions.js\\\"\\n\\nexport function repDonations(ns) {\\n\\tlet augsList = hAugs.getAllAugs(ns, Object.values(FactionNames), hAugs.AllStats);\\n\\t//ns.print(augsList)\\n\\tif(augsList.length>0)\\n\\tfor (let i of augsList) {\\n\\t\\tdonateToRep(ns, i.aName, i.aFaction);\\n\\t}\\n}\\n\\nexport function donateToRep(ns, aug, faction) {\\n\\tlet playerFactions = ns.getPlayer().factions;\\n\\tif (playerFactions.includes(faction)) {\\n\\t\\t//\\tns.print(aug, faction)\\n\\t\\tlet neededRep = ns.singularity.getAugmentationRepReq(aug) - ns.singularity.getFactionRep(faction)\\n\\t\\tlet bribePerRep = 1e9\\n\\t\\tif (neededRep > 0) {\\n\\t\\t\\tlet amt = bribePerRep * neededRep;\\n\\t\\t\\tns.corporation.bribe(faction, amt)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function main(ns) {\\nwhile(true) {\\nrepDonations(ns);\\nawait ns.sleep(10000);\\n}\\n}\",\"filename\":\"bp3_corp_bribes.js\",\"server\":\"home\"}}],[\"bp3_hacknet_study.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\twhile (true) {\\n\\n\\t\\tlet numHash = ns.hacknet.numHashes();\\n\\t\\tlet cost = ns.hacknet.hashCost(\\\"Improve Studying\\\")\\n\\t\\twhile (numHash > cost) {\\n\\t\\t\\tawait ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\n\\t\\t\\tnumHash = ns.hacknet.numHashes();\\n\\t\\t\\tcost = ns.hacknet.hashCost(\\\"Improve Studying\\\")\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000)\\n\\t}\\n\\n}\",\"filename\":\"bp3_hacknet_study.js\",\"server\":\"home\"}}],[\"bp3_sleeves_university.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\nlet numSleeves = ns.sleeve.getNumSleeves();\\nfor(let i = 0; i<numSleeves;i++) {\\n\\tns.sleeve.setToUniversityCourse(i,\\\"Rothman University\\\",\\\"Algorithms\\\")\\n}\\n}\",\"filename\":\"bp3_sleeves_university.js\",\"server\":\"home\"}}],[\"bp3_progress_upgradeHome.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\nns.singularity.upgradeHomeRam();\\n}\",\"filename\":\"bp3_progress_upgradeHome.js\",\"server\":\"home\"}}],[\"bp3_sleeves_crime.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\nlet numSleeves = ns.sleeve.getNumSleeves();\\nfor(let i = 0; i<numSleeves;i++) {\\n\\tns.sleeve.setToCommitCrime(i,\\\"Mug\\\")\\n}\\n}\",\"filename\":\"bp3_sleeves_crime.js\",\"server\":\"home\"}}],[\"bp3_sleeves_purchaseAugs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nfunction purchaseAllAugs(ns) {\\n\\tlet numSleeves = ns.sleeve.getNumSleeves();\\n\\tfor (let i = 0; i < numSleeves; i++) {\\n\\t\\tif (ns.sleeve.getSleeve(i).shock === 0) {\\n\\t\\t\\tlet sAugs = ns.sleeve.getSleevePurchasableAugs(i);\\n\\t\\t\\tfor (let k of sAugs) {\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.sleeve.getSleeveAugmentationPrice(k.name))\\n\\t\\t\\t\\t\\tns.sleeve.purchaseSleeveAug(i, k.name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tpurchaseAllAugs(ns);\\n\\n\\n}\",\"filename\":\"bp3_sleeves_purchaseAugs.js\",\"server\":\"home\"}}],[\"bp3_sleeves_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hSleeve from \\\"bp3_helpers_sleeves.js\\\"\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_sleeves_manager.js\",\"server\":\"home\"}}],[\"bp3_corp_getInvestors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport { updateMaterialPrices } from \\\"bp3_helpers_corp.js\\\"\\n\\n\\n\\nexport async function main(ns) {\\n\\n\\tlet goal = ns.args[0];\\n\\tlet offer = ns.corporation.getInvestmentOffer();\\n\\twhile (true) {\\n\\t\\tlet divisions = ns.corporation.getCorporation().divisions\\n\\t\\tfor (let i of divisions) {\\n\\t\\t\\tlet cities = ns.corporation.getDivision(i).cities\\n\\t\\t\\tfor (let j of cities) {\\n\\t\\t\\t\\tupdateMaterialPrices(ns, i, j)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\toffer = ns.corporation.getInvestmentOffer();\\n\\t\\tns.print(offer);\\n\\t\\tns.print(ns.formatNumber(offer.funds));\\n\\t\\tif (offer.funds > goal) {\\n\\t\\t\\tns.corporation.acceptInvestmentOffer();\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.tprint(\\\"Accepted offer: \\\" + offer.funds);\\n}\",\"filename\":\"bp3_corp_getInvestors.js\",\"server\":\"home\"}}],[\"bp3_data_stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {LocationName} from \\\"bp3_data_locationNames.js\\\"\\n\\nexport const StockSymbol = {\\n  // Stocks for companies at which you can work\\n  [LocationName.AevumECorp]: \\\"ECP\\\",\\n  [LocationName.Sector12MegaCorp]: \\\"MGCP\\\",\\n  [LocationName.Sector12BladeIndustries]: \\\"BLD\\\",\\n  [LocationName.AevumClarkeIncorporated]: \\\"CLRK\\\",\\n  [LocationName.VolhavenOmniTekIncorporated]: \\\"OMTK\\\",\\n  [LocationName.Sector12FourSigma]: \\\"FSIG\\\",\\n  [LocationName.ChongqingKuaiGongInternational]: \\\"KGI\\\",\\n  [LocationName.AevumFulcrumTechnologies]: \\\"FLCM\\\",\\n  [LocationName.IshimaStormTechnologies]: \\\"STM\\\",\\n  [LocationName.NewTokyoDefComm]: \\\"DCOMM\\\",\\n  [LocationName.VolhavenHeliosLabs]: \\\"HLS\\\",\\n  [LocationName.NewTokyoVitaLife]: \\\"VITA\\\",\\n  [LocationName.Sector12IcarusMicrosystems]: \\\"ICRS\\\",\\n  [LocationName.Sector12UniversalEnergy]: \\\"UNV\\\",\\n  [LocationName.AevumAeroCorp]: \\\"AERO\\\",\\n  [LocationName.VolhavenOmniaCybersystems]: \\\"OMN\\\",\\n  [LocationName.ChongqingSolarisSpaceSystems]: \\\"SLRS\\\",\\n  [LocationName.NewTokyoGlobalPharmaceuticals]: \\\"GPH\\\",\\n  [LocationName.IshimaNovaMedical]: \\\"NVMD\\\",\\n  [LocationName.AevumWatchdogSecurity]: \\\"WDS\\\",\\n  [LocationName.VolhavenLexoCorp]: \\\"LXO\\\",\\n  [LocationName.AevumRhoConstruction]: \\\"RHOC\\\",\\n  [LocationName.Sector12AlphaEnterprises]: \\\"APHE\\\",\\n  [LocationName.VolhavenSysCoreSecurities]: \\\"SYSC\\\",\\n  [LocationName.VolhavenCompuTek]: \\\"CTK\\\",\\n  [LocationName.AevumNetLinkTechnologies]: \\\"NTLK\\\",\\n  [LocationName.IshimaOmegaSoftware]: \\\"OMGA\\\",\\n  [LocationName.Sector12FoodNStuff]: \\\"FNS\\\",\\n  [LocationName.Sector12JoesGuns]: \\\"JGN\\\",\\n\\n  // Stocks for other companies\\n  [\\\"Sigma Cosmetics\\\"]: \\\"SGC\\\",\\n  [\\\"Catalyst Ventures\\\"]: \\\"CTYS\\\",\\n  [\\\"Microdyne Technologies\\\"]: \\\"MDYN\\\",\\n  [\\\"Titan Laboratories\\\"]: \\\"TITN\\\",\\n}\\n\\n\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_stocks.js\",\"server\":\"home\"}}],[\"bp3_corp_marketAI.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport { updateMaterialPrices } from \\\"bp3_helpers_corp.js\\\"\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tlet corp = ns.corporation.getCorporation();\\n\\t\\tlet divisions = corp.divisions;\\n\\t\\tfor (let i of divisions) {\\n\\t\\t\\tlet cities = ns.corporation.getDivision(i).cities;\\n\\t\\t\\tfor (let j of cities) {\\n\\t\\t\\t\\tif(ns.corporation.hasWarehouse(i,j))\\n\\t\\t\\t\\tupdateMaterialPrices(ns, i, j)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"bp3_corp_marketAI.js\",\"server\":\"home\"}}],[\"bp3_stocks_batch_canRemove.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as dServers from \\\"bp3_data_servers.js\\\"\\nimport * as dStocks from \\\"bp3_data_stocks.js\\\"\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\"\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\n\\n/*\\nexport function influenceStockThroughServerGrow(server: Server, moneyGrown: number): void {\\n\\tconst orgName = server.organizationName;\\n\\tlet stock: Stock | null = null;\\n\\tif (typeof orgName === \\\"string\\\" && orgName !== \\\"\\\") {\\n\\t\\tstock = StockMarket[orgName];\\n\\t}\\n\\tif (!(stock instanceof Stock)) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst percTotalMoneyGrown = moneyGrown / server.moneyMax;\\n\\tif (Math.random() < percTotalMoneyGrown) {\\n\\t\\tstock.changeForecastForecast(stock.otlkMagForecast + forecastForecastChangeFromHack);\\n\\t}\\n}\\n*/\\n\\nfunction getKeyByValue(object, value) {\\n\\treturn Object.keys(object).find(key => object[key] === value);\\n}\\n\\nfunction getMyStocks(ns) {\\n\\tlet syms = ns.stock.getSymbols(ns)\\n\\tlet myStocks = [];\\n\\tfor (let i of syms) {\\n\\t\\tlet pos = ns.stock.getPosition(i);\\n\\t\\tif (pos[0] > 0) {\\n\\t\\t\\tmyStocks.push(i)\\n\\t\\t}\\n\\t}\\n\\treturn myStocks;\\n}\\n\\nasync function growStock(ns, sym) {\\n\\tlet target = getServerBySym(ns, sym);\\n\\tlet script = \\\"bp3_stocks_grow.js\\\"\\n\\tlet hostServers = hServers.getAvailableHostServers(ns, ns.getScriptRam(script, \\\"home\\\"));\\n\\tawait hHacking.scpHackingScripts(ns, hostServers, [script])\\n\\tlet mgp = hHacking.getMaxGrowthPercent(ns, target);\\n\\tlet totalThreads = hHacking.getGrowThreads(ns, target, mgp)\\n\\thHacking.distributeThreads(ns, script, hostServers, totalThreads, target, \\\"g\\\", \\\"stock\\\", 0)\\n}\\n\\nfunction getServerBySym(ns, sym) {\\n\\tlet org = getKeyByValue(dStocks.StockSymbol, sym);\\n\\tlet serverData = dServers.ServerMetadata.find(el => el.organizationName === org);\\n\\treturn serverData.hostname;\\n}\\n\\nfunction getSymByServer(ns,server) {\\n\\tlet serverData = dServers.ServerMetadata.find(el => el.hostname === server);\\n\\tns.print(serverData);\\n\\tlet sym = dStocks[serverData][organizationName]\\n\\tns.print(sym)\\n\\treturn sym;\\n}\\n\\n\\nexport async function main(ns) {\\n\\tlet myStocks = getMyStocks(ns)\\n\\tns.print(getMyStocks(ns))\\n\\tfor (let i of myStocks) {\\n\\t\\tlet target = getServerBySym(ns, i)\\n\\t\\tif (!hHacking.minSec(ns, target)) {\\n\\n\\t\\t} else {\\n\\t\\t\\tif (!hHacking.maxMoney(ns, target)) {\\n\\t\\t\\t\\tawait growStock(ns, i)\\n\\t\\t\\t\\tns.print(ns.getServer(target))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bp3_stocks_batch_canRemove.js\",\"server\":\"home\"}}],[\"bp3_stocks_grow_canRemove.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function writeHackDataToPort(ns,port, target, action,result, threads, time) {\\n\\tlet portInfo = { target: target, action: action, result: result, threads: threads, time: time }\\n\\tns.writePort(port, JSON.stringify(portInfo))\\n}\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet result = await ns.grow(target,{stock:true});\\n\\twriteHackDataToPort(ns, 1, target,\\\"grow\\\", Math.floor(result*1000)/1000,1, Date.now())\\n}\",\"filename\":\"bp3_stocks_grow_canRemove.js\",\"server\":\"home\"}}],[\"bp3_helpers_stock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n//if 4S Tix\\n//get expected returns and rank\\n//else get history\\n//if going down\\n//sell stocks\\n//if going up\\n//buy stocks\\n\\nexport function getMyStocks(ns) {\\n\\tlet symbols = ns.stock.getSymbols()\\n\\tlet myStocks = [];\\n\\tfor (let i of symbols) {\\n\\t\\tlet pos = ns.stock.getPosition(i)\\n\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\tmyStocks.push(i)\\n\\t\\t}\\n\\t}\\n\\treturn myStocks;\\n}\\n\\nexport function getBankRoll(ns) {\\n\\tlet bankRoll = ns.getServerMoneyAvailable(\\\"home\\\") - 5e9;\\n\\tbankRoll = (bankRoll < 0 ? 0 : bankRoll)\\n\\treturn bankRoll;\\n}\\n\\nexport function getMaxAffordableShares(ns, sym) {\\n\\tlet bankRoll = getBankRoll(ns)\\n\\tlet price = ns.stock.getPrice(sym)\\n\\tlet free = getAvailableShares(ns, sym);\\n\\tlet affordableShares = Math.min(bankRoll / price, free);\\n\\treturn affordableShares;\\n}\\n\\nexport function getAvailableShares(ns, sym) {\\n\\tlet max = ns.stock.getMaxShares(sym);\\n\\tlet pos = ns.stock.getPosition(sym)\\n\\tlet owned = pos[0] + pos[2];\\n\\tlet free = max - owned;\\n\\treturn free;\\n}\\n\\nexport function buyStocks(ns, sym, orderType) {\\n\\tlet bankRoll = getBankRoll(ns);\\n\\tlet affordable = getMaxAffordableShares(ns, sym);\\n\\tif (orderType === \\\"short\\\") {\\n\\t\\tns.stock.buyShort(sym, affordable);\\n\\t\\tbankRoll = getBankRoll(ns);\\n\\t} else {\\n\\t\\tns.stock.buyStock(sym, affordable);\\n\\t\\tbankRoll = getBankRoll(ns);\\n\\t}\\n\\treturn bankRoll;\\n}\\n\\nexport function sellStocks(ns, sym, orderType) {\\n\\tlet bankRoll = getBankRoll(ns);\\n\\tlet pos = ns.stock.getPosition(sym);\\n\\tlet longShares = pos[0]\\n\\tlet shortShares = pos[2]\\n\\tif (orderType === \\\"short\\\") {\\n\\t\\tns.stock.sellShort(sym, shortShares)\\n\\t\\tbankRoll = getBankRoll(ns)\\n\\t} else {\\n\\t\\tns.stock.sellStock(sym, longShares)\\n\\t\\tbankRoll = getBankRoll(ns)\\n\\t}\\n\\treturn bankRoll;\\n}\\n\\nexport function getExpectedReturn(ns,sym) {\\n\\tlet expRet = ns.stock.getVolatility(sym) * (2* (ns.stock.getForecast(sym)-.5))/2;\\n\\treturn expRet;\\n}\\n\\nexport function monitor(ns) {\\n\\tlet mystocks = getMyStocks(ns);\\n\\t\\tns.print(ns.formatNumber(getBankRoll(ns),\\\"0.00a\\\"));\\n\\n\\tfor(let i of mystocks) {\\n\\t\\tlet forecast = ns.formatPercent(ns.stock.getForecast(i));\\n\\t\\tlet position = ns.stock.getPosition(i);\\n\\t\\tlet value = ns.formatNumber(position[0]*position[1]+position[2]*position[3],\\\"0.00a\\\")\\n\\t\\tns.print(i, \\\" \\\",forecast,\\\" \\\",position,\\\" \\\",value);\\n\\t}\\n}\\n\\nfunction refresh(ns, stocks, myStocks) {\\n\\tlet corpus = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tmyStocks.length = 0;\\n\\tfor (let i = 0; i < stocks.length; i++) {\\n\\t\\tlet sym = stocks[i].sym;\\n\\t\\tstocks[i].price = ns.stock.getPrice(sym);\\n\\t\\tstocks[i].shares = ns.stock.getPosition(sym)[0];\\n\\t\\tstocks[i].buyPrice = ns.stock.getPosition(sym)[1];\\n\\t\\tstocks[i].vol = ns.stock.getVolatility(sym);\\n\\t\\tstocks[i].prob = 2 * (ns.stock.getForecast(sym) - 0.5);\\n\\t\\tstocks[i].expRet = stocks[i].vol * stocks[i].prob / 2;\\n\\t\\tcorpus += stocks[i].price * stocks[i].shares;\\n\\t\\tif (stocks[i].shares > 0) myStocks.push(stocks[i]);\\n\\t}\\n\\tstocks.sort(function (a, b) { return b.expRet - a.expRet });\\n\\treturn corpus;\\n}\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_helpers_stock.js\",\"server\":\"home\"}}],[\"bp3_stocks_4SManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hStock from \\\"bp3_helpers_stock.js\\\"\\n\\n//if 4S Tix\\n//get expected returns and rank\\n//else get history\\n//if going down\\n//sell stocks\\n//if going up\\n//buy stocks\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tlet bankRoll = Math.min(hStock.getBankRoll(ns, 0.8), 5e9)\\n\\twhile (true) {\\n\\t\\tlet myStocks = hStock.getMyStocks(ns);\\n\\n\\t\\t//sell phase;\\n\\t\\tlet bearish = myStocks.filter(el => ns.stock.getForecast(el) < .45);\\n\\t\\tfor (let i of bearish) {\\n\\t\\t\\tlet longQty = ns.stock.getPosition(i)[0];\\n\\t\\t\\tif (longQty > 0) {\\n\\t\\t\\t\\thStock.sellStocks(ns, i, \\\"long\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet bullish = myStocks.filter(el => ns.stock.getForecast(el) > .55);\\n\\t\\tfor (let j of bullish) {\\n\\t\\t\\tlet shortQty = ns.stock.getPosition(j)[2];\\n\\t\\t\\tif (shortQty > 0) {\\n\\t\\t\\t\\thStock.sellStocks(ns, j, \\\"short\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//buy phase\\n\\t\\tbankRoll = Math.min(hStock.getBankRoll(ns, 0.8), 5e9)\\n\\t\\tif (bankRoll > 1e9+100000) {\\n\\t\\t\\tlet syms = ns.stock.getSymbols();\\n\\t\\t\\tlet availStocks = syms.filter(el => hStock.getAvailableShares(ns, el) > 0);\\n\\t\\t\\tavailStocks= availStocks.filter(el=> ns.stock.getForecast(el)>0.55);\\n\\t\\t\\tavailStocks.sort((a, b) => hStock.getExpectedReturn(ns, b) - hStock.getExpectedReturn(ns, a));\\n\\t\\t\\tfor(let i of availStocks) {\\n\\t\\t\\t\\tif (hStock.getMaxAffordableShares(ns, i)>0) {\\n\\t\\t\\t\\t\\thStock.buyStocks(ns,i,\\\"long\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\thStock.monitor(ns)\\n\\t\\tawait ns.sleep(60000)\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_stocks_4SManager.js\",\"server\":\"home\"}}],[\"bp3_contract_getContractDescription.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\";\\n\\nexport async function main(ns) {\\nlet contract = ns.args[0]\\nlet target = ns.args[1]\\nns.print(ns.codingcontract.getDescription(contract,target));\\n}\",\"filename\":\"bp3_contract_getContractDescription.js\",\"server\":\"home\"}}],[\"bp3_contract_getList.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\n\\nexport function getContractList(ns) {\\n\\tlet net = hServers.networkScan(ns);\\n\\tlet contracts = [];\\n\\tfor (let i of net) {\\n\\t\\tlet files = ns.ls(i)\\n\\t\\tfor (let j of files) {\\n\\t\\t\\tif (j.includes(\\\".cct\\\")) {\\n\\t\\t\\t\\tlet type = ns.codingcontract.getContractType(j, i)\\n\\t\\t\\t\\tcontracts.push([j, i, type]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn contracts;\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\tns.tail();\\n\\tlet list = [];\\n\\twhile (true) {\\n\\t\\tlist = getContractList(ns);\\n\\t\\tif (list.length > 0) {\\n\\t\\t\\tns.run(\\\"bp3_contract_solveAll.js\\\")\\n\\t\\t}\\n\\t\\tlist = getContractList(ns);\\n\\t\\tif (list.length > 0) {\\n\\t\\t\\tif (list.length < 5) {\\n\\t\\t\\t\\tns.toast(JSON.stringify(list), \\\"info\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.toast(list.length + \\\" contracts available\\\")\\n\\t\\t\\t}\\n\\t\\t\\tlist.sort((a, b) => a[2] - b[2]);\\n\\t\\t\\tfor (let i of list) {\\n\\t\\t\\t\\tns.print(i[1], \\\" \\\", i[0], \\\" \\\", ns.codingcontract.getContractType(i[0], i[1]));\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tawait ns.sleep(60000);\\n\\t\\tns.clearLog();\\n\\t}\\n}\",\"filename\":\"bp3_contract_getList.js\",\"server\":\"home\"}}],[\"bp3_contract_solveAll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport *  as cSolver from \\\"bp3_contract_solvers.js\\\"\\nimport * as cContractList from \\\"bp3_contract_getList.js\\\"\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\tlet list = cContractList.getContractList(ns);\\n\\n\\tfor (let i of list) {\\n\\t\\tlet type = ns.codingcontract.getContractType(i[0], i[1])\\n\\n\\t\\tif (type === \\\"Algorithmic Stock Trader I\\\") {\\n\\t\\t\\tns.print(i[0], i[1])\\n\\t\\t\\tlet answer = cSolver.algorithmicStockTraderI(ns, i[0], i[1]);\\n\\t\\t\\tns.print(answer);\\n\\t\\t\\tns.tprint(ns.codingcontract.attempt(answer, i[0], i[1]))\\n\\t\\t}\\n\\t\\tif (type === \\\"Encryption I: Caesar Cipher\\\") {\\n\\t\\t\\tns.print(i[0], i[1])\\n\\t\\t\\tlet answer = cSolver.caesarCipher(ns, i[0], i[1]);\\n\\t\\t\\tns.print(answer);\\n\\t\\t\\tns.tprint(ns.codingcontract.attempt(answer, i[0], i[1]))\\n\\t\\t}\\n\\t\\tif (type === \\\"Encryption II: Vigenère Cipher\\\") {\\n\\t\\t\\tns.print(i[0], i[1])\\n\\t\\t\\tlet answer = cSolver.vigenereCipher(ns, i[0], i[1]);\\n\\t\\t\\tns.print(answer);\\n\\t\\t\\tns.tprint(ns.codingcontract.attempt(answer, i[0], i[1]))\\n\\t\\t}\\n\\n\\t\\tif (type === \\\"Find Largest Prime Factor\\\") {\\n\\t\\t\\tns.print(i[0], i[1])\\n\\t\\t\\tlet answer = cSolver.findLargestPrimeFactor(ns, i[0], i[1]);\\n\\t\\t\\tns.print(answer);\\n\\t\\t\\tns.tprint(ns.codingcontract.attempt(answer, i[0], i[1]))\\n\\t\\t}\\n\\t\\tif (type === \\\"Spiralize Matrix\\\") {\\n\\t\\t\\t//\\t\\tns.print(i[0], i[1])\\n\\t\\t\\t//\\tcSolver.spiralizer(ns, i[0], i[1])\\n\\t\\t}\\n\\n\\t\\tif (type === \\\"Subarray with Maximum Sum\\\") {\\n\\t\\t\\tns.print(i[0], i[1])\\n\\t\\t\\tlet answer = cSolver.subarrayWithMaximumSum(ns, i[0], i[1]);\\n\\t\\t\\tns.print(answer);\\n\\t\\t\\tns.tprint(ns.codingcontract.attempt(answer, i[0], i[1]));\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bp3_contract_solveAll.js\",\"server\":\"home\"}}],[\"bp3_contract_generateDummy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args[0] === undefined) {\\n\\t\\tlet types = ns.codingcontract.getContractTypes();\\n\\t\\tfor (let i of types) {\\n\\t\\t\\tns.print(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.codingcontract.createDummyContract(ns.args[0])\\n\\t}\\n}\",\"filename\":\"bp3_contract_generateDummy.js\",\"server\":\"home\"}}],[\"bp3_contract_solvers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function spiralizer(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"start contract \\\" + filename, host)\\n\\tns.print(data);\\n\\tlet answer = [];\\n\\t//array 1, push all elements to answer\\n\\tfor (let i = 0; i < Math.pow(data.length, 2); i++) {\\n\\t\\tns.print(\\\"spiralizer top\\\")\\n\\t\\tif (data.length === undefined || data.length === 0) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tlet shifted = data.shift();\\n\\t\\tanswer = answer.concat(shifted);\\n\\t\\tns.print(data)\\n\\t\\t//all arrays, pop last element push last element of each to answer\\n\\t\\tns.print(\\\"spiralizer right\\\")\\n\\t\\tif (data.length === undefined || data.length === 0) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tfor (let j in data) {\\n\\t\\t\\tif (data[j].length === undefined || data[j].length === 0) {\\n\\t\\t\\t\\tdata.splice(j, 1)\\n\\t\\t\\t\\tj--\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tanswer.push(data[j].pop())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tns.print(data)\\n\\t\\t//last array, pop all elements, push to answer\\n\\t\\tns.print(\\\"spiralizer bottom\\\")\\n\\t\\tif (data.length === undefined || data.length === 0) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tlet popped = data.pop()\\n\\t\\tfor (let k = popped.length; k > 0; k--) {\\n\\t\\t\\tanswer.push(popped.pop());\\n\\t\\t}\\n\\t\\tns.print(data)\\n\\t\\t//all arrays, end to start, shift first elements, push to answer\\n\\t\\tns.print(\\\"spiralizer left\\\")\\n\\t\\tif (data.length === undefined || data.length === 0) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tns.print(data)\\n\\t\\tfor (let m = data.length; m > 0; m--) {\\n\\t\\t\\tns.print(m)\\n\\t\\t\\tns.print(data[m - 1])\\n\\t\\t\\tif (data[m - 1].length === undefined || data[m - 1].length === 0) {\\n\\t\\t\\t\\tdata.splice(m - 1, 1)\\n\\t\\t\\t\\tm++\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tanswer.push(data[m - 1].shift())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t//start over\\n\\t\\tns.print(\\\"end loop\\\")\\n\\t\\tns.print(\\\"answer\\\")\\n\\t\\tns.print(answer);\\n\\t\\tns.print(\\\"remaining data\\\")\\n\\t\\tns.print(data)\\n\\t}\\n\\tanswer = answer.filter(a => a);\\n\\n\\tns.print(\\\"answer\\\")\\n\\tns.print(answer);\\n\\tns.print(\\\"remaining data\\\")\\n\\tns.print(data)\\n\\tns.print(\\\"end contract \\\" + filename, \\\" \\\", host)\\n\\treturn answer\\n}\\n\\nconst LetterList = [\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\", \\\"F\\\", \\\"G\\\", \\\"H\\\", \\\"I\\\", \\\"J\\\", \\\"K\\\", \\\"L\\\", \\\"M\\\", \\\"N\\\", \\\"O\\\", \\\"P\\\", \\\"Q\\\", \\\"R\\\", \\\"S\\\", \\\"T\\\", \\\"U\\\", \\\"V\\\", \\\"W\\\", \\\"X\\\", \\\"Y\\\", \\\"Z\\\"]\\n\\nfunction cipher(ns, letter, shiftNumber, direction = \\\"right\\\") {\\n\\tif (letter === \\\" \\\") {\\n\\t\\treturn \\\" \\\"\\n\\t} else {\\n\\t\\tlet letterNumber = LetterList.indexOf(letter) + 1;\\n\\t\\tlet shiftedNumber = -1;\\n\\t\\tif (direction === \\\"right\\\") {\\n\\t\\t\\tshiftedNumber = letterNumber + shiftNumber\\n\\t\\t\\tshiftedNumber = (shiftedNumber > 26 ? shiftedNumber - 26 : shiftedNumber);\\n\\t\\t} else {\\n\\t\\t\\tshiftedNumber = letterNumber - shiftNumber\\n\\t\\t\\tshiftedNumber = (shiftedNumber < 1 ? shiftedNumber + 26 : shiftedNumber);\\n\\t\\t}\\n\\t\\treturn LetterList[shiftedNumber - 1]\\n\\t}\\n}\\n\\nexport function vigenereCipher(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tlet encodedLength = data[0].length;\\n\\tlet decoderRepeatedNo = Math.ceil(encodedLength / data[1].length);\\n\\tlet decoder = data[1].repeat(decoderRepeatedNo).slice(0, encodedLength);\\n\\tlet answer = \\\"\\\"\\n\\tns.print(decoder)\\n\\tfor (let i in data[0]) {\\n\\t\\tanswer = answer + cipher(ns, data[0][i], LetterList.indexOf(decoder[i]));\\n\\t}\\n\\tns.print(data[0]);\\n\\tns.print(decoder)\\n\\tns.print(answer);\\n\\treturn answer;\\n}\\n\\nexport function caesarCipher(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(data)\\n\\tlet answer = \\\"\\\"\\n\\tfor (let i in data[0]) {\\n\\t\\tanswer = answer + (cipher(ns, data[0][i], data[1], \\\"left\\\"))\\n\\t}\\n\\treturn answer;\\n}\\n\\nexport function shortestPathInaGrid(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(data)\\n}\\n\\nexport function algorithmicStockTraderI(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"start data\\\");\\n\\tns.print(data)\\n\\tlet bestData = -1\\n\\tlet bestRemainder = -1\\n\\tlet bestProfit = 0;\\n\\tfor (let i = 0; i < data.length; i++) {\\n\\t\\tfor (let j = i + 1; j < data.length; j++) {\\n\\t\\t\\tlet profit = data[j] - data[i];\\n\\t\\t\\tif (profit > bestProfit) {\\n\\t\\t\\t\\tbestData = i;\\n\\t\\t\\t\\tbestRemainder = j\\n\\t\\t\\t\\tbestProfit = profit\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn bestProfit\\n}\\n\\nexport function subarrayWithMaximumSum(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"start data\\\");\\n\\tns.print(data)\\n\\tlet max = (data.reduce((a, b) => Math.max(a, b), -Infinity));\\n\\tlet answer = max;\\n\\tif (max <= 0) {\\n\\t\\treturn answer;\\n\\t} else {\\n\\t\\tlet topArray = []\\n\\t\\ttopArray.push(max);\\n\\t\\tfor (let i = 0; i < data.length; i++) {\\n\\t\\t\\tfor (let j = i; j < data.length + 1; j++) {\\n\\t\\t\\t\\tlet sliceArr = data.slice(i, j)\\n\\t\\t\\t\\tlet sliceSum = sumOfArray(ns, sliceArr);\\n\\t\\t\\t\\tif (answer < sliceSum) {\\n\\t\\t\\t\\t\\ttopArray = sliceArr;\\n\\t\\t\\t\\t\\tanswer = sliceSum;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(i, \\\" \\\", j, \\\" \\\", sliceArr, \\\" \\\", sliceSum);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tns.print(data);\\n\\treturn answer;\\n}\\n\\nfunction sumOfArray(ns, arr) {\\n\\tlet sumArr = arr.reduce((acc, curr) => acc + curr, 0)\\n\\treturn sumArr;\\n}\\n\\nfunction findAllValidMathExpressions(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"start data\\\");\\n\\tns.print(data)\\n\\tlet operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\"]\\n\\tlet result = data[1];\\n\\tlet dataString = data[0].toString();\\n\\tlet answers = [];\\n\\tns.print(dataString)\\n\\tfor (let i = 1; i < dataString.length - 1; i++) {\\n\\t\\tns.print(dataString[i])\\n\\t\\tfor (let j of operators) {\\n\\t\\t\\tdataString.splice(i, 0, j)\\n\\t\\t\\tif (eval(dataString) === result) {\\n\\t\\t\\t\\tanswers.push(dataString)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function findLargestPrimeFactor(ns, filename, host) {\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"start data\\\");\\n\\tns.print(data)\\n\\tlet answer = maxPrimeFactor(data)\\n\\treturn answer;\\n}\\n\\nfunction maxPrimeFactor(n) {\\n\\tlet maxPrime = -1;\\n\\twhile (n % 2 == 0) {\\n\\t\\tn = n / 2;\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\twhile (n % 3 == 0) {\\n\\t\\tn = n / 3;\\n\\t\\tmaxPrime = 3;\\n\\t}\\n\\tfor (let i = 5; i <= Math.sqrt(n); i += 6) {\\n\\t\\twhile (n % i == 0) {\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t\\tn = n / i;\\n\\t\\t}\\n\\t\\twhile (n % (i + 2) == 0) {\\n\\t\\t\\tmaxPrime = i + 2;\\n\\t\\t\\tn = n / (i + 2);\\n\\t\\t}\\n\\t}\\n\\treturn n > 4 ? n : maxPrime;\\n}\\n\\nexport async function main(ns) {\\n\\n\\tlet filename = ns.args[0]\\n\\tlet host = ns.args[1]\\n\\n\\tns.print(ns.codingcontract.getData(filename, host));\\n\\tns.print(findLargestPrimeFactor(ns, filename, host))\\n\\n\\n\\n}\",\"filename\":\"bp3_contract_solvers.js\",\"server\":\"home\"}}],[\"bp3_contract_solverTesting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nasync function totalWaysToSumI(ns, filename, host) {\\n\\tns.disableLog('sleep');\\n\\tns.print(\\\"start test function totalWaysToSumI\\\")\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"starting data\\\")\\n\\tns.print(data)\\n\\tlet answer = [];\\n\\tlet limiter = Math.pow(data, 2);\\n\\tfor (let i = data - 1; i > 0; i--) {\\n\\t\\tlet remainder = data;\\n\\t\\tlet tempAnswer = [];\\n\\t\\twhile (remainder > 0) {\\n\\t\\t\\tlet inc = remainder - 1;\\n\\t\\t\\tif (remainder - inc === 0) {\\n\\t\\t\\t\\tinc--;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tremainder = remainder - inc;\\n\\t\\t\\t\\ttempAnswer.push(inc);\\n\\t\\t\\t}\\n\\t\\t\\tlimiter--;\\n\\t\\t\\tif (limiter < 0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.sleep(500)\\n\\t\\t\\tanswer.push(tempAnswer);\\n\\t\\t}\\n\\t\\t//\\tns.print(tempAnswer);\\n\\t\\t\\n\\t}\\n\\tns.print(answer)\\n\\n\\n}\\n\\nfunction arrayJumpingGameII(ns,filename,host) {\\n\\tns.print(\\\"start test function arrayJumpingGameII\\\")\\n\\tlet data = ns.codingcontract.getData(filename, host);\\n\\tns.print(\\\"starting data\\\")\\n\\tns.print(data)\\n\\tlet jumpLength = data[0];\\n\\tlet currentIndex = 0;\\n\\t//get slice of available jumps\\n\\t//for each element of slice, add destination index to path\\n\\t//close bitburner and work\\n}\\n\\n\\nexport async function main(ns) {\\n\\tlet type = ns.args[0] || -1\\n\\tif (type === -1) {\\n\\t\\tlet types = ns.codingcontract.getContractTypes();\\n\\t\\tfor (let j of types) {\\n\\t\\t\\tns.print(j);\\n\\t\\t}\\n\\t} else {\\n\\t\\tlet files = ns.ls(\\\"home\\\", \\\".cct\\\")\\n\\t\\tlet filename = \\\"\\\"\\n\\t\\tlet filefound = false;\\n\\t\\tfor (let i of files) {\\n\\t\\t\\tif (ns.codingcontract.getContractType(i) === type) {\\n\\t\\t\\t\\tfilename = i;\\n\\t\\t\\t\\tfilefound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!filefound) {\\n\\t\\t\\tns.codingcontract.createDummyContract(type);\\n\\t\\t\\tfiles = ns.ls(\\\"home\\\", \\\".cct\\\")\\n\\t\\t\\tfor (let i of files) {\\n\\t\\t\\t\\tif (ns.codingcontract.getContractType(i) === type) {\\n\\t\\t\\t\\t\\tfilename = i;\\n\\t\\t\\t\\t\\tfilefound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet host = \\\"home\\\"\\n\\t\\tns.print(ns.codingcontract.getDescription(filename, host));\\n\\t\\tlet data = ns.codingcontract.getData(filename, host);\\n\\t\\tns.print(\\\"starting data\\\")\\n\\t\\tns.print(data)\\n\\t\\tawait totalWaysToSumI(ns, filename, host)\\n\\t}\\n}\",\"filename\":\"bp3_contract_solverTesting.js\",\"server\":\"home\"}}],[\"bp3_hacking_weakenJoesGuns.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hServers from \\\"bp3_helpers_servers.js\\\"\\nimport * as hHacking from \\\"bp3_helpers_hacking.js\\\"\\n\\nexport async function main(ns) {\\n\\n\\tlet target = \\\"joesguns\\\"\\n\\t//get free ram\\n\\n\\twhile (true) {\\n\\t\\tlet hostlist = hServers.getAvailableHostServers(ns, true, 4, true);\\n\\t\\t//distribute all weakens\\n\\t\\tlet wTime = ns.getWeakenTime(target);\\n\\t\\tlet maxRam = hServers.getNetworkRamAvailable(ns, true)\\n\\t\\tlet maxThreads = Math.floor(maxRam / ns.getScriptRam(\\\"bp3_weaken.js\\\"));\\n\\t\\tif (maxThreads > 0)\\n\\t\\t\\thHacking.distributeThreads(ns, \\\"bp3_weaken.js\\\", hostlist, maxThreads, target, \\\"w\\\", \\\"x\\\", wTime);\\n\\t\\t//wait for weakens\\n\\t\\t//do it again\\n\\t\\tawait ns.sleep(wTime);\\n\\t}\\n}\",\"filename\":\"bp3_hacking_weakenJoesGuns.js\",\"server\":\"home\"}}],[\"bp3_helpers_bb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function investAllHashesBB(ns) {\\n\\tlet noHashes = ns.hacknet.numHashes();\\n\\tconst bbUpgrades = [\\\"Exchange for Bladeburner Rank\\\", \\\"Exchange for Bladeburner SP\\\"]\\n\\tlet minUpCost = Math.min(ns.hacknet.hashCost(bbUpgrades[0]), ns.hacknet.hashCost(bbUpgrades[1]))\\n\\tlet counter = 100\\n\\twhile (noHashes > minUpCost) {\\n\\t\\tnoHashes = ns.hacknet.numHashes();\\n\\t\\tfor (let i of bbUpgrades) {\\n\\t\\t\\tif (noHashes > ns.hacknet.hashCost(i)) {\\n\\t\\t\\t\\tns.hacknet.spendHashes(i)\\n\\t\\t\\t\\tnoHashes = ns.hacknet.numHashes();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcounter--\\n\\t\\tif (counter < 1) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tnoHashes = ns.hacknet.numHashes();\\n\\t\\tminUpCost = Math.min(ns.hacknet.hashCost(bbUpgrades[0]), ns.hacknet.hashCost(bbUpgrades[1]))\\n\\t}\\n}\\n\\nexport function bbRestart(ns) {\\n\\tif (ns.hacknet.numHashes() >= 250) {\\n\\t\\tinvestAllHashesBB(ns);\\n\\t}\\n\\tns.killall(\\\"home\\\", true);\\n\\tns.exec(\\\"bp3_augs_purchase.js\\\", \\\"home\\\")\\n\\tns.exec(\\\"bp3_sleeves_purchaseAugs.js\\\", \\\"home\\\")\\n\\tns.singularity.installAugmentations(\\\"bp3_bb_manager.js\\\");\\n}\\n\\nexport function getBBAugs(ns) {\\n\\tlet bbAugs = ns.singularity.getAugmentationsFromFaction(\\\"Bladeburners\\\");\\n\\tbbAugs = bbAugs.filter(el => !(ns.singularity.getOwnedAugmentations(true).includes(el)));\\n\\tbbAugs.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a))\\n\\tbbAugs = bbAugs.filter(el => ns.singularity.getAugmentationRepReq(el) < ns.singularity.getFactionRep(\\\"Bladeburners\\\"));\\n\\tlet purchasedcount = 0;\\n\\tfor (let i of bbAugs) {\\n\\t\\tif (ns.singularity.getAugmentationPrice(i) < ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.singularity.purchaseAugmentation(\\\"Bladeburners\\\", i)\\n\\t\\t\\tpurchasedcount++;\\n\\t\\t}\\n\\t}\\n\\tif (purchasedcount > 0) {\\n\\t\\tbbRestart(ns);\\n\\t}\\n}\\n\\nexport function actionAvailabilityCheck(ns, actionType, actionName) {\\n\\tlet remaining = ns.bladeburner.getActionCountRemaining(actionType, actionName)\\n\\tlet estSuccess = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName)\\n\\tlet averageChance = (estSuccess[0] + estSuccess[1]) / 2\\n\\tlet remCheck = 10;\\n\\tlet chanceCheck = 0.8\\n\\tif (actionType === \\\"BlackOps\\\") {\\n\\t\\tif (ns.bladeburner.getBlackOpRank(actionName) > ns.bladeburner.getRank()) {\\n\\t\\t\\treturn false;\\n\\t\\t} else {\\n\\t\\t\\tremCheck = 0\\n\\t\\t\\tchanceCheck = 0.25\\n\\t\\t}\\n\\t}\\n\\tif (remaining > remCheck && averageChance > chanceCheck) {\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getNextBlackOps(ns) {\\n\\tconst BlackOps = ns.bladeburner.getBlackOpNames();\\n\\tlet availBlackOps = BlackOps.filter(el => ns.bladeburner.getActionCountRemaining(\\\"BlackOps\\\", el) > 0);\\n\\tavailBlackOps = availBlackOps.filter(el => ns.bladeburner.getBlackOpRank(el) < ns.bladeburner.getRank())\\n\\tavailBlackOps.sort((a, b) => ns.bladeburner.getBlackOpRank(a) - ns.bladeburner.getBlackOpRank(b))\\n\\tif (availBlackOps.length > 0) {\\n\\t\\treturn availBlackOps[0]\\n\\t}\\n}\\n\\nexport async function doNextBlackOps(ns) {\\n\\tlet blackOp = getNextBlackOps(ns)\\n\\tif (blackOp !== undefined) {\\n\\t\\tlet hasBonusSleepMulti = (ns.bladeburner.getBonusTime() > 0 ? 0.2 : 1)\\n\\t\\thasBonusSleepMulti = (ns.bladeburner.getBonusTime() > 0 ? 0.2 : 1)\\n\\t\\tlet sleepTime = 1000 * hasBonusSleepMulti;\\n\\n\\t\\tif (ns.bladeburner.getCurrentAction() !== blackOp) {\\n\\t\\t\\tns.bladeburner.startAction(\\\"BlackOps\\\", blackOp)\\n\\t\\t\\tsleepTime = ns.bladeburner.getActionTime(\\\"BlackOps\\\", blackOp) * hasBonusSleepMulti;\\n\\t\\t\\tawait ns.sleep(sleepTime)\\n\\t\\t}\\n\\t\\tawait ns.sleep(5000)\\n\\t\\tblackOp = getNextBlackOps(ns)\\n\\t}\\n}\\n\\nexport function getAvailableActions(ns) {\\n\\tconst OperationActions = ns.bladeburner.getOperationNames();\\n\\tOperationActions.splice(OperationActions.indexOf(\\\"Raid\\\"), 1)\\n\\n\\tconst ContractActions = ns.bladeburner.getContractNames();\\n\\tconst BlackOps = ns.bladeburner.getBlackOpNames();\\n\\n\\tns.print(\\\"getAvailableActions\\\");\\n\\tlet availableActions = [];\\n\\tfor (let i of BlackOps) {\\n\\t\\tlet type = \\\"BlackOps\\\"\\n\\t\\tlet name = i;\\n\\t\\tif (actionAvailabilityCheck(ns, type, name)) {\\n\\t\\t\\tlet repGain = getRepGainPerSecond(ns, type, name)\\n\\t\\t\\tavailableActions.push([type, name, repGain]);\\n\\t\\t}\\n\\t}\\n\\tfor (let j of ContractActions) {\\n\\t\\tlet type = \\\"Contract\\\"\\n\\t\\tlet name = j\\n\\t\\tif (actionAvailabilityCheck(ns, type, name)) {\\n\\t\\t\\tlet repGain = getRepGainPerSecond(ns, type, name)\\n\\t\\t\\tavailableActions.push([type, name, repGain]);\\n\\t\\t}\\n\\t}\\n\\tfor (let k of OperationActions) {\\n\\t\\tlet type = \\\"Operation\\\"\\n\\t\\tlet name = k;\\n\\t\\tif (actionAvailabilityCheck(ns, type, name)) {\\n\\t\\t\\tlet repGain = getRepGainPerSecond(ns, type, name)\\n\\t\\t\\tavailableActions.push([type, name, repGain]);\\n\\t\\t}\\n\\t}\\n\\t//\\tns.print(availableActions)\\n\\treturn availableActions;\\n}\\n\\nexport function doBestAction(ns) {\\n\\tns.print(\\\"do best action\\\")\\n\\tlet avail = getAvailableActions(ns)\\n\\tif (avail.length > 0) {\\n\\t\\tavail.sort((a, b) => b[2] - a[2]);\\n\\n\\t\\tlet action = avail[0];\\n\\t\\tlet current = ns.bladeburner.getCurrentAction();\\n\\t\\tif (!(action[0] === current.type && action[1] === current.name)) {\\n\\t\\t\\tns.print(\\\"starting action \\\" + action[1])\\n\\t\\t\\tns.bladeburner.startAction(action[0], action[1]);\\n\\t\\t} else {\\n\\t\\t\\tns.print(\\\"performing action \\\" + current.name)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function getRepGainPerSecond(ns, aType, aName) {\\n\\tns.print(\\\"getRepGainPerSecond \\\" + aType + aName)\\n\\tlet successChance = ns.bladeburner.getActionEstimatedSuccessChance(aType, aName)\\n\\tlet avgSuccess = (successChance[0] + successChance[1]) / 2\\n\\tlet repGain = ns.bladeburner.getActionRepGain(aType, aName)\\n\\tlet actionTime = ns.bladeburner.getActionTime(aType, aName);\\n\\tlet repReturn = avgSuccess * repGain / actionTime\\n\\treturn repReturn;\\n}\\n\\nexport function staminaCheck(ns, checkValue = 0.5) {\\n\\tns.print(\\\"stamina check\\\");\\n\\tlet stam = ns.bladeburner.getStamina();\\n\\tif (stam[0] / stam[1] > checkValue) {\\n\\t\\treturn true\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function recuperate(ns) {\\n\\tns.bladeburner.startAction(\\\"General\\\", \\\"Hyperbolic Regeneration Chamber\\\")\\n}\\n\\nexport function bestSkillUpgrade(ns) {\\n\\tlet points = ns.bladeburner.getSkillPoints();\\n\\tconst SkillList = ns.bladeburner.getSkillNames();\\n\\tlet minUpCost = ns.bladeburner.getSkillUpgradeCost(SkillList[0]);\\n\\tlet counter = 200;\\n\\twhile (points > minUpCost) {\\n\\t\\tfor (let i of SkillList) {\\n\\t\\t\\tif (ns.bladeburner.getSkillUpgradeCost(i) < points) {\\n\\t\\t\\t\\tns.bladeburner.upgradeSkill(i, 1)\\n\\t\\t\\t\\tpoints = ns.bladeburner.getSkillPoints();\\n\\t\\t\\t\\tlet upCost = ns.bladeburner.getSkillUpgradeCost(i);\\n\\t\\t\\t\\tif (upCost < minUpCost) {\\n\\t\\t\\t\\t\\tminUpCost = upCost;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcounter--;\\n\\t\\tif (counter < 1) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tpoints = ns.bladeburner.getSkillPoints();\\n\\t}\\n}\\n\\n\\n\\n/*\\nconst GeneralActions = [\\n\\t\\\"Training\\\",\\n\\t\\\"Field Analysis\\\",\\n\\t\\\"Recruitment\\\",\\n\\t\\\"Diplomacy\\\",\\n\\t\\\"Hyperbolic Regeneration Chamber\\\",\\n];\\nconst OperationActions = ns.bladeburner.getOperationNames();\\nconst ContractActions = ns.bladeburner.getContractNames();\\nconst BlackOps = ns.bladeburner.getBlackOpNames();\\n*/\\n\\n\\n\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_helpers_bb.js\",\"server\":\"home\"}}],[\"bp3_bb_manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hBB from \\\"bp3_helpers_bb.js\\\"\\nimport * as hSleeves from \\\"bp3_helpers_sleeves.js\\\"\\n\\nasync function bbCheck(ns) {\\n\\tif(!ns.bladeburner.inBladeburner()) {\\n\\t\\tawait trainToX(ns,100);\\n\\t\\tns.bladeburner.joinBladeburnerDivision()\\n\\t}\\n}\\n\\nfunction assignSleeves(ns, i) {\\n\\tif (Jobs[i].aAction === \\\"Take on contracts\\\") {\\n\\t\\tif (ns.bladeburner.getActionCountRemaining(\\\"contracts\\\", Jobs[i].aDetail) > 10) {\\n\\t\\t\\tns.sleeve.setToBladeburnerAction(i, Jobs[i].aAction, Jobs[i].aDetail)\\n\\t\\t} else {\\n\\t\\t\\tns.sleeve.setToBladeburnerAction(i, \\\"Infiltrate Synthoids\\\");\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.sleeve.setToBladeburnerAction(i, Jobs[i].aAction);\\n\\t}\\n}\\n\\nconst Jobs = [\\n\\t{ aAction: \\\"Field Analysis\\\", aQty: 1 },\\n\\t{ aAction: \\\"Diplomacy\\\", aQty: 1 },\\n\\t{ aAction: \\\"Infiltrate Synthoids\\\", aQty: 1 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Tracking\\\", aQty: 0 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Bounty Hunter\\\", aQty: 0 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Retirement\\\", aQty: 0 },\\n]\\n\\nfunction assignSleevesBB(ns) {\\n\\tlet numSleeves = ns.sleeve.getNumSleeves();\\n\\t\\tfor (let i = 0; i < numSleeves; i++) {\\n\\t\\t\\tif (hSleeves.checkShock(ns, i, 10)) {\\n\\t\\t\\t\\tassignSleeves(ns, i);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t\\t}\\n\\t\\t} \\n}\\n\\nasync function trainToX(ns,goal=30) {\\n\\tlet player = ns.getPlayer();\\n\\tlet pSkills = player.skills;\\n\\tlet combatSkills = [\\\"strength\\\", \\\"defense\\\", \\\"dexterity\\\", \\\"agility\\\"]\\n\\tlet min = 0;\\n\\twhile (min < goal) {\\n\\t\\tplayer = ns.getPlayer();\\n\\t\\tpSkills = player.skills;\\n\\t\\tlet min = goal;\\n\\t\\tlet minStat = \\\"strength\\\";\\n\\t\\tfor (let h of combatSkills) {\\n\\t\\t\\tif (pSkills[h] < min) {\\n\\t\\t\\t\\tmin = pSkills[h]\\n\\t\\t\\t\\tminStat = h;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (min < goal) {\\n\\t\\t\\tif (player.location !== \\\"Sector-12\\\")\\n\\t\\t\\t\\tns.singularity.travelToCity(\\\"Sector-12\\\")\\n\\t\\t\\tns.singularity.gymWorkout(\\\"Powerhouse Gym\\\", minStat, false);\\n\\t\\t} else {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tpSkills = ns.getPlayer().skills;\\n\\t\\tns.print(minStat + \\\" \\\" + pSkills[minStat] + \\\"/\\\" + goal);\\n\\n\\t\\tawait ns.sleep(5000);\\n\\t\\tns.clearLog();\\n\\t\\tns.singularity.stopAction();\\n\\t}\\n}\\n\\n\\nexport async function main(ns) {\\n\\tawait trainToX(ns,75);\\n\\tawait bbCheck(ns)\\n\\thBB.getBBAugs(ns)\\n\\thBB.bestSkillUpgrade(ns)\\n\\tassignSleevesBB(ns);\\n\\t\\n\\tns.print(hBB.staminaCheck(ns))\\n\\tlet sleepTime = 10000;\\n\\twhile (true) {\\n\\t\\thBB.getBBAugs(ns)\\n\\t\\thBB.bestSkillUpgrade(ns)\\n\\t\\tassignSleevesBB(ns);\\n\\t\\tif (hBB.staminaCheck(ns, 0.6)) {\\n\\t\\t\\tlet nextBlackOps = hBB.getNextBlackOps(ns)\\n\\t\\t\\tns.print(nextBlackOps);\\n\\t\\t\\tif (nextBlackOps !== undefined) {\\n\\t\\t\\t\\tawait hBB.doNextBlackOps(ns)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thBB.doBestAction(ns)\\n\\t\\t\\t\\tsleepTime = ns.bladeburner.getActionTime(ns.bladeburner.getCurrentAction().type, ns.bladeburner.getCurrentAction().name) * 1.1;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (hBB.staminaCheck(ns, 0.5)) {\\n\\t\\t\\t\\thBB.recuperate(ns)\\n\\t\\t\\t\\tsleepTime = 65000;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.bladeburner.startAction(\\\"General\\\", \\\"Field Analysis\\\")\\n\\t\\t\\t\\tsleepTime = 30000\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(sleepTime);\\n\\t}\\n}\",\"filename\":\"bp3_bb_manager.js\",\"server\":\"home\"}}],[\"bp3_data_bb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport const SkillNames = {\\n  BladesIntuition: \\\"Blade's Intuition\\\",\\n  Cloak: \\\"Cloak\\\",\\n  Marksman: \\\"Marksman\\\",\\n  WeaponProficiency: \\\"Weapon Proficiency\\\",\\n  ShortCircuit: \\\"Short-Circuit\\\",\\n  DigitalObserver: \\\"Digital Observer\\\",\\n  Tracer: \\\"Tracer\\\",\\n  Overclock: \\\"Overclock\\\",\\n  Reaper: \\\"Reaper\\\",\\n  EvasiveSystem: \\\"Evasive System\\\",\\n  Datamancer: \\\"Datamancer\\\",\\n  CybersEdge: \\\"Cyber's Edge\\\",\\n  HandsOfMidas: \\\"Hands of Midas\\\",\\n  Hyperdrive: \\\"Hyperdrive\\\",\\n};\\n\\nexport const Skills = {};\\n\\nexport class Skill {\\n\\tconstructor(name,desc) {\\n  this.name = name;\\n  this.desc = desc;\\n  // Cost is in Skill Points\\n  baseCost = 1;\\n  // Additive cost increase per level\\n  costInc = 1;\\n  maxLvl = 0;\\n\\n  /**\\n   * These benefits are additive. So total multiplier will be level (handled externally) times the\\n   * effects below\\n   */\\n  successChanceAll = 0;\\n  successChanceStealth = 0;\\n  successChanceKill = 0;\\n  successChanceContract = 0;\\n  successChanceOperation = 0;\\n\\n  /**\\n   * This multiplier affects everything that increases synthoid population/community estimate\\n   * e.g. Field analysis, Investigation Op, Undercover Op\\n   */\\n  successChanceEstimate = 0;\\n  actionTime = 0;\\n  effHack = 0;\\n  effStr = 0;\\n  effDef = 0;\\n  effDex = 0;\\n  effAgi = 0;\\n  effCha = 0;\\n  stamina = 0;\\n  money = 0;\\n  expGain = 0;\\n\\n  constructor(params = { name: \\\"foo\\\", desc: \\\"foo\\\" }) {\\n    if (!params.name) {\\n      throw new Error(\\\"Failed to initialize Bladeburner Skill. No name was specified in ctor\\\");\\n    }\\n    if (!params.desc) {\\n      throw new Error(\\\"Failed to initialize Bladeburner Skills. No desc was specified in ctor\\\");\\n    }\\n    this.name = params.name;\\n    this.desc = params.desc;\\n    this.baseCost = params.baseCost ? params.baseCost : 1;\\n    this.costInc = params.costInc ? params.costInc : 1;\\n\\n    if (params.maxLvl) {\\n      this.maxLvl = params.maxLvl;\\n    }\\n\\n    if (params.successChanceAll) {\\n      this.successChanceAll = params.successChanceAll;\\n    }\\n    if (params.successChanceStealth) {\\n      this.successChanceStealth = params.successChanceStealth;\\n    }\\n    if (params.successChanceKill) {\\n      this.successChanceKill = params.successChanceKill;\\n    }\\n    if (params.successChanceContract) {\\n      this.successChanceContract = params.successChanceContract;\\n    }\\n    if (params.successChanceOperation) {\\n      this.successChanceOperation = params.successChanceOperation;\\n    }\\n\\n    if (params.successChanceEstimate) {\\n      this.successChanceEstimate = params.successChanceEstimate;\\n    }\\n\\n    if (params.actionTime) {\\n      this.actionTime = params.actionTime;\\n    }\\n    if (params.effHack) {\\n      this.effHack = params.effHack;\\n    }\\n    if (params.effStr) {\\n      this.effStr = params.effStr;\\n    }\\n    if (params.effDef) {\\n      this.effDef = params.effDef;\\n    }\\n    if (params.effDex) {\\n      this.effDex = params.effDex;\\n    }\\n    if (params.effAgi) {\\n      this.effAgi = params.effAgi;\\n    }\\n    if (params.effCha) {\\n      this.effCha = params.effCha;\\n    }\\n\\n    if (params.stamina) {\\n      this.stamina = params.stamina;\\n    }\\n    if (params.money) {\\n      this.money = params.money;\\n    }\\n    if (params.expGain) {\\n      this.expGain = params.expGain;\\n    }\\n  }\\n\\n  getMultiplier(name) {\\n    if (name === \\\"successChanceAll\\\") return this.successChanceAll;\\n    if (name === \\\"successChanceStealth\\\") return this.successChanceStealth;\\n    if (name === \\\"successChanceKill\\\") return this.successChanceKill;\\n    if (name === \\\"successChanceContract\\\") return this.successChanceContract;\\n    if (name === \\\"successChanceOperation\\\") return this.successChanceOperation;\\n    if (name === \\\"successChanceEstimate\\\") return this.successChanceEstimate;\\n\\n    if (name === \\\"actionTime\\\") return this.actionTime;\\n\\n    if (name === \\\"effHack\\\") return this.effHack;\\n    if (name === \\\"effStr\\\") return this.effStr;\\n    if (name === \\\"effDef\\\") return this.effDef;\\n    if (name === \\\"effDex\\\") return this.effDex;\\n    if (name === \\\"effAgi\\\") return this.effAgi;\\n    if (name === \\\"effCha\\\") return this.effCha;\\n\\n    if (name === \\\"stamina\\\") return this.stamina;\\n    if (name === \\\"money\\\") return this.money;\\n    if (name === \\\"expGain\\\") return this.expGain;\\n    return 0;\\n  }\\n}\\n\\nfunction () {\\n\\t Skills[SkillNames.Cloak] = {\\n    name: SkillNames.Cloak,\\n    desc: \\\"Each level of this skill increases your success chance for all Contracts, Operations, and BlackOps by 3%\\\",\\n    baseCost: 3,\\n    costInc: 2.1,\\n    successChanceAll: 3,\\n  },\\n  Skills[SkillNames.Cloak] = {\\n    name: SkillNames.Cloak,\\n    desc:\\n      \\\"Each level of this skill increases your \\\" +\\n      \\\"success chance in stealth-related Contracts, Operations, and BlackOps by 5.5%\\\",\\n    baseCost: 2,\\n    costInc: 1.1,\\n    successChanceStealth: 5.5,\\n  }\\n  Skills[SkillNames.ShortCircuit] = new Skill({\\n    name: SkillNames.ShortCircuit,\\n    desc:\\n      \\\"Each level of this skill increases your success chance \\\" +\\n      \\\"in Contracts, Operations, and BlackOps that involve retirement by 5.5%\\\",\\n    baseCost: 2,\\n    costInc: 2.1,\\n    successChanceKill: 5.5,\\n  });\\n  Skills[SkillNames.DigitalObserver] = new Skill({\\n    name: SkillNames.DigitalObserver,\\n    desc: \\\"Each level of this skill increases your success chance in all Operations and BlackOps by 4%\\\",\\n    baseCost: 2,\\n    costInc: 2.1,\\n    successChanceOperation: 4,\\n  });\\n  Skills[SkillNames.Tracer] = new Skill({\\n    name: SkillNames.Tracer,\\n    desc: \\\"Each level of this skill increases your success chance in all Contracts by 4%\\\",\\n    baseCost: 2,\\n    costInc: 2.1,\\n    successChanceContract: 4,\\n  });\\n  Skills[SkillNames.Overclock] = new Skill({\\n    name: SkillNames.Overclock,\\n    desc:\\n      \\\"Each level of this skill decreases the time it takes \\\" +\\n      \\\"to attempt a Contract, Operation, and BlackOp by 1% (Max Level: 90)\\\",\\n    baseCost: 3,\\n    costInc: 1.4,\\n    maxLvl: 90,\\n    actionTime: 1,\\n  });\\n  Skills[SkillNames.Reaper] = new Skill({\\n    name: SkillNames.Reaper,\\n    desc: \\\"Each level of this skill increases your effective combat stats for Bladeburner actions by 2%\\\",\\n    baseCost: 2,\\n    costInc: 2.1,\\n    effStr: 2,\\n    effDef: 2,\\n    effDex: 2,\\n    effAgi: 2,\\n  });\\n  Skills[SkillNames.EvasiveSystem] = new Skill({\\n    name: SkillNames.EvasiveSystem,\\n    desc: \\\"Each level of this skill increases your effective dexterity and agility for Bladeburner actions by 4%\\\",\\n    baseCost: 2,\\n    costInc: 2.1,\\n    effDex: 4,\\n    effAgi: 4,\\n  });\\n  Skills[SkillNames.Datamancer] = new Skill({\\n    name: SkillNames.Datamancer,\\n    desc:\\n      \\\"Each level of this skill increases your effectiveness in \\\" +\\n      \\\"synthoid population analysis and investigation by 5%. \\\" +\\n      \\\"This affects all actions that can potentially increase \\\" +\\n      \\\"the accuracy of your synthoid population/community estimates.\\\",\\n    baseCost: 3,\\n    costInc: 1,\\n    successChanceEstimate: 5,\\n  });\\n  Skills[SkillNames.CybersEdge] = new Skill({\\n    name: SkillNames.CybersEdge,\\n    desc: \\\"Each level of this skill increases your max stamina by 2%\\\",\\n    baseCost: 1,\\n    costInc: 3,\\n    stamina: 2,\\n  });\\n  Skills[SkillNames.HandsOfMidas] = new Skill({\\n    name: SkillNames.HandsOfMidas,\\n    desc: \\\"Each level of this skill increases the amount of money you receive from Contracts by 10%\\\",\\n    baseCost: 2,\\n    costInc: 2.5,\\n    money: 10,\\n  });\\n  Skills[SkillNames.Hyperdrive] = new Skill({\\n    name: SkillNames.Hyperdrive,\\n    desc: \\\"Each level of this skill increases the experience earned from Contracts, Operations, and BlackOps by 10%\\\",\\n    baseCost: 1,\\n    costInc: 2.5,\\n    expGain: 10,\\n  });\\n\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_data_bb.js\",\"server\":\"home\"}}],[\"bp3_bb_augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hPurchase from \\\"bp3_helpers_purchase.js\\\"\\nimport * as hAugs from \\\"bp3_helpers_augs.js\\\"\\nimport * as hFactions from \\\"bp3_helpers_factions.js\\\"\\nimport * as hPlayer from \\\"bp3_helpers_player.js\\\"\\nimport * as hProgress from \\\"bp3_helpers_progress.js\\\"\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tlet info = ns.args[0] || \\\"act\\\"\\n\\t//looping version:\\n\\t//get all augs with wanted stats\\n\\t//sum reptime by faction\\n\\t//sort factions by reptime (lowest to highest)\\n\\t//select faction with lowest reptime\\n\\t//attempt to join faction\\n\\t//if can't join, go to next\\n\\n\\t//choose stat increase (rep / hack / combat / bb)\\n\\tlet stats = hAugs.CrimeStats.concat(hAugs.RepStats);\\n\\t//choose target aug\\n\\tlet augsWCombat = hAugs.getAugsWithStat(ns, stats)\\n\\taugsWCombat = hAugs.addUtilsToWantedList(ns, augsWCombat);\\n\\t////aug with lowest remaining rep req\\n\\taugsWCombat.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet repAchievedNames = augsWCombat.filter(el => el.aRepTime <= 0).map(function (a) { return a.aName });\\n\\n\\tlet sList = hAugs.getShoppingList(ns, augsWCombat); //removes owned\\n\\tsList = sList.filter(el => repAchievedNames.indexOf(el.aName) < 0);\\n\\tsList.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\n\\tlet factionList = []\\n\\tfor (let f of sList) {\\n\\t\\tif (factionList.includes(f.aFaction) === false) {\\n\\t\\t\\tfactionList.push(f.aFaction);\\n\\t\\t}\\n\\t}\\n\\tlet factionRepTime = [];\\n\\tfor (let g of factionList) {\\n\\t\\tfactionRepTime.push({ fName: g, fRepTime: 0 });\\n\\t\\tfor (let h of sList) {\\n\\t\\t\\tif (h.aFaction === g) {\\n\\t\\t\\t\\tlet fIndex = factionRepTime.findIndex(el => el.fName === g);\\n\\t\\t\\t\\tfactionRepTime[fIndex].fRepTime = factionRepTime[fIndex].fRepTime + h.aRepTime;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfactionRepTime = factionRepTime.filter(el => el.fRepTime > 0).sort((a, b) => a.fRepTime - b.fRepTime);\\n\\tlet factionRepTimeList = factionRepTime.map(function (el) { return el.fName })\\n\\tfor (let i of factionRepTimeList) {\\n\\t\\tif (!hFactions.joinedFactionCheck(ns, i)) {\\n\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\tawait hFactions.getInvite(ns, i)\\n\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tns.print(\\\"==========Shopping =============\\\")\\n\\tif (sList.length > 0) {\\n\\t\\tfor (let g = 0; g < Math.min(10, sList.length); g++) {\\n\\t\\t\\tns.print(sList[g].aName, \\\" \\\", sList[g].aFaction)\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.print(\\\"Nothing to buy\\\")\\n\\t}\\n\\t//choose faction\\n\\t//work on rep 'til goal\\n\\t//choose next target\\n\\t//\\tns.print(getFactionAugs(ns, \\\"CyberSec\\\"));\\n\\t//ns.print(hAugs.HackStats);\\n\\t//ns.print(augsWCombat);\\n\\t//ns.print(ns.singularity.getAugmentationStats(augsWCombat[2]))\\n\\tlet availableFactions = ns.getPlayer().factions.concat(ns.singularity.checkFactionInvitations())\\n\\tlet availableHAugs = sList.filter(el => availableFactions.indexOf(el.aFaction) > -1);\\n\\t//ns.print(Object.keys(availableHAugs[0]))\\n\\tavailableHAugs = availableHAugs.filter(el => el.aName !== \\\"NeuroFlux Governor\\\");\\n\\tns.print(\\\"==========Work List=============\\\")\\n\\n\\tavailableHAugs.sort((a, b) => a.aRepTime - b.aRepTime);\\n\\tif (availableHAugs.map(function (el) { return el.aName }).indexOf(\\\"The Red Pill\\\") > 0) {\\n\\t\\tlet redPill = availableHAugs.splice(availableHAugs.map(function (el) { return el.aName }).indexOf(\\\"The Red Pill\\\"), 1)[0];\\n\\t\\tavailableHAugs.unshift(redPill);\\n\\t}\\n\\tfor (let j of availableHAugs) {\\n\\t\\tns.print(j)\\n\\t}\\n\\n\\n\\n\\tif (availableHAugs.length > 0) {\\n\\t\\tlet choice = availableHAugs[0];\\n\\n\\t\\tns.print(\\\"Choice\\\");\\n\\t\\tns.print(choice);\\n\\t\\tns.print(\\\"Donation attempt\\\")\\n\\t\\thFactions.tryDonateToFactionForAug(ns, choice.aFaction, choice.aName)\\n\\t\\tif (ns.singularity.getFactionRep(choice.aFaction) < choice.aTotalRepReq) {\\n\\n\\t\\t\\tns.print(\\\"Starting work for faction \\\" + choice.aFaction);\\n\\t\\t\\tlet workType = hFactions.getBestWorkType(ns, choice.aFaction)\\n\\t\\t\\tif (info !== \\\"info\\\") {\\n\\t\\t\\t\\tns.exec(\\\"bp3_player_workForFaction.js\\\", \\\"home\\\", { preventDuplicates: true }, choice.aFaction, workType, choice.aTotalRepReq)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\t//check for company factions\\n\\t\\tfor (let i of factionRepTimeList) {\\n\\t\\t\\tif (!hFactions.joinedFactionCheck(ns, i)) {\\n\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\tawait hFactions.getInvite(ns, i)\\n\\t\\t\\t\\t\\tif (hFactions.CompanyFactions.indexOf(i) > -1) {\\n\\t\\t\\t\\t\\t\\tif (info !== \\\"info\\\") {\\n\\t\\t\\t\\t\\t\\t\\tns.exec(\\\"bp3_player_workForCompany.js\\\", \\\"home\\\", 1, i, 400000)\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (!hFactions.inviteCheck(ns, i)) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.singularity.joinFaction(i);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//else do crimes\\n\\t}\\n\\n\\n\\tns.print(\\\"========simulated Purchase=========\\\")\\n\\tlet sim = hPurchase.simulatePurchase(ns, hAugs.getShoppingList(ns, augsWCombat));\\n\\tsim.sort((a, b) => b.aPrice - a.aPrice)\\n\\tfor (let i of sim) {\\n\\t\\tns.print(i.aName, \\\" \\\", i.aFaction, \\\" \\\", i.aScore / i.aPrice * 1000);\\n\\t}\\n\\n\\tns.print(hAugs.getTotalAugCost(ns, sim.map(function (el) { return el.aName })));\\n\\n\\n\\tns.print(\\\"===========rep reached========\\\")\\n\\tlet repAchievedCost = 0;\\n\\tlet repAchievedAlreadyListed = [];\\n\\tlet repAchievedMulti = 1;\\n\\tlet owned = ns.singularity.getOwnedAugmentations(true);\\n\\trepAchievedNames = repAchievedNames.filter(el => owned.indexOf(el) < 0);\\n\\trepAchievedNames.sort((a, b) => ns.singularity.getAugmentationPrice(b) - ns.singularity.getAugmentationPrice(a));\\n\\tfor (let i of repAchievedNames) {\\n\\t\\tif (repAchievedAlreadyListed.indexOf(i) < 0) {\\n\\t\\t\\tns.print(i, \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i), \\\"0.00a\\\"), \\\" \\\", ns.nFormat(ns.singularity.getAugmentationPrice(i) * repAchievedMulti, \\\"0.00a\\\"));\\n\\t\\t\\trepAchievedCost = repAchievedCost + ns.singularity.getAugmentationPrice(i) * repAchievedMulti;\\n\\t\\t\\trepAchievedAlreadyListed.push(i)\\n\\t\\t\\trepAchievedMulti = repAchievedMulti * 2\\n\\t\\t}\\n\\t}\\n\\tif (repAchievedCost > ns.getServerMoneyAvailable(\\\"home\\\") && repAchievedCost < 25e6) {\\n\\t\\tif (info !== \\\"info\\\") {\\n\\t\\t\\thPlayer.doBestCrime(ns, \\\"money\\\", repAchievedCost)\\n\\t\\t}\\n\\t}\\n\\tns.print(\\\"Total goal: \\\" + ns.nFormat(repAchievedCost, \\\"0.00a\\\"))\\n\\n\\t//\\tns.print(ns.singularity.getAugmentationStats(\\\"Wired Reflexes\\\"));\\n\\t//\\tfor(let i of sim) {\\n\\t//\\t\\tns.singularity.purchaseAugmentation(i.aFaction,i.aName);\\n\\t//\\t}\\n\\n}\",\"filename\":\"bp3_bb_augs.js\",\"server\":\"home\"}}],[\"bp3_sleeves_bb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hBB from \\\"bp3_helpers_bb.js\\\"\\n\\n\\n\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"bp3_sleeves_bb.js\",\"server\":\"home\"}}],[\"bp3_bb_sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport * as hSleeves from \\\"bp3_helpers_sleeves.js\\\"\\n\\nfunction assignSleeves(ns, i) {\\n\\tif (Jobs[i].aAction === \\\"Take on contracts\\\") {\\n\\t\\tif (ns.bladeburner.getActionCountRemaining(\\\"contracts\\\", Jobs[i].aDetail) > 10) {\\n\\t\\t\\tns.sleeve.setToBladeburnerAction(i, Jobs[i].aAction, Jobs[i].aDetail)\\n\\t\\t} else {\\n\\t\\t\\tns.sleeve.setToBladeburnerAction(i, \\\"Infiltrate Synthoids\\\");\\n\\t\\t}\\n\\t} else {\\n\\t\\tns.sleeve.setToBladeburnerAction(i, Jobs[i].aAction);\\n\\t}\\n}\\n\\nconst Jobs = [\\n\\t{ aAction: \\\"Field Analysis\\\", aQty: 1 },\\n\\t{ aAction: \\\"Diplomacy\\\", aQty: 1 },\\n\\t{ aAction: \\\"Infiltrate Synthoids\\\", aQty: 1 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Tracking\\\", aQty: 0 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Bounty Hunter\\\", aQty: 0 },\\n\\t{ aAction: \\\"Take on contracts\\\", aDetail: \\\"Retirement\\\", aQty: 0 },\\n]\\n\\n\\nexport async function main(ns) {\\n\\n\\twhile (true) {\\n\\t\\tlet numSleeves = ns.sleeve.getNumSleeves();\\n\\t\\tfor (let i = 0; i < numSleeves; i++) {\\n\\t\\t\\tif (hSleeves.checkShock(ns, i, 10)) {\\n\\t\\t\\t\\tassignSleeves(ns, i);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\tawait ns.sleep(60000);\\n\\t}\\n\\n}\",\"filename\":\"bp3_bb_sleeves.js\",\"server\":\"home\"}}],[\"bp3_bb_blackOps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport * as hBB from \\\"bp3_helpers_bb.js\\\";\\n\\n\\n\\nexport async function main(ns) {\\n\\tlet blackOp = hBB.getNextBlackOps(ns)\\n\\tlet hasBonusSleepMulti = (ns.bladeburner.getBonusTime() > 0 ? 0.2 : 1)\\n\\twhile (true) {\\n\\thasBonusSleepMulti = (ns.bladeburner.getBonusTime() > 0 ? 0.2 : 1)\\n\\t\\tlet sleepTime = 1000*hasBonusSleepMulti;\\n\\t\\t\\n\\t\\tif (ns.bladeburner.getCurrentAction() !== blackOp) {\\n\\t\\t\\tns.bladeburner.startAction(\\\"BlackOps\\\", blackOp)\\n\\t\\t\\tsleepTime = ns.bladeburner.getActionTime(\\\"BlackOps\\\", blackOp)*hasBonusSleepMulti;\\n\\t\\t\\tawait ns.sleep(sleepTime)\\n\\t\\t}\\n\\t\\tawait ns.sleep(5000)\\n\\t\\tblackOp = hBB.getNextBlackOps(ns)\\n\\t\\tif(blackOp === undefined) {\\n\\t\\t\\tns.exec(\\\"bp3_bb_manager.js\\\",\\\"home\\\",{preventDuplicates:true,threads:1})\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"bp3_bb_blackOps.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"hacknet-server-1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"bp3_purchaseList.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"bp3_purchaseList.txt\",\"text\":\"Purchase these things:\\r\\nTOR\\r\\nBruteSSH.exe\\r\\nHome RAM upgrade,\\r\\nAugs when can afford and have rep for 5\\r\\nFTPCrack, 5M\\r\\nRelaySMTP.exe, 25M\\r\\nHome RAM upgrade\\r\\nHTTPWorm.exe, 50M \\r\\nHome RAM upgrade\\r\\nSqlInject.exe, 250M\\r\\nAugs when can afford and have rep for 10\\r\\nPurchased Servers\\r\\nStock APIs\\r\\nCompany\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bp3_bb_manager.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":363466.265,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62189.20999999778,\"ramUsage\":108.6,\"server\":\"home\",\"scriptKey\":\"bp3_bb_manager.js*[]\",\"title\":\"bp3_bb_manager.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"41.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":31980591097.5,\"moneyMax\":319805910975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1252,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-354563.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":13920614625358,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426805.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10001000000000111010000001111110\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-179341.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSEDEBUGPASTEFRAMELINUX\",\"DOWNLOAD\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208748.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[9,100,172,122,59,162,81,44,38,46,20,133,33,51],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"69.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":20955841744.5,\"moneyMax\":209558417445,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1304,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570486.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,7,-7,6,1,7,-4,-10,5,6,-7,-5,6,8,-9,7,10,0,-10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206147.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[93,47,43,179,25,61,183,48,108,113,136,116,104,50,1,109],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289982.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE PRINT POPUP ARRAY FLASH\",10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501342.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,1,0],[0,0,0],[1,1,1],[0,0,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"9.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":10336286149,\"moneyMax\":103362861490,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":62,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-952233.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[9,4],[9,2,6],[9,1,9,8],[4,2,2,2,3],[3,1,9,7,9,1]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-72427.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"eeYWWWWWWW44444448n2222266666ii555555BQQppTTaaaaaaaaa777777777777bbEEcccccppyyff55nnllllllll\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"71.9.0.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":8533988527,\"moneyMax\":85339885270,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":958,\"serverGrowth\":76,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"48.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":13954717166.5,\"moneyMax\":139547171665,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":82,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759642.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"5640241217\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915579.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ElzzzzkkPPPPPPWkvt811PPVouCmzukMMVVVVVVVVVJJCtttttttttttt61NggeePPwqqCCbeZqqqq66\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-250389.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-860628.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[156,95,43,51,141,80,115,100,163,143,13,83,167,121,90,199,61,106,6,29,50,147,195,163,146,100,7,106,31,144,85,115,123,66,1,82,166,22,94,36,103,157,59,178]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"91.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":11125921187,\"moneyMax\":111259211870,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":958,\"serverGrowth\":46,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691038.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY PASTE MODEM QUEUE CACHE\",5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426242.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"T6E3HB81SyBwVB81SyxwVB81S6IhzEKi0AEKi0AfJAEKi0AfJ7MgqS7qqS7qqQjwzqQ\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-527214.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,23],[5,6],[14,15],[17,26],[5,13],[6,15],[13,15],[18,23]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214285.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MEDIAMODEMARRAYEMAILFRAME\",\"FIRMWARE\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"8.5.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":10706963692,\"moneyMax\":107069636920,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-683053.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,5,6,9],[40,27,17,37],[41,3,31,23],[24,35,38,19],[26,19,5,32],[27,25,31,21],[41,41,42,29],[3,37,42,31],[25,33,4,43],[21,5,50,5],[27,10,42,34],[23,41,8,42],[26,26,49,43],[50,5,21,37]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592350.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,3,6,6,-6,-6,5,-5,8,1,10,-7,5,10,9,2,-1,5,10,-10,-1,6,-3,-8,-4,-8,6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"41.7.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":9968088098.5,\"moneyMax\":99680880985,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":79,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-961795.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"1o811z424ddSa87685I1m7565646Bj818HR2Vn7yO\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434295.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24618252234\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-649178.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[86,92,65,163,59,91,198,161,136,161,119,34,69,32,101,12,163,191,67,12,3,176,56,88,108,115,149,197,57,156,194,132,71,60,139,148,118,128,195,34],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"34.5.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":49,\"moneyAvailable\":13925458307.5,\"moneyMax\":139254583075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1112,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385329.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"VIRUSMEDIAFLASHFRAMETRASH\",\"REALTIME\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"51.9.2.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":745634996.5,\"moneyMax\":7456349965,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1025,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983045.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()())a(a))(((\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471200.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,1,1],[0,0,0,0,0,0,0],[1,0,0,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-307826.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())((()()a)(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"35.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1589,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"46.7.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":540398615.5,\"moneyMax\":5403986155,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":71,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765459.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,1],[0,0,1,0,0,0],[0,0,0,0,1,0],[1,0,1,0,0,0],[0,0,0,1,0,1],[0,1,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,1,1],[1,0,0,0,1,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662025.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451851.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"48167252211\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"12.2.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":435106705,\"moneyMax\":4351067050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":68,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-936447.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010100010000000000000001011011000101111001110010001011000100010\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340293.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5553464967\",-11],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"66.8.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":338154764.5,\"moneyMax\":3381547645,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":947,\"serverGrowth\":42,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532831.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":8177,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"46.7.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":284622455,\"moneyMax\":2846224550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":79,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570346.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,7],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"73.5.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":375209600.5,\"moneyMax\":3752096005,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":60,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-971500.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"TRASH QUEUE ARRAY LOGIC PASTE\",4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"32.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":481111021,\"moneyMax\":4811110210,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":95,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"21.8.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":589700993,\"moneyMax\":5897009930,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":83,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-901622.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ENTER FLASH MACRO LOGIN DEBUG\",3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-844352.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8566\",-84],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573746.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,4,3,5,3,2,3,3,1,0,2,3,2,3,2,1,5,5,3,4,2,7,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"17.6.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":447179477.5,\"moneyMax\":4471794775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":75,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-198233.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":433688219,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"98.2.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":266921203.5,\"moneyMax\":2669212035,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":74,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724443.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,4,-9,-8,8,-6,10,3,-5,-9,0,8,-6,5,5,0,10,4,10,0,4,2,9,-3,-9,6,4,6,-5,3,-6,2,-2,7,3,-8,3,8,5],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"63.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":435756088,\"moneyMax\":4357560880,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-972066.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000000000000000100111001001000011111100011001101000101110001011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647430.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHINBOXENTERTRASHEMAIL\",\"PHISHING\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"71.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":383267410,\"moneyMax\":3832674100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":81,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662068.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[107,122,27,170,128,66,108,166,43,145],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"12.7.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":536765889,\"moneyMax\":5367658890,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492839.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,4],[2,6,3],[2,9,6,9],[1,1,4,4,3]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78905.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"N3333333MMMMMMMMMTTrrrrvvc55r6QQRRUCCCCVVJJJJJJJdd22Ummmm\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895464.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CACHE ARRAY EMAIL MACRO LOGIN\",2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-957460.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[1,0,0,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"52.6.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":455902033.5,\"moneyMax\":4559020335,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":937,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127693.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,9,16,19,21,3,24,6,41,44],[18,24,1,26,23,10,27,28,2,5],[41,44,32,47,14,39,47,12,14,48],[45,43,35,19,12,20,8,47,7,13],[22,3,28,49,36,30,50,39,43,14],[6,5,40,36,5,35,25,1,2,3],[12,26,18,4,13,40,29,48,23,20],[20,42,11,33,31,49,39,30,34,10],[35,14,19,2,46,13,18,41,39,18],[2,47,33,32,3,25,3,34,38,49],[26,25,21,21,15,6,17,25,26,41],[10,17,25,6,38,32,36,14,39,27],[39,42,15,26,25,25,43,39,12,4],[29,14,49,18,42,1,4,17,42,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"76.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":450890183,\"moneyMax\":4508901830,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374720.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[115,89,41,189,123,11,179,11,36,200,187,7,75,122,56,11,81,91,92,20,12,127]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-617462.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[80,138,20,160,70,86,166,142,147,42,134,113,122,189,143],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43337.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[118,48,34,176,148,45,130,23,51,28,133,30,134,54,187,48,122,139,184,173,77,191,75,184,102,123,197,167,188]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671666.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[0,1,0],[1,0,0],[0,1,0],[0,0,1],[0,0,0],[1,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691959.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,5,-9,-7,8,0,-10,-5,9,5,1,-3,7,3,3,-2,-5,8,-2,1,7,4,-6,-9,3,-3,2,2,8,-10,-7,-3,-4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"52.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":461898546.5,\"moneyMax\":4618985465,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627539.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LINUX ARRAY TRASH CACHE MOUSE\",10],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"99.8.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":401940399.5,\"moneyMax\":4019403995,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":77,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-11216.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()((()()(a))((a()(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"17.5.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":661231746,\"moneyMax\":6612317460,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":62,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-665274.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-288510.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[39,[1,2,3,5,7,8,10,11,13]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"77.8.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":849777019.5,\"moneyMax\":8497770195,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":87,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420369.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":466209615,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"19.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":609181635,\"moneyMax\":6091816350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":85,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-869760.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"qqnnnnnn55OOOOOOOOOOOObbGCsa33dddddddddUv33333VVVVVVVVVRRRRRRRRRRRlJJJ0vCDDDDDD\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418629.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"DEBUGVIRUSSHELLCLOUDENTER\",\"JUNKMAIL\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"11.2.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":686165349.5,\"moneyMax\":6861653495,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":80,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760024.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHLOGINARRAYPASTEMEDIA\",\"PRINTER\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-565650.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"253175160249\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"17.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":525331653,\"moneyMax\":5253316530,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":72,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235481.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,1,0,0,0,0,0],[0,0,1,1,0,0,0,0,1,0,0],[1,0,0,0,0,0,1,0,0,0,1],[0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,1,1],[0,0,0,0,1,0,0,1,1,1,0],[0,1,1,0,0,0,0,0,1,0,0],[0,1,0,1,1,1,1,1,0,0,0],[1,1,1,0,0,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563738.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0],[0,0,1,0,0,0],[1,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607018.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[3,11],[2,10],[7,11],[6,10],[9,11],[0,7],[3,6],[3,8],[5,6],[4,8],[1,9],[2,4],[5,8],[6,7],[0,3],[1,4],[4,11]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766244.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[92,159,171,111,111,152,196,35,117,91,139,188,84,14],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"77.8.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":35,\"moneyAvailable\":380782339,\"moneyMax\":3807823390,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":694,\"serverGrowth\":63,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-516188.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,1,0,0,1,0,0,0],[0,1,0,1,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,0,0],[1,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311828.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9FB3Y6fqhQ06VyU6jV696flyjPr378xd4slVJw6593aJwsshq6661q546LHkGbQ460393cm6444NN8D552nL\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-801821.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,-4,5,5,-2,-7,-1,0,-8,8,-10,2,3,-7,-4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316653.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1110100111101000\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"39.3.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":340714928,\"moneyMax\":3407149280,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":480,\"serverGrowth\":43,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864950.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":282387128,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-253581.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0],[0,1,1,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1],[0,0,0,0,0],[1,0,0,0,0],[0,1,0,0,0],[0,1,0,0,1],[0,0,1,1,0],[0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995589.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":8640778231,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"64.5.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":373579736.5,\"moneyMax\":3735797365,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":59,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-878283.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[4,2],[8,2,2],[2,2,8,9],[3,4,4,5,1],[9,7,4,9,2,7],[5,7,5,6,5,3,5],[6,5,3,9,6,1,4,5],[2,5,5,7,3,8,4,6,9],[2,4,8,8,1,4,5,7,5,9]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244674.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,2,44,24,8,33,46,33,27,30,49],[12,23,22,18,26,40,34,6,22,27,5],[25,47,23,14,39,4,14,46,1,32,24],[27,42,1,4,13,17,24,36,39,15,16],[41,48,47,10,16,18,41,29,39,8,6],[34,11,33,34,44,8,22,14,48,5,31],[28,44,48,49,18,27,2,8,35,19,47],[36,38,32,2,12,11,16,26,33,20,45],[11,29,40,44,36,22,45,39,21,16,24]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425310.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[82,65,176,43,103,165,142,116,165,161,170,129,40,149,14,120,165,194,166,99,2,29,12,40,109,67,68],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684936.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[167,181,164,40,5,9,3,185,18,155,8,34,176,78,135,67,19,66,106,147,11,126,27,170,131,83,3,150,7,92,187,25,152,78,69,51,88,185],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208937.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"cxsyEAsyEAsyEsyEAs3iPa37Hay1vaHsoy1vaHsoy6soy6sozNvozNvozNvo63\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759605.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,2,4,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"53.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":193522695.5,\"moneyMax\":1935226955,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":405,\"serverGrowth\":32,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692614.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[13,7,72,124,167,53,16,65,123,1,60,189,54,118,145,70,72,162,43,185,111,140,162,95,144,154,106,17,4,193,191,103,38,18,129,179]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"5.0.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":93868440,\"moneyMax\":938684400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743192.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXARRAYMOUSELOGINEMAIL\",\"VERSION\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930167.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,10,5,6,8,5,7,4,0,2,0,0,0,8,6,4,7],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701800.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[160,118,156,94,153,83,89,58,100,44,138,200,157,176,31,188,93,180,24,82,76,32,81,68],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549607.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,1,3,0,1,0,2,3,2,0,2,2,3,0,4,0,7,6,1,1,4,0,4,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-505326.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ossfeXHHEyyyyyyyyyyyyypkk7bb1HHHHHHHHOOOOOOOOOOOO7777rIIIIIIIIS3333333aUUUUUUUUUUnnDDDDDDDYLHHHH\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"77.1.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":414337388.5,\"moneyMax\":4143373885,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":80,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206946.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[76,20,88,108,51,163,46,170,99,110,92,155,179,106,13,121,146,78,108],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-175532.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a(()))aa)(a((((\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-764443.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410174.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.4.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":167637321,\"moneyMax\":1676373210,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":432,\"serverGrowth\":42,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465599.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[5,11],[4,9],[9,12],[7,13],[13,21],[24,33]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330811.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"308853\",-66],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298623.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,4,0,2,1,7,7,0,0,1,0,5,2,5,4,10,4,3,6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243651.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[136,174,39,87,37,37,129,101,114,159,179,164,49,168,10,148,56,49,137,66,48,132,161,119,189,155,34,37,39,20,171,166,1,81,1,18,121,2,187,186,165],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"60.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":215942808.5,\"moneyMax\":2159428085,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":589,\"serverGrowth\":61,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638581.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[42,154,169,147,195,123,43],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"52.8.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":205287849,\"moneyMax\":2052878490,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":53,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-261240.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[181,[1,2,4,5,7,8,9,10,13,15,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78411.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,36,47,9,28,34,22,46,27],[9,30,37,22,5,15,23,17,44],[10,26,4,33,44,42,14,40,40],[42,5,49,42,31,27,17,2,43],[22,38,19,18,7,12,21,17,38],[21,42,25,13,33,47,49,27,3],[23,27,42,4,19,11,39,20,34],[27,46,36,22,37,8,4,37,24],[44,45,42,2,5,6,20,7,33],[6,5,2,8,28,3,7,21,22],[24,23,34,19,41,9,12,7,6],[29,37,15,48,33,9,23,34,47],[44,16,20,34,16,26,4,41,15],[41,9,34,15,46,26,25,18,31]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"68.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58.5,\"hackDifficulty\":58.5,\"minDifficulty\":20,\"moneyAvailable\":81069541,\"moneyMax\":810695410,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":280,\"serverGrowth\":55,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-606156.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,20],[20,30],[13,15],[24,34],[20,22]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408740.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[149,167,157,25,114,98,128,62,152,43,178,44,44,160,140,27,168,115,30,148,39,184,47,112,30,145,169,145,107,27,60,46,163,85,91,167,3,158],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"69.2.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":111799659.5,\"moneyMax\":1117996595,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":396,\"serverGrowth\":45,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-524986.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[0,7],[6,8],[5,7],[2,8],[0,2],[5,6],[3,10],[6,10],[0,4],[3,4],[8,9],[1,4]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-460765.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,6],[1,3,6],[1,9,5,8],[6,1,5,6,2],[7,4,2,9,5,8],[3,7,3,2,7,3,9],[1,2,2,9,5,5,1,1]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-923259.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"575217693\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"11.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":387,\"serverGrowth\":46,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727796.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100100000011101101011000011100100011010101011100100011010101011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-818356.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,5,0,5,7,7,4,0,0,5,8,9,7,0,7,0,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"73.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":38260992,\"moneyMax\":382609920,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":300,\"serverGrowth\":56,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392066.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[71,89,11,191,134,67,143,70,27,84,20,16,138,94,31,90,143,34,115,154,145,152,145,10,178,182]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672794.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24022019237\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"41.1.1.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556106.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,24],[2,11],[10,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318416.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"zvvIxxM66WWWWWWWWWWWWWW33EEppppppppppppppJJJJ2uueeeeeeeeeeeee\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642064.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,11],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"8.3.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116278.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"qQCssnV1EsDkV1EsDlj1EsDlODlj1j1j12MjZ3R2MjZ3R2R2R2tgkgHEkgHE\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"92.9.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1150000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314165.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"AgAiGdnwhwhwhwZiDhw6C3foiDhwqqGZN8A5rN8A5rN8AXmN8AAqAFHg8AAqAFAAqAFOAAqAJlzqA\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-536095.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,6,2,0,4,4,3,0,0,0,0,2,10,3,2,10,5,10,2,3,5,8,6,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"79.2.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1250000,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-550924.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,29],[24,27],[14,19],[24,27],[5,9],[13,18],[19,21],[22,32],[18,19],[6,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-847666.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[101,96,145,113,137,177,129,73,152,141,39,116,156,155,176,177,121],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727601.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"hAE0EXZIBj0EmVPtBj0Ef2NqkkkkkQ8T445FPJ445FPJxKWPJxKWPKWPJ7KWPJ7WPJ7KW\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162861.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"56.3.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3750000,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963314.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[145,18,85,5,53,79,195,136,109,187,126,103,31,79,152,20,70,84,48,46],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-58213.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":984199206,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337865.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,6,1,2,2,4,3,3,5,4,4,7,5,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424344.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,9,0,0,8,3,4,7,0,5,0,5,6,7,9,8,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362783.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[41,163,150,180,87,8,40,83,80,52,109,61,78,33,13,60,142,189,192,33,99,4,184,137,120,170,119,72,167,83,154,98,8,20]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"65.5.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1375000,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-830487.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010100010101101010001111010000100100111100100100110010101001100\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885493.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[2,7],[6,3,2],[9,6,6,5],[7,5,8,2,4]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556411.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,10,42,33],[5,20,23,50],[31,41,43,16],[11,34,18,10],[12,24,16,3],[32,1,48,28],[31,41,33,13],[1,17,10,8],[3,21,7,30],[16,24,12,49],[30,44,37,7],[28,42,19,21]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-2203.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"KvNhD66XVvNhD66XVH6X66FNOSZ7PYTT7PYTT7PY67PY67PYY67PY67PYYY67PYYY68F00k\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"68.3.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-545536.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,1],[1,0,0,1,1,1,0,0],[0,0,0,0,1,0,0,0],[1,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0],[0,0,0,0,1,0,0,0],[0,1,0,1,0,0,0,0],[0,0,1,0,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406847.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[120,[4,7,15,16,17,19,20,21,22]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-387345.cct\",\"type\":\"Total Ways to Sum\",\"data\":16,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"87.2.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-370499.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))))a)((\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"29.4.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28743.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[155,79,57,164,68,177,138,112,180,165,3,181,54,46,200,83,108,4,2,136,17,20,17,84,39,141,54,47,25,141,195]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"73.4.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"19.0.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306298.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,10,10,1,-7,-10,3,10,3,2,-1,9,-3,-7,4,5,1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170819.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[4,6],[7,9],[1,2],[2,8],[5,8],[6,10],[0,6],[3,7],[5,9],[3,5],[2,3],[0,3],[4,9],[1,10],[2,9],[1,5],[3,4],[0,1],[1,7],[9,10]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-725144.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a((a(((()\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820566.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[193,[4,5,6,7,9,15,17,18,19,20,23,25]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816742.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"INBOX CACHE PASTE DEBUG MACRO\",3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"37.1.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-948114.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[6,127,198,99,113,112,145,54,55,55,187,24],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"42.8.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49.5,\"hackDifficulty\":49.5,\"minDifficulty\":17,\"moneyAvailable\":34618533,\"moneyMax\":346185330,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":194,\"serverGrowth\":33,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59129.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,1,1],[0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,1],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1],[0,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,1],[0,0,0,1,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379754.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"AoRsQ4PCH1J3UcRhIjbrRhISSSSSSSSSEzYi56pu56pu56pu5YmbgIVB4QBLbgGzo\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150119.cct\",\"type\":\"Total Ways to Sum\",\"data\":43,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"42.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":27740638.5,\"moneyMax\":277406385,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":239,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968551.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[111,190,119,191,162,25,41,126,80,14,176,28,164,24,169,137,101,24,100],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"18.9.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-753755.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"GCaa22q44444444LoOOUUUUUUUUUUffoooooooojjjjjjjjjjj6666666uDEEEEEEEEEEEEEEEEE5555a\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-265282.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,-6,-2,-2,10,5,-5,-1,-1,-9,10,5,6,-6,-6,-4,3,-2,-4,2,6,-10,0,-10,7,-4,5,5,2,10,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"3.9.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":499,\"serverGrowth\":36,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"53.1.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"minDifficulty\":29,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1005,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-95640.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FLASH DEBUG SHIFT TABLE CACHE\",3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-887056.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[97,152,110,54,90,175,71,176,155,99,189,86,2,101,80,123,99,97,83,133,58,168,197,99,104,3,132,23,142,6,67,184,82,164,128,140,153,38,99,48,116,189,82,133,75,148,59],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"57.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":52,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-797535.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"16960134186\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"3.4.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":532,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-6737.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYMODEMCACHEMOUSEPASTE\",\"COMPUTER\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429298.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9XOmmmmc1Z5996XUD4Hdis0454hT869qskskAsqW448zQH6I4RE824m1BE\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811710.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"TRASH ENTER DEBUG SHELL VIRUS\",5],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.6.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":342,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965999.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME SHIFT MOUSE LOGIN ENTER\",24],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153118.cct\",\"type\":\"Total Ways to Sum\",\"data\":64,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"11.6.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":202,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732386.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[9,4],[8,4,2]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"91.5.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"11.9.6.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":51,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900893.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,1,1,1,1,0,1,0,0],[0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,0],[0,0,0,1,1,1,0,0,1,0],[0,0,0,1,0,0,0,1,0,1],[1,0,0,1,0,0,1,0,0,1],[0,1,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963031.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19659181176\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298130.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[97,156,147,73,181,190,109,132,123,147,13,57,27,181,23,58,90,55,2,61,146,153,119,69,145,72,112,128,135,1,91,16,90,147,24,92,126,84,134,31,134,107,136,179,162,118,138,43]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"65.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"34.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"33.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"6.3.9.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":2,\"hashCapacity\":64,\"hashRate\":0.004802936391830503,\"level\":11,\"onlineTimeSeconds\":427837.4000000066,\"totalHashesGenerated\":2051.863831531555,\"runningScripts\":[]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"59.8.5.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.00034005496968496905,\"level\":1,\"onlineTimeSeconds\":427836.8000000066,\"totalHashesGenerated\":145.4877186019015,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":4.9308,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":1.7377,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":12.6889,\"isBanned\":false,\"isMember\":true,\"playerReputation\":438928.15311971173}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"rootAll\":\"run bp3_hacking_rootAll.js\",\"purchaseServer\":\"run bp3_pservers_purchase.js\",\"dw\":\"connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home\",\"mgr\":\"run bp3_hacking_managerManager.js\",\"root\":\"run bp3_hacking_rootAll.js\",\"mon\":\"run bp3_monitors_hackTargets.js\",\"darkwebAll\":\"connect darkweb; buy -a; home\",\"hm\":\"run bp3_hacking_manager.js\",\"aff\":\"run bp3_pservers_affordable.js\",\"darkwebnav\":\"connect darkweb; buy AutoLink.exe; buy DeepScanV2.exe; home\",\"batMgr\":\"run bp3_hacking_batchManager.js\",\"restart\":\"run bp3_progress_restart.js\",\"bat\":\"run bp3_hacking_batch.js\",\"path\":\"run bp3_servers_path.js\",\"max\":\"run bp3_pservers_purchase.js max 1\",\"bitrunners\":\"run bp3_servers_connectToServer.js run4theh111z\",\"stock\":\"run hm_stocks_stock-master.js\",\"psMgr\":\"run bp3_pservers_mgr.js\",\"blackHand\":\"run bp3_servers_connectToServer.js I.I.I.I\",\"nw\":\"run bp3_monitors_networth.js alert\",\"world\":\"run bp3_servers_connectToServer.js w0r1d_d43m0n\",\"tor\":\"run bp3_progress_tor.js\",\"prep\":\"run bp3_hacking_prepBatch.js\",\"player\":\"run bp3_player_manager.js --tail\",\"bn00dles\":\"run bp3_hacking_bN00dles.js\",\"uni\":\"run bp3_player_university.js\",\"net\":\"run bp3_monitors_networth.js\",\"corp\":\"run bp3_corp_manager.js\",\"pAugs\":\"run bp3_augs_purchase.js\",\"nfg\":\"run bp3_augs_nfg.js\",\"flight\":\"run fl1ght.exe\",\"train\":\"run bp3_player_train.js\",\"study\":\"run bp3_player_university.js\",\"sellAll\":\"run bp3_stocks_sellAll.js\",\"CSEC\":\"run bp3_servers_connectToServer.js CSEC\",\"loop\":\"run bp3_hacking_loop.js\",\"nitesec\":\"run bp3_servers_connectToServer.js avmnite-02h\",\"allInOne\":\"run bp3_hacking_allInOne.js\",\"closeRun\":\"run bp3_progress_install.js\",\"toDo\":\"run bp3_player_info.js --tail\",\"hacknet\":\"run bp3_hacknet_manager.js\",\"sPAugs\":\"run bp3_sleeves_purchaseAugs.js\",\"graft\":\"run bp3_graft_augList.js\",\"info\":\"run bp3_player_info.js --tail\",\"sCrime\":\"run bp3_sleeves_crime.js\",\"connectS\":\"run bp3_servers_connectToServer.js\",\"contract\":\"run bp3_contract_getList.js\",\"solve\":\"run bp3_servers_solveContracts.js\",\"bb\":\"run bp3_bb_manager.js\",\"bbAugs\":\"run bp3_bb_augs.js --tail\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-52,\"y\":76,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"34","AllGangsSave":"","LastExportBonus":"1693943120488","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}